max_error <- round(max(temp_data$calibrated_error) + 2*mz_binwidth, digits = 2)
# Create bins to plot data by
bins <- seq(min_error, max_error, by = mz_binwidth)
# Cut the calibrated errors into bins
temp_data$bin <- cut(temp_data$calibrated_error, bins, include.lowest = TRUE, labels = FALSE)
if (!column_to_colour_by %in% names(temp_data)) {
stop("The specified column to color by does not exist in the data frame.")
}
# Aggregate data for plotting
formula_text <- as.formula(paste("cbind(count = calibrated_error) ~ bin +", column_to_colour_by))
plot_data <- aggregate(formula_text, data = temp_data, FUN = length)
# Get bin center for plotting
plot_data$binstart <- bins[plot_data$bin]
plot_data$binend <- bins[plot_data$bin+1]
plot_data$bincenter <- (plot_data$binstart + plot_data$binend) / 2
# Calculate total PSM counts per dataset
total_counts <- plot_data %>%
group_by(!!sym(column_to_colour_by)) %>%
summarise(total = sum(count))
# Convert to factor
plot_data[[column_to_colour_by]] <- factor(plot_data[[column_to_colour_by]], levels = total_counts[[column_to_colour_by]])
# Add to plot df and custom facet label
plot_data <- plot_data %>%
left_join(total_counts, by = column_to_colour_by) %>%
mutate(facet_label = paste0(get(column_to_colour_by), "_total_PSMs:", total))
head(plot_data)
title_text <- gsub("^.*/|\\.csv$|^", "", absolute_file_path)
title_text <- sub("^merged_data_", "", title_text)
# Generate and display the plot with facets for each dataset_ID
p <- ggplot(plot_data, aes(x = bincenter, y = count, fill = get(column_to_colour_by))) +
geom_col(width = mz_binwidth) +
facet_wrap(~reorder(facet_label, -total), ncol = 3, labeller = label_parsed) +
scale_x_continuous(name = "Calibrated Error (m/z)") +
labs(y = "Count", title = title_text) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
strip.text.x = element_text(size = 10, hjust = 1)) +
geom_vline(xintercept = -0.0095, linetype = "dashed", color = "black")
if (column_to_colour_by == "instrument") {
p <- p + scale_fill_manual(values = instrument_colors)
} else {
p <- p + scale_fill_brewer(palette = "Set3")
}
print(p)
return(p)
}
for (column in columns_of_interest) {
# open a pdf file#
pdf(file = paste0("../out/faceted_plots_by_", column, ".pdf"),
width = 8.27, height = 11.69) #A4 format
for (file in input_filenames) {
# add plot to pdf
plot_colour_coded_histogram(absolute_file_path = file,
peptidoform_metadata = peptidoform_data,
column_to_colour_by = column,
mz_binwidth = 0.001)
}
#
dev.off()
# open a pdf file#
pdf(file = paste0("../out/stacked_plots_by_", column, ".pdf"),
width = 8.27, height = 11.69) #A4 format
for (file in input_filenames) {
# add plot to pdf
plot_colour_coded_histogram(absolute_file_path = file,
peptidoform_metadata = peptidoform_data,
mz_binwidth = 0.001,
column_to_colour_by = column,
layout = "stacked_bar")
}
dev.off()
}
#
dev.off()
source("C:/Users/jtzve/Desktop/Sufo_Tyrosine/07_BOI_peptidoforms_Colourcoded_histograms/scripts/01_Histograms_colour_coded_generation.R", echo=TRUE)
# add source here so we can generate the colour palette within the function
source("plot_colour_coded_histogram_facetonly.R")
# decide which columns to colour plots by
# columns_of_interest <- c("dataset_ID", "experiment_tag",  "instrument")
columns_of_interest <- c("experiment_tag")
# add source here so we can generate the colour palette within the function
source("plot_colour_coded_histogram_facetonly.R")
for (column in columns_of_interest) {
# open a pdf file#
pdf(file = paste0("../out/faceted_plots_by_", column, ".pdf"),
width = 8.27, height = 11.69) #A4 format
for (file in input_filenames) {
# add plot to pdf
plot_colour_coded_histogram(absolute_file_path = file,
peptidoform_metadata = peptidoform_data,
column_to_colour_by = column,
mz_binwidth = 0.001)
}
#
dev.off()
# # open a pdf file#
# pdf(file = paste0("../out/stacked_plots_by_", column, ".pdf"),
#     width = 8.27, height = 11.69) #A4 format
#
# for (file in input_filenames) {
#
#   # add plot to pdf
#   plot_colour_coded_histogram(absolute_file_path = file,
#                               peptidoform_metadata = peptidoform_data,
#                               mz_binwidth = 0.001,
#                               column_to_colour_by = column,
#                               layout = "stacked_bar")
#
#
# }
#
# dev.off()
}
paste0(column_to_colour_by, "_total_PSMs:", total)
plot_colour_coded_histogram <- function(absolute_file_path,
peptidoform_metadata,
column_to_colour_by,
mz_binwidth = 0.02,
layout = "facet",
metadata_by_dataset = datasets_metadata,
totals_only = FALSE) {
# Read in the .csv file for a peptidoform
temp_data <- read.csv(absolute_file_path)
# Extract dataset ID and experiment tag
full_IDs <- strsplit(temp_data$dataset_ID, split = "-")
temp_data$dataset_ID <- sapply(full_IDs, `[`, 1)
temp_data$experiment_tag <- sapply(full_IDs, `[`, 2)
# Replace NA values with "" to avoid future complications
temp_data <- temp_data %>%
mutate(
dataset_ID = replace_na(dataset_ID, ""),
experiment_tag = replace_na(experiment_tag, "")
)
# Add instrument metadata to the dataset
temp_data$instrument <- ""
for(i in 1:nrow(temp_data)) {
current_dataset_ID <- gsub("^CPTAC_", "", temp_data$dataset_ID[i])
current_experiment_tag <- temp_data$experiment_tag[i]
match_row <- metadata_by_dataset[
metadata_by_dataset$dataset_ID == current_dataset_ID &
metadata_by_dataset$experiment_tag == current_experiment_tag,
]
if(nrow(match_row) == 1) {
temp_data$instrument[i] <- match_row$instrument
} else {
match_row <- metadata_by_dataset[metadata_by_dataset$dataset_ID == current_dataset_ID, ]
if (nrow(match_row) == 1) {
temp_data$instrument[i] <- match_row$instrument
} else if (nrow(match_row) > 1) {
instrument <- unique(match_row$instrument)
if (length(instrument) == 1) {
temp_data$instrument[i] <- instrument
} else {
instr_counts <- table(match_row$instrument)
most_common_instrument <- names(sort(instr_counts, decreasing = TRUE))[1]
temp_data$instrument[i] <- most_common_instrument
}
} else {
temp_data$instrument[i] <- "not_known"
warning(paste("No instrument found for dataset ID", current_dataset_ID, "."))
}
}
}
# Precalculate the number of PSMs by instrument
total_counts_by_instrument <- as.data.frame(table(temp_data$instrument))
names(total_counts_by_instrument) <- c("instrument", temp_data$peptidoform_id[1])
write.csv(total_counts_by_instrument,
file = paste0("../out/total_counts_by_instrument_for_",temp_data$peptidoform_id[1], ".csv"),
row.names =  FALSE)
if (totals_only) {
warning("csv written, but no plots generated.")
return()
}
# Precalculate min and max calibrated error
min_error <- round(min(temp_data$calibrated_error) - 2*mz_binwidth, digits = 2)
max_error <- round(max(temp_data$calibrated_error) + 2*mz_binwidth, digits = 2)
# Create bins to plot data by
bins <- seq(min_error, max_error, by = mz_binwidth)
# Cut the calibrated errors into bins
temp_data$bin <- cut(temp_data$calibrated_error, bins, include.lowest = TRUE, labels = FALSE)
if (!column_to_colour_by %in% names(temp_data)) {
stop("The specified column to color by does not exist in the data frame.")
}
# Aggregate data for plotting
formula_text <- as.formula(paste("cbind(count = calibrated_error) ~ bin +", column_to_colour_by))
plot_data <- aggregate(formula_text, data = temp_data, FUN = length)
# Get bin center for plotting
plot_data$binstart <- bins[plot_data$bin]
plot_data$binend <- bins[plot_data$bin+1]
plot_data$bincenter <- (plot_data$binstart + plot_data$binend) / 2
# Calculate total PSM counts per dataset
total_counts <- plot_data %>%
group_by(!!sym(column_to_colour_by)) %>%
summarise(total = sum(count))
# Convert to factor
plot_data[[column_to_colour_by]] <- factor(plot_data[[column_to_colour_by]], levels = total_counts[[column_to_colour_by]])
# Add to plot df and custom facet label
plot_data <- plot_data %>%
left_join(total_counts, by = column_to_colour_by) %>%
mutate(facet_label = paste0(column_to_colour_by, "_total_PSMs:", total))
head(plot_data)
title_text <- gsub("^.*/|\\.csv$|^", "", absolute_file_path)
title_text <- sub("^merged_data_", "", title_text)
# Generate and display the plot with facets for each dataset_ID
p <- ggplot(plot_data, aes(x = bincenter, y = count, fill = !!sym(column_to_colour_by))) +
geom_col(width = mz_binwidth) +
facet_wrap(~reorder(facet_label, -total), ncol = 3, labeller = label_parsed) +
scale_x_continuous(name = "Calibrated Error (m/z)") +
labs(y = "Count", title = title_text) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
strip.text.x = element_text(size = 10, hjust = 1)) +
geom_vline(xintercept = -0.0095, linetype = "dashed", color = "black")
if (column_to_colour_by == "instrument") {
p <- p + scale_fill_manual(values = instrument_colors)
} else {
p <- p + scale_fill_brewer(palette = "Set3")
}
print(p)
return(p)
}
for (column in columns_of_interest) {
# open a pdf file#
pdf(file = paste0("../out/faceted_plots_by_", column, ".pdf"),
width = 8.27, height = 11.69) #A4 format
for (file in input_filenames) {
# add plot to pdf
plot_colour_coded_histogram(absolute_file_path = file,
peptidoform_metadata = peptidoform_data,
column_to_colour_by = column,
mz_binwidth = 0.001)
}
#
dev.off()
# # open a pdf file#
# pdf(file = paste0("../out/stacked_plots_by_", column, ".pdf"),
#     width = 8.27, height = 11.69) #A4 format
#
# for (file in input_filenames) {
#
#   # add plot to pdf
#   plot_colour_coded_histogram(absolute_file_path = file,
#                               peptidoform_metadata = peptidoform_data,
#                               mz_binwidth = 0.001,
#                               column_to_colour_by = column,
#                               layout = "stacked_bar")
#
#
# }
#
# dev.off()
}
#
dev.off()
#
dev.off()
#
dev.off()
library(tidyverse)
library(janitor)
setwd("C:/Users/jtzve/Desktop/Sufo_Tyrosine/09_USI_generation/scripts")
data_dir <- "C:/Users/jtzve/Desktop/Sufo_Tyrosine/09_USI_generation/out/of_interest_strict/"
library(tidyverse)
source(file = "generate_USI_fun.R")
source("generate_USI_fun.R")
modify_USI <- function(usi) {
# split the USI string to work with the last segment
parts <- str_split(usi, ":")[[1]]
last_segment <- parts[6]
modified <- FALSE
# replace a random occurance of "Y[Phospho]" with "Y{Sulfo}" if Y[Phospho] exists
if (str_detect(last_segment, "Y\\[Phospho\\]")) {
phospho_positions <- gregexpr("Y\\[Phospho\\]", last_segment)[[1]]
if (length(phospho_positions) > 0) {
# choose a random position to replace
chosen_position <- sample(phospho_positions, 1)
last_segment <- sub("Y\\[Phospho\\]", "Y{Sulfo}", last_segment, perl = TRUE)
# reconstruct usi and return
parts[6] <- last_segment
return(paste(parts, collapse = ":"))
}
}
if (!modified && str_detect(last_segment, "Y(?!\\{)") && str_detect(last_segment, "\\[Phospho\\]")) {
# Find all "Y" not followed by "{"
y_positions <- gregexpr("Y(?!\\{)", last_segment, perl = TRUE)
y_positions <- y_positions[[1]][1:length(y_positions[[1]])]
if (length(y_positions) == 0) {
return("")
} else if (length(y_positions) == 1) {
chosen_y <- y_positions[1]
} else {
# choose random y to replace
chosen_y <- sample(y_positions, 1)
}
# split the sting into a vector fo letters
last_segment <- strsplit(last_segment, split = "") %>% unlist()
sulfotyrosine <- "Y{Sulfo}"
# replace the chosen tyrosine with a sulfotyrosine
last_segment[chosen_y] <-  sulfotyrosine
# re-paste together
new_segment <- paste(last_segment, collapse = "")
# now that we have added a sulfo, we need to remove a phospho
# Find all "[Phospho]" in this new segment
phospho_positions <- gregexpr("\\[Phospho\\]", new_segment)[[1]][1:length(gregexpr("\\[Phospho\\]", new_segment)[[1]])]
if (length(phospho_positions) == 0) {
return("")
} else if (length(phospho_positions) == 1) {
chosen_phospho <- phospho_positions[1]
} else {
# choose random phospho to replace
chosen_phospho <- sample(phospho_positions, 1)
}
# ger the new segment as vector again
temp_segment <- strsplit(new_segment, split = "") %>% unlist()
# replace the chosen phospho with nothing
temp_segment[chosen_phospho:(chosen_phospho+8)] <- ""
# reconstruct
new_segment <- paste(temp_segment, collapse = "")
modified <- TRUE
}
# if no modifications were made, return an empty string
if (!modified) {
return("")
}
# otherwise, reassemble the USI with the modified last segment
parts[6] <- new_segment
return(paste(parts, collapse = ":"))
}
setwd("C:/Users/jtzve/Desktop/Sufo_Tyrosine/09_USI_generation/scripts")
data_dir <- "C:/Users/jtzve/Desktop/Sufo_Tyrosine/06_histograms_of_peptidoforms_of_interest_per_dataset/out/csv_tables_by_peptidoform/"
# get the files we are interested in read in.
# we only want ones with convincing histogram and likely protein ID based on cellular localisation
metadata <- read.csv("../in/potential_sulfo_peptidoforms_annotated.csv")
peptidoforms_of_interst <- metadata[metadata$convincing_histogram_alldatasets == "y" &
metadata$convincing_protein_subcellular_location == "y", "peptidoform_id"]
# use the updated table
metadata <- read.csv("../in/Table_S1_final_v2.csv")
View(metadata)
View(metadata)
# use the updated table
metadata <- read.csv("../in/Table_S1_final_v2.csv")
peptidoforms_of_interst <- metadata[metadata$Histogram_Evaluation == "Convincing" &
metadata$Biological_context_tags != "No prior knowledge", "peptidoform_ID"]
library(tidyverse)
source("generate_USI_fun.R")
setwd("C:/Users/jtzve/Desktop/Sufo_Tyrosine/09_USI_generation/scripts")
data_dir <- "C:/Users/jtzve/Desktop/Sufo_Tyrosine/06_histograms_of_peptidoforms_of_interest_per_dataset/out/csv_tables_by_peptidoform/"
# use the updated table
metadata <- read.csv("../in/Table_S1_final_v2.csv")
peptidoforms_of_interst <- metadata[metadata$Histogram_Evaluation == "Convincing" &
metadata$Biological_context_tags != "No prior knowledge", "peptidoform_ID"]
files_of_interst <- paste0(data_dir, "merged_data_", peptidoforms_of_interst, ".csv")
files_list <- list()
for (i in (1: length(files_of_interst))) {
files_list[[i]] <- read.csv(files_of_interst[i])
}
data_dir <- "C:/Users/jtzve/Desktop/Sufo_Tyrosine/06_BOI_peptidoforms_all_PSM_data/out/csv_tables_by_peptidoform/"
files_list <- list()
for (i in (1: length(files_of_interst))) {
files_list[[i]] <- read.csv(files_of_interst[i])
}
files_of_interst[i]
source("generate_USI_fun.R")
setwd("C:/Users/jtzve/Desktop/Sufo_Tyrosine/09_USI_generation/scripts")
data_dir <- "C:/Users/jtzve/Desktop/Sufo_Tyrosine/06_BOI_peptidoforms_all_PSM_data/out/csv_tables_by_peptidoform/"
# use the updated table
metadata <- read.csv("../in/Table_S1_final_v2.csv")
peptidoforms_of_interst <- metadata[metadata$Histogram_Evaluation == "Convincing" &
metadata$Biological_context_tags != "No prior knowledge", "peptidoform_ID"]
files_of_interst <- paste0(data_dir, "merged_data_", peptidoforms_of_interst, ".csv")
files_list <- list()
for (i in (1: length(files_of_interst))) {
files_list[[i]] <- read.csv(files_of_interst[i])
}
test <- files_list[[1]]
files_with_USIs_list <- list()
for (i in (1: length(files_of_interst))) {
files_with_USIs_list[[i]] <- generate_USI(files_list[[i]])
}
all_data <- files_with_USIs_list[[1]]
for (i in (2: length(files_of_interst))) {
all_data <- rbind(all_data,files_with_USIs_list[[i]] )
}
all_data$protein_ID <- ""
all_data$protein_name <- ""
all_data$known_sulfated <- ""
all_colnames <- colnames(all_data)
collnames_to_add_to_end <- all_colnames[1:24]
all_data_reorganised <- all_data[, c("peptidoform_id",
"known_sulfated",
"USI_workaround",
"USI_with_one_sulfo",
"USI_with_two_sulfo",
"calibrated_error",
"protein_ID",
"protein_name",
"dataset_ID",
collnames_to_add_to_end)]
# populate protein ID and protein name based on matching peptidoform ID:
# if all_data_reorganised$peptidoform_id matches  metadata$peptidoform_id,
#
# populate all_data_reorganised$protein_ID with values from the same row for metadata$cleaned_protein_IDs
# and populate all_data_reorganised$protein_name with values from the same row for metadata$Protein.names
#
all_data_reorganised <- all_data_reorganised %>%
left_join(metadata %>%
select(peptidoform_id, cleaned_protein_IDs, Protein.names),
by = "peptidoform_id") %>%
mutate(protein_ID = cleaned_protein_IDs,
protein_name = Protein.names) %>%
select(-cleaned_protein_IDs, -Protein.names)
View(metadata)
gc()
# set wd to script folder
setwd("C:/Users/jtzve/Desktop/Sufo_Tyrosine/12_simple_instrument_proportions/scripts/")
# instrument_counts_by_peptidoform_data is in the data dir
data_dir <- "C:/Users/jtzve/Desktop/Sufo_Tyrosine/07_BOI_peptidoforms_Colourcoded_histograms/out/counts_by_instrument_convinving_peptidoforms/"
setwd("C:/Users/jtzve/Desktop/Sufo_Tyrosine/07_BOI_peptidoforms_Colourcoded_histograms/scripts")
######### libraries and directories #########
library(tidyverse)
library(janitor)
library(viridis)
library(ggplot2)
gc()
# set wd to script folder
setwd("C:/Users/jtzve/Desktop/Sufo_Tyrosine/12_simple_instrument_proportions/scripts/")
# instrument_counts_by_peptidoform_data is in the data dir
data_dir <- "C:/Users/jtzve/Desktop/Sufo_Tyrosine/07_BOI_peptidoforms_Colourcoded_histograms/out/counts_by_instrument_convinving_peptidoforms/"
####### read in data ##############
# peptidoforms of interest metadata - subset of proteins  that could be sulfated based on CC
BOI_all<- read.csv("../in/BOI_peptidoforms_annotated.csv")
BOI_all_peptidoforms <- BOI_all$peptidoform_id
datasets_metadata <- read.csv("../in/human_phosphobuild_metadata.csv") %>% clean_names()
instrument_data <- datasets_metadata[, c("instrument_name", "spectra_id_d")]
instrument_data$instrument_name <- as.factor(instrument_data$instrument_name)
# clean spectra_id_d column
instrument_data <- instrument_data %>%
mutate(spectra_id_d = gsub(",", "", spectra_id_d), # remove commas
spectra_id_d = as.numeric(spectra_id_d)) # convert to numeric
# aggregate by instrument and sum the values in spectra_id_d
PSMs_by_instrument <- instrument_data %>%
group_by(instrument_name) %>%
summarise(total_PSMs = sum(spectra_id_d, na.rm = TRUE), .groups = 'drop')
library(tidyverse)
library(viridis)
library(ggplot2)
# set wd to script folder
setwd("C:/Users/jtzve/Desktop/Sufo_Tyrosine/07_BOI_peptidoforms_Colourcoded_histograms/scripts/")
# data by peptidoform is in the data dir
data_dir <- "C:/Users/jtzve/Desktop/Sufo_Tyrosine/06_BOI_peptidoforms_all_PSM_data/out/csv_tables_by_peptidoform/"
####### read in data ##############
# stricter subset where histograms were convincing
peptidoform_data <- read.csv("../in/BOIs_all.csv")
# table S1 has manual annotations
peptidoform_annotaitons <- read.csv("../in/table_S1_final_v2.csv")
# below will be needed  to add instrument to datasets
datasets_metadata <- read.csv("../in/human_phosphobuild_metadata.csv") %>% distinct()
# convert the issue with multiple datasets split by comma into a long format by adding more rows
# head(datasets_metadata)
datasets_metadata <- datasets_metadata %>%
separate_rows(Dataset, sep = ",") %>%
distinct()
# rename columns
names(datasets_metadata) <- c("dataset_ID", "experiment_tag", "instrument", "sample_category")
# replace spaces in instrument names by _ to enable proper plotting later - some error in the gfacet wrap otherwise
datasets_metadata$instrument <- gsub(" ", "_", datasets_metadata$instrument)
######### get list of files ##############
extension = ".csv"
files_by_peptidoform <- list.files(data_dir, pattern = extension, full.names = FALSE, recursive = TRUE)
# retain peptidofrom id from the filenames
ids_in_file_names <- gsub("^merged_data_|\\.csv$", "", files_by_peptidoform)
# keep only relevant files and then generate absolute paths for input
filtered_files <- files_by_peptidoform[ids_in_file_names %in% peptidoform_data$peptidoform_id]
input_filenames <- paste0(data_dir, filtered_files)
# decide which columns to colour plots by
# columns_of_interest <- c("dataset_ID", "experiment_tag",  "instrument")
columns_of_interest <- c("experiment_tag")
# add source here so we can generate the colour palette within the function
source("plot_colour_coded_histogram_facetonly.R")
for (column in columns_of_interest) {
# open a pdf file#
pdf(file = paste0("../out/faceted_plots_by_", column, ".pdf"),
width = 8.27, height = 11.69) #A4 format
for (file in input_filenames) {
# add plot to pdf
plot_colour_coded_histogram(absolute_file_path = file,
peptidoform_metadata = peptidoform_data,
column_to_colour_by = column,
mz_binwidth = 0.001,
totals_only = TRUE)
}
#
dev.off()
# # open a pdf file#
# pdf(file = paste0("../out/stacked_plots_by_", column, ".pdf"),
#     width = 8.27, height = 11.69) #A4 format
#
# for (file in input_filenames) {
#
#   # add plot to pdf
#   plot_colour_coded_histogram(absolute_file_path = file,
#                               peptidoform_metadata = peptidoform_data,
#                               mz_binwidth = 0.001,
#                               column_to_colour_by = column,
#                               layout = "stacked_bar")
#
#
# }
#
# dev.off()
}
dev.off()
