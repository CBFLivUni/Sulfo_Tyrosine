metadata_for_mismatches <- read.csv(file = paste0(data_dir, "manually_annotated_exp_tags.csv"),
header = TRUE,
)
##################### BIN DATA #####################
# bin of interest
BOI <- read.csv(file = paste0(data_dir, "tyrosine_containing_foreground_inSwissProt.tsv"),
header = TRUE,
sep = "\t"
)
# one bin left
DECOY_minus1 <- read.csv(file = paste0(data_dir, "tyrosine_containing_DECOY_minus1_inSwissProt.tsv"),
header = TRUE,
sep = "\t"
)
DECOY_minus2 <- read.csv(file = paste0(data_dir, "tyrosine_containing_DECOY_minus2_inSwissProt.tsv"),
header = TRUE,
sep = "\t"
) ## not read in as no unique entries not already in decoy minus 1
# mirror bin to BOI
DECOY1 <- read.csv(file = paste0(data_dir, "tyrosine_containing_DECOY1_inSwissProt.tsv"),
header = TRUE,
sep = "\t"
)
DECOY2 <- read.csv(file = paste0(data_dir, "tyrosine_containing_DECOY2_inSwissProt.tsv"),
header = TRUE,
sep = "\t"
)
DECOY3 <- read.csv(file = paste0(data_dir, "tyrosine_containing_DECOY3_inSwissProt.tsv"),
header = TRUE,
sep = "\t"
)
all_bins_background <- read.csv(file = paste0(data_dir, "tyrosine_containing_background_inSwissProt.tsv"),
header = TRUE,
sep = "\t"
)
df = BOI
metadata_df = metadata
manual_annotations_df = metadata_for_mismatches
BOI_datasets <- unique(df$dataset_ID)
BOI_datasets_split <- strsplit(as.character(BOI_datasets), ", ")
# initialise empty df to store additional data data wiht peptidoform granularity
BOI_expanded_data <- data.frame(
peptidoform_id = character(),
Experiment_Tag = character(),
dataset_id = character(),
stringsAsFactors=FALSE)
# lets look at every datasetID_experimentTag in our BOI data for each peptidoform
for(i in seq_along(BOI_datasets_split)) {
# get the vector of dataset_experiemtnalTags
datasets <- BOI_datasets_split[[i]]
# populate the peptidoform id column
peptidoform_id <- rep(df$peptidoform_id[i], length(datasets))
# split each item at the first '-' - the bit on the left is dataset ID, everything else on the right including subsequent - is Experiment Tag
dataset_ids <- sapply(datasets, function(x) strsplit(x, "-", fixed=TRUE)[[1]][1])
experiment_tags <- sapply(datasets, function(x) {
parts <- strsplit(x, "-", fixed=TRUE)[[1]]
paste(parts[-1], collapse="-")
})
temp_data <- data.frame(peptidoform_id = peptidoform_id,
Experiment_Tag = experiment_tags,
dataset_id = dataset_ids,
stringsAsFactors=FALSE)
BOI_expanded_data <- rbind(BOI_expanded_data, temp_data)
}
# Every Experiment Tag should have a match in metadata$Experiment.Tag. get the associated metadata$Instrument.Name for each
# preallocate column
BOI_expanded_data$Instrument_Name <- NA
########## METADATA #################
# all metadata from protein atlas
metadata <- read.csv(file = paste0(data_dir, "human_phosphobuild_metadata.csv"),
header = TRUE,
)
project_dir = "C:/Users/jtzve/Desktop/Sufo_Tyrosine/08_instrument_enrichment//"
data_dir <- "C:/Users/jtzve/Desktop/Sufo_Tyrosine/08_instrument_enrichment/in/"
gc()
########## METADATA #################
# all metadata from protein atlas
metadata <- read.csv(file = paste0(data_dir, "human_phosphobuild_metadata.csv"),
header = TRUE,
)
# instrument metadata - manually collected
instrument_metadata <- read.csv(file = paste0(data_dir, "instrument_metadata.csv"),
header = TRUE,
)
metadata_for_mismatches <- read.csv(file = paste0(data_dir, "manually_annotated_exp_tags.csv"),
header = TRUE,
)
##################### BIN DATA #####################
# bin of interest
BOI <- read.csv(file = paste0(data_dir, "tyrosine_containing_foreground_inSwissProt.tsv"),
header = TRUE,
sep = "\t"
)
df = BOI
metadata_df = metadata
manual_annotations_df = metadata_for_mismatches
BOI_datasets <- unique(df$dataset_ID)
BOI_datasets_split <- strsplit(as.character(BOI_datasets), ", ")
# initialise empty df to store additional data data wiht peptidoform granularity
BOI_expanded_data <- data.frame(
peptidoform_id = character(),
Experiment_Tag = character(),
dataset_id = character(),
stringsAsFactors=FALSE)
# lets look at every datasetID_experimentTag in our BOI data for each peptidoform
for(i in seq_along(BOI_datasets_split)) {
# get the vector of dataset_experiemtnalTags
datasets <- BOI_datasets_split[[i]]
# populate the peptidoform id column
peptidoform_id <- rep(df$peptidoform_id[i], length(datasets))
# split each item at the first '-' - the bit on the left is dataset ID, everything else on the right including subsequent - is Experiment Tag
dataset_ids <- sapply(datasets, function(x) strsplit(x, "-", fixed=TRUE)[[1]][1])
experiment_tags <- sapply(datasets, function(x) {
parts <- strsplit(x, "-", fixed=TRUE)[[1]]
paste(parts[-1], collapse="-")
})
temp_data <- data.frame(peptidoform_id = peptidoform_id,
Experiment_Tag = experiment_tags,
dataset_id = dataset_ids,
stringsAsFactors=FALSE)
BOI_expanded_data <- rbind(BOI_expanded_data, temp_data)
}
# Every Experiment Tag should have a match in metadata$Experiment.Tag. get the associated metadata$Instrument.Name for each
# preallocate column
BOI_expanded_data$Instrument_Name <- NA
for(i in 1:nrow(BOI_expanded_data)) {
experiment_tag <- BOI_expanded_data$Experiment_Tag[i]
matching_row <- metadata_df[metadata_df$Experiment.Tag == experiment_tag,]
if(nrow(matching_row) > 0) {
BOI_expanded_data$Instrument_Name[i] <- matching_row$Instrument.Name[1]
} else {
# match the dataset id to that of the manually annotated metadata
temp_dataset_id <- BOI_expanded_data$dataset_id[i]
manual_instrument <- manual_annotations_df[manual_annotations_df$dataset_id == temp_dataset_id, "Instrument_Name"] %>% unique()
# and assign the corresponding instrument
BOI_expanded_data$Instrument_Name[i] <- manual_instrument
}
}
View(BOI_expanded_data)
# get_dataset_counts
get_instruments_by_peptidoform <- function(df, metadata_df, manual_annotations_df) {
# df = BOI
# metadata_df = metadata
# manual_annotations_df = metadata_for_mismatches
# BOI_datasets <- unique(df$dataset_ID)
BOI_datasets_split <- strsplit(as.character(BOI_datasets), ", ")
# initialise empty df to store additional data data wiht peptidoform granularity
BOI_expanded_data <- data.frame(
peptidoform_id = character(),
Experiment_Tag = character(),
dataset_id = character(),
stringsAsFactors=FALSE)
# lets look at every datasetID_experimentTag in our BOI data for each peptidoform
for(i in seq_along(BOI_datasets_split)) {
# get the vector of dataset_experiemtnalTags
datasets <- BOI_datasets_split[[i]]
# populate the peptidoform id column
peptidoform_id <- rep(df$peptidoform_id[i], length(datasets))
# split each item at the first '-' - the bit on the left is dataset ID, everything else on the right including subsequent - is Experiment Tag
dataset_ids <- sapply(datasets, function(x) strsplit(x, "-", fixed=TRUE)[[1]][1])
experiment_tags <- sapply(datasets, function(x) {
parts <- strsplit(x, "-", fixed=TRUE)[[1]]
paste(parts[-1], collapse="-")
})
temp_data <- data.frame(peptidoform_id = peptidoform_id,
Experiment_Tag = experiment_tags,
dataset_id = dataset_ids,
stringsAsFactors=FALSE)
BOI_expanded_data <- rbind(BOI_expanded_data, temp_data)
}
# Every Experiment Tag should have a match in metadata$Experiment.Tag. get the associated metadata$Instrument.Name for each
# preallocate column
BOI_expanded_data$Instrument_Name <- NA
for(i in 1:nrow(BOI_expanded_data)) {
experiment_tag <- BOI_expanded_data$Experiment_Tag[i]
matching_row <- metadata_df[metadata_df$Experiment.Tag == experiment_tag,]
if(nrow(matching_row) > 0) {
BOI_expanded_data$Instrument_Name[i] <- matching_row$Instrument.Name[1]
} else {
# match the dataset id to that of the manually annotated metadata
temp_dataset_id <- BOI_expanded_data$dataset_id[i]
manual_instrument <- manual_annotations_df[manual_annotations_df$dataset_id == temp_dataset_id, "Instrument_Name"] %>% unique()
# and assign the corresponding instrument
BOI_expanded_data$Instrument_Name[i] <- manual_instrument
}
}
return(BOI_expanded_data)
}
test<- get_instruments_by_peptidoform(df = BOI,
metadata_df = metadata,
manual_annotations_df = metadata_for_mismatches)
identical(test, BOI_expanded_data)
BOI_instruments <- get_instruments_by_peptidoform(df = BOI,
metadata_df = metadata,
manual_annotations_df = metadata_for_mismatches)
# one bin left
DECOY_minus1 <- read.csv(file = paste0(data_dir, "tyrosine_containing_DECOY_minus1_inSwissProt.tsv"),
header = TRUE,
sep = "\t"
)
DECOY_minus2 <- read.csv(file = paste0(data_dir, "tyrosine_containing_DECOY_minus2_inSwissProt.tsv"),
header = TRUE,
sep = "\t"
) ## not read in as no unique entries not already in decoy minus 1
# mirror bin to BOI
DECOY1 <- read.csv(file = paste0(data_dir, "tyrosine_containing_DECOY1_inSwissProt.tsv"),
header = TRUE,
sep = "\t"
)
DECOY2 <- read.csv(file = paste0(data_dir, "tyrosine_containing_DECOY2_inSwissProt.tsv"),
header = TRUE,
sep = "\t"
)
DECOY3 <- read.csv(file = paste0(data_dir, "tyrosine_containing_DECOY3_inSwissProt.tsv"),
header = TRUE,
sep = "\t"
)
all_bins_background <- read.csv(file = paste0(data_dir, "tyrosine_containing_background_inSwissProt.tsv"),
header = TRUE,
sep = "\t"
)
DM1_instruments <- get_instruments_by_peptidoform(df = DECOY_minus1,
metadata_df = metadata,
manual_annotations_df = metadata_for_mismatches)
DM2_instruments <- get_instruments_by_peptidoform(df = DECOY_minus2,
metadata_df = metadata,
manual_annotations_df = metadata_for_mismatches)
D1_instruments <- get_instruments_by_peptidoform(df = DECOY1,
metadata_df = metadata,
manual_annotations_df = metadata_for_mismatches)
D2_instruments <- get_instruments_by_peptidoform(df = DECOY2,
metadata_df = metadata,
manual_annotations_df = metadata_for_mismatches)
D3_instruments <- get_instruments_by_peptidoform(df = DECOY3,
metadata_df = metadata,
manual_annotations_df = metadata_for_mismatches)
# get_dataset_counts
get_instruments_by_peptidoform <- function(df, metadata_df, manual_annotations_df) {
# df = BOI
# metadata_df = metadata
# manual_annotations_df = metadata_for_mismatches
# BOI_datasets <- unique(df$dataset_ID)
BOI_datasets_split <- strsplit(as.character(BOI_datasets), ", ")
# initialise empty df to store additional data data wiht peptidoform granularity
BOI_expanded_data <- data.frame(
peptidoform_id = character(),
Experiment_Tag = character(),
dataset_id = character(),
stringsAsFactors=FALSE)
# lets look at every datasetID_experimentTag in our BOI data for each peptidoform
for(i in seq_along(BOI_datasets_split)) {
# get the vector of dataset_experiemtnalTags
datasets <- BOI_datasets_split[[i]]
# populate the peptidoform id column
peptidoform_id <- rep(df$peptidoform_id[i], length(datasets))
# split each item at the first '-' - the bit on the left is dataset ID, everything else on the right including subsequent - is Experiment Tag
dataset_ids <- sapply(datasets, function(x) strsplit(x, "-", fixed=TRUE)[[1]][1])
experiment_tags <- sapply(datasets, function(x) {
parts <- strsplit(x, "-", fixed=TRUE)[[1]]
paste(parts[-1], collapse="-")
})
temp_data <- data.frame(peptidoform_id = peptidoform_id,
Experiment_Tag = experiment_tags,
dataset_id = dataset_ids,
stringsAsFactors=FALSE)
BOI_expanded_data <- rbind(BOI_expanded_data, temp_data)
}
# Every Experiment Tag should have a match in metadata$Experiment.Tag. get the associated metadata$Instrument.Name for each
# preallocate column
BOI_expanded_data$Instrument_Name <- NA
for(i in 1:nrow(BOI_expanded_data)) {
experiment_tag <- BOI_expanded_data$Experiment_Tag[i]
matching_row <- metadata_df[metadata_df$Experiment.Tag == experiment_tag,]
if(nrow(matching_row) > 0) {
BOI_expanded_data$Instrument_Name[i] <- matching_row$Instrument.Name[1]
} else {
# match the dataset id to that of the manually annotated metadata
temp_dataset_id <- BOI_expanded_data$dataset_id[i]
manual_instrument <- manual_annotations_df[manual_annotations_df$dataset_id == temp_dataset_id, "Instrument_Name"] %>% unique()
# and assign the corresponding instrument
BOI_expanded_data$Instrument_Name[i] <- manual_instrument
}
}
return(BOI_expanded_data)
}
# get_dataset_counts
get_instruments_by_peptidoform <- function(df, metadata_df, manual_annotations_df) {
# df = BOI
# metadata_df = metadata
# manual_annotations_df = metadata_for_mismatches
BOI_datasets <- unique(df$dataset_ID)
BOI_datasets_split <- strsplit(as.character(BOI_datasets), ", ")
# initialise empty df to store additional data data wiht peptidoform granularity
BOI_expanded_data <- data.frame(
peptidoform_id = character(),
Experiment_Tag = character(),
dataset_id = character(),
stringsAsFactors=FALSE)
# lets look at every datasetID_experimentTag in our BOI data for each peptidoform
for(i in seq_along(BOI_datasets_split)) {
# get the vector of dataset_experiemtnalTags
datasets <- BOI_datasets_split[[i]]
# populate the peptidoform id column
peptidoform_id <- rep(df$peptidoform_id[i], length(datasets))
# split each item at the first '-' - the bit on the left is dataset ID, everything else on the right including subsequent - is Experiment Tag
dataset_ids <- sapply(datasets, function(x) strsplit(x, "-", fixed=TRUE)[[1]][1])
experiment_tags <- sapply(datasets, function(x) {
parts <- strsplit(x, "-", fixed=TRUE)[[1]]
paste(parts[-1], collapse="-")
})
temp_data <- data.frame(peptidoform_id = peptidoform_id,
Experiment_Tag = experiment_tags,
dataset_id = dataset_ids,
stringsAsFactors=FALSE)
BOI_expanded_data <- rbind(BOI_expanded_data, temp_data)
}
# Every Experiment Tag should have a match in metadata$Experiment.Tag. get the associated metadata$Instrument.Name for each
# preallocate column
BOI_expanded_data$Instrument_Name <- NA
for(i in 1:nrow(BOI_expanded_data)) {
experiment_tag <- BOI_expanded_data$Experiment_Tag[i]
matching_row <- metadata_df[metadata_df$Experiment.Tag == experiment_tag,]
if(nrow(matching_row) > 0) {
BOI_expanded_data$Instrument_Name[i] <- matching_row$Instrument.Name[1]
} else {
# match the dataset id to that of the manually annotated metadata
temp_dataset_id <- BOI_expanded_data$dataset_id[i]
manual_instrument <- manual_annotations_df[manual_annotations_df$dataset_id == temp_dataset_id, "Instrument_Name"] %>% unique()
# and assign the corresponding instrument
BOI_expanded_data$Instrument_Name[i] <- manual_instrument
}
}
return(BOI_expanded_data)
}
########## METADATA #################
# all metadata from protein atlas
metadata <- read.csv(file = paste0(data_dir, "human_phosphobuild_metadata.csv"),
header = TRUE,
)
# instrument metadata - manually collected
instrument_metadata <- read.csv(file = paste0(data_dir, "instrument_metadata.csv"),
header = TRUE,
)
metadata_for_mismatches <- read.csv(file = paste0(data_dir, "manually_annotated_exp_tags.csv"),
header = TRUE,
)
##################### BIN DATA #####################
# bin of interest
BOI <- read.csv(file = paste0(data_dir, "tyrosine_containing_foreground_inSwissProt.tsv"),
header = TRUE,
sep = "\t"
)
# one bin left
DECOY_minus1 <- read.csv(file = paste0(data_dir, "tyrosine_containing_DECOY_minus1_inSwissProt.tsv"),
header = TRUE,
sep = "\t"
)
DECOY_minus2 <- read.csv(file = paste0(data_dir, "tyrosine_containing_DECOY_minus2_inSwissProt.tsv"),
header = TRUE,
sep = "\t"
) ## not read in as no unique entries not already in decoy minus 1
# mirror bin to BOI
DECOY1 <- read.csv(file = paste0(data_dir, "tyrosine_containing_DECOY1_inSwissProt.tsv"),
header = TRUE,
sep = "\t"
)
DECOY2 <- read.csv(file = paste0(data_dir, "tyrosine_containing_DECOY2_inSwissProt.tsv"),
header = TRUE,
sep = "\t"
)
DECOY3 <- read.csv(file = paste0(data_dir, "tyrosine_containing_DECOY3_inSwissProt.tsv"),
header = TRUE,
sep = "\t"
)
all_bins_background <- read.csv(file = paste0(data_dir, "tyrosine_containing_background_inSwissProt.tsv"),
header = TRUE,
sep = "\t"
)
# apply the function to each dataset
test <- get_instruments_by_peptidoform(df = BOI,
metadata_df = metadata,
manual_annotations_df = metadata_for_mismatches)
DM1_instruments <- get_instruments_by_peptidoform(df = DECOY_minus1,
metadata_df = metadata,
manual_annotations_df = metadata_for_mismatches)
DM2_instruments <- get_instruments_by_peptidoform(df = DECOY_minus2,
metadata_df = metadata,
manual_annotations_df = metadata_for_mismatches)
D1_instruments <- get_instruments_by_peptidoform(df = DECOY1,
metadata_df = metadata,
manual_annotations_df = metadata_for_mismatches)
# apply the function to each dataset
BOI_instruments <- get_instruments_by_peptidoform(df = BOI,
metadata_df = metadata,
manual_annotations_df = metadata_for_mismatches)
DM1_instruments <- get_instruments_by_peptidoform(df = DECOY_minus1,
metadata_df = metadata,
manual_annotations_df = metadata_for_mismatches)
DM2_instruments <- get_instruments_by_peptidoform(df = DECOY_minus2,
metadata_df = metadata,
manual_annotations_df = metadata_for_mismatches)
D1_instruments <- get_instruments_by_peptidoform(df = DECOY1,
metadata_df = metadata,
manual_annotations_df = metadata_for_mismatches)
D1_instruments <- get_instruments_by_peptidoform(df = DECOY1,
metadata_df = metadata,
manual_annotations_df = metadata_for_mismatches)
D2_instruments <- get_instruments_by_peptidoform(df = DECOY2,
metadata_df = metadata,
manual_annotations_df = metadata_for_mismatches)
D3_instruments <- get_instruments_by_peptidoform(df = DECOY3,
metadata_df = metadata,
manual_annotations_df = metadata_for_mismatches)
all_data_instruments <- get_instruments_by_peptidoform(df = all_bins_background,
metadata_df = metadata,
manual_annotations_df = metadata_for_mismatches)
View(all_data_instruments)
# create a table where every row will be a bin ID
names(instrument_metadata)
# create a table where every row will be a bin ID
instrument_metadata$Instrument.Name
# instrument metadata - manually collected
instrument_metadata <- read.csv(file = paste0(data_dir, "instrument_metadata.csv"),
header = TRUE,
)
View(instrument_metadata)
# we only need the first 4 columns where I have split the instruments into groups
instrument_metadata <- instrument_metadata[,1:4]
View(instrument_metadata)
# create a table where every row will be a bin ID
instrument_metadata$Instrument.Name
# create a table where every row will be a bin ID
instrument_metadata$Instrument_Name
# create a table where every row will be a bin ID
contingency_dable <- data.frame(bin_ID = c("DM2", "DM1", "BOI", "D1", "D2", "D3", "all_bins"),
stringsAsFactors=FALSE)
View(contingency_dable)
# for every instrument name, populate the counts of the number of ties the instrument name appears in the corresponding expanded dataset Instrument_Name column (e.g. BOI_expanded_data$Instrument_Name
ls()
for (instrument_name in instrument_names) {
contingency_table[[instrument_name]] <- 0
}
for (instrument_name in instrument_metadata$Instrument_Name) {
contingency_table[[instrument_name]] <- 0
}
# create a table where every row will be a bin ID
contingency_table <- data.frame(bin_ID = c("DM2", "DM1", "BOI", "D1", "D2", "D3", "all_bins"),
stringsAsFactors=FALSE)
# create a column for every instrument name:
instrument_metadata$Instrument_Name
for (instrument_name in instrument_metadata$Instrument_Name) {
contingency_table[[instrument_name]] <- 0
}
View(contingency_table)
# Assuming you have expanded data for each bin (e.g., BOI_expanded_data)
# and a bin name list to iterate over
bin_names <- c("DM2", "DM1", "BOI", "D1", "D2", "D3", "all_bins")
# Populate counts for each bin (you'll need to adjust this part to match your data structure)
for (bin_name in bin_names) {
bin_expanded_data <- get_expanded_data_for_bin(bin_name) # You'll need to implement this part
populate_counts_for_bin(bin_expanded_data, contingency_table, bin_name)
}
#### counting n times an instrument has contirbutedto the data in a bin
# Example function to populate counts for a specific bin
populate_counts_for_bin <- function(bin_expanded_data, contingency_table, bin_name) {
for (instrument_name in instrument_names) {
# Count occurrences of each instrument in the bin's expanded data
count <- sum(bin_expanded_data$Instrument_Name == instrument_name)
# Populate the corresponding cell in the contingency table
contingency_table[contingency_table$bin_ID == bin_name, instrument_name] <- count
}
}
instrument_data_list <- list(
DM2 = DM2_instruments,
DM1 = DM1_instruments,
BOI = BOI_instruments,
D1 = D1_instruments,
D2 = D2_instruments,
D3 = D3_instruments,
all_bins = all_data_instruments
)
for (instrument_name in instrument_metadata$Instrument_Name) {
contingency_table[[instrument_name]] <- 0
}
View(contingency_table)
names(instrument_data_list)
# for every bin, populate counts
for (bin_name in names(instrument_data_list)) {
populate_counts_for_bin(instrument_data_list[[bin_name]], contingency_table, bin_name)
}
print(bin_name)
# for every bin, populate counts
for (bin_name in names(instrument_data_list)) {
# get all instrument data
instrument_data <- instrument_data_list[[bin_name]]
#for every instrument
for (instrument_name in instrument_metadata$Instrument_Name) {
# count the number of times an instrument name appears
instrument_count <- sum(instrument_data$Instrument_Name == instrument_name)
contingency_table[contingency_table$bin_ID == bin_name, instrument_name] <- instrument_count
}
}
View(contingency_table)
all_bins_background <- unique(all_bins_background)
all_bins_background <- read.csv(file = paste0(data_dir, "tyrosine_containing_background_inSwissProt.tsv"),
header = TRUE,
sep = "\t"
)
all_bins_background <- unique(all_bins_background)
peptidoforms <- all_bins_background$peptidoform_id
length(unique(peptidoforms))
View(contingency_table)
