sep = "\t"
)
########## METADATA #################
# all metadata from protein atlas
metadata <- read.csv(file = paste0(data_dir, "human_phosphobuild_metadata.csv"),
header = TRUE,
)
# instrument metadata - manually collected
instrument_metadata <- read.csv(file = paste0(data_dir, "instrument_metadata.csv"),
header = TRUE,
)
##################### BIN DATA #####################
# bin of interest
BOI <- read.csv(file = paste0(data_dir, "tyrosine_containing_foreground_inSwissProt.tsv"),
header = TRUE,
sep = "\t"
)
# one bin left
DECOY_minus1 <- read.csv(file = paste0(data_dir, "tyrosine_containing_DECOY_minus1_inSwissProt.tsv"),
header = TRUE,
sep = "\t"
)
DECOY_minus2 <- read.csv(file = paste0(data_dir, "tyrosine_containing_DECOY_minus2_inSwissProt.tsv"),
header = TRUE,
sep = "\t"
) ## not read in as no unique entries not already in decoy minus 1
# mirror bin to BOI
DECOY1 <- read.csv(file = paste0(data_dir, "tyrosine_containing_DECOY1_inSwissProt.tsv"),
header = TRUE,
sep = "\t"
)
DECOY2 <- read.csv(file = paste0(data_dir, "tyrosine_containing_DECOY2_inSwissProt.tsv"),
header = TRUE,
sep = "\t"
)
DECOY3 <- read.csv(file = paste0(data_dir, "tyrosine_containing_DECOY3_inSwissProt.tsv"),
header = TRUE,
sep = "\t"
)
all_bins_background <- read.csv(file = paste0(data_dir, "tyrosine_containing_background_inSwissProt.tsv"),
header = TRUE,
sep = "\t"
)
# we have a number of dataset per peptidoform ID
BOI_datasets<- bin_of_interest$dataset_ID
BOI_datasets[1]
View(metadata)
View(instrument_metadata)
View(metadata)
# apply to every row a function that splits the string into a list of datasets; separator is ', '
BOI_datasets_split <- strsplit(as.character(bin_of_interest$dataset_ID), ", ")
# initialise empty df to store additional data data wiht peptidoform granularity
expanded_data <- data.frame(Peptidoform_ID=character(), Experiment_Tag=character(), stringsAsFactors=FALSE)
for(i in seq_along(BOI_datasets_split)) {
datasets <- BOI_datasets_split[[i]]
peptidoform_ID <- rep(bin_of_interest$Peptidoform_ID[i], length(datasets))
# split each item at the first '-' - the bit on the left is dataset ID, the bit on the right is Experiment_Tag
experiment_tags <- sapply(datasets, function(x) strsplit(x, "-")[[1]][1])
temp_data <- data.frame(Peptidoform_ID=peptidoform_ID, Experiment_Tag=experiment_tags, stringsAsFactors=FALSE)
expanded_data <- rbind(expanded_data, temp_data)
}
BOI_datasets_split
# apply to every row a function that splits the string into a list of datasets; separator is ', '
BOI_datasets_split[[1]] <- strsplit(as.character(bin_of_interest$dataset_ID), ", ")
# apply to every row a function that splits the string into a list of datasets; separator is ', '
BOI_datasets_split <- strsplit(as.character(bin_of_interest$dataset_ID), ", ")
BOI_datasets_split[[1]]
datasets <- BOI_datasets_split[[1]]
peptidoform_ID <- rep(bin_of_interest$Peptidoform_ID[1], length(datasets))
peptidoform_ID
View(bin_of_interest)
for(i in seq_along(BOI_datasets_split)) {
datasets <- BOI_datasets_split[[i]]
peptidoform_ID <- rep(BOI$peptidoform_id[i], length(datasets))
# split each item at the first '-' - the bit on the left is dataset ID, the bit on the right is Experiment_Tag
experiment_tags <- sapply(datasets, function(x) strsplit(x, "-")[[1]][1])
temp_data <- data.frame(Peptidoform_ID=peptidoform_ID, Experiment_Tag=experiment_tags, stringsAsFactors=FALSE)
expanded_data <- rbind(expanded_data, temp_data)
}
View(expanded_data)
# Add a column for Instrument Name by matching Experiment Tag with metadata
expanded_data$Instrument_Name <- NA  # Initialize the column
for(i in 1:nrow(expanded_data)) {
experiment_tag <- expanded_data$Experiment_Tag[i]
matching_row <- metadata[metadata$Experiment.Tag == experiment_tag,]
if(nrow(matching_row) > 0) {
expanded_data$Instrument_Name[i] <- matching_row$Instrument.Name[1]
}
}
View(expanded_data)
View(expanded_data)
# initialise empty df to store additional data data wiht peptidoform granularity
expanded_data <- data.frame(Peptidoform_ID=character(), Experiment_Tag=character(), stringsAsFactors=FALSE)
for(i in seq_along(BOI_datasets_split)) {
datasets <- BOI_datasets_split[[i]]
peptidoform_ID <- rep(BOI$peptidoform_id[i], length(datasets))
# split each item at the first '-' - the bit on the left is dataset ID, the bit on the right is Experiment_Tag
experiment_tags <- sapply(datasets, function(x) strsplit(x, "-")[[1]][2])
temp_data <- data.frame(Peptidoform_ID=peptidoform_ID, Experiment_Tag=experiment_tags, stringsAsFactors=FALSE)
expanded_data <- rbind(expanded_data, temp_data)
}
View(expanded_data)
BOI_datasets_split[[1]]
library(tidyverse)
library(stringr)
library(dplyr)
# library(clusterProfiler)
# library(org.Hs.eg.db)
# library(biomaRt)
# library(devtools)
# # BiocManager::install("enrichplot")
# library(enrichplot)
# library(BiocFileCache)
# library(dbplyr)
# need to downgrade devtools for biomart to work #stackoverflow
# devtools::install_version("dbplyr", version = "2.3.4")
project_dir = "C:/Users/jtzve/Desktop/Sufo_Tyrosine/08_instrument_enrichment//"
data_dir <- "C:/Users/jtzve/Desktop/Sufo_Tyrosine/08_instrument_enrichment/in/"
gc()
########## METADATA #################
# all metadata from protein atlas
metadata <- read.csv(file = paste0(data_dir, "human_phosphobuild_metadata.csv"),
header = TRUE,
)
# instrument metadata - manually collected
instrument_metadata <- read.csv(file = paste0(data_dir, "instrument_metadata.csv"),
header = TRUE,
)
##################### BIN DATA #####################
# bin of interest
BOI <- read.csv(file = paste0(data_dir, "tyrosine_containing_foreground_inSwissProt.tsv"),
header = TRUE,
sep = "\t"
)
# one bin left
DECOY_minus1 <- read.csv(file = paste0(data_dir, "tyrosine_containing_DECOY_minus1_inSwissProt.tsv"),
header = TRUE,
sep = "\t"
)
DECOY_minus2 <- read.csv(file = paste0(data_dir, "tyrosine_containing_DECOY_minus2_inSwissProt.tsv"),
header = TRUE,
sep = "\t"
) ## not read in as no unique entries not already in decoy minus 1
# mirror bin to BOI
DECOY1 <- read.csv(file = paste0(data_dir, "tyrosine_containing_DECOY1_inSwissProt.tsv"),
header = TRUE,
sep = "\t"
)
DECOY2 <- read.csv(file = paste0(data_dir, "tyrosine_containing_DECOY2_inSwissProt.tsv"),
header = TRUE,
sep = "\t"
)
DECOY3 <- read.csv(file = paste0(data_dir, "tyrosine_containing_DECOY3_inSwissProt.tsv"),
header = TRUE,
sep = "\t"
)
all_bins_background <- read.csv(file = paste0(data_dir, "tyrosine_containing_background_inSwissProt.tsv"),
header = TRUE,
sep = "\t"
)
# we have a number of datasets per peptidoform ID;
# we might need the peptidoform ID granularity in the future
BOI_datasets <- bin_of_interest$dataset_ID
# we have a number of datasets per peptidoform ID;
# we might need the peptidoform ID granularity in the future
BOI_datasets <- BOI$dataset_ID
# apply to every row a function that splits the string into a list of datasets; separator is ', '
BOI_datasets_split <- strsplit(as.character(bin_of_interest$dataset_ID), ", ")
# apply to every row a function that splits the string into a list of datasets; separator is ', '
BOI_datasets_split <- strsplit(as.character(BOI_datasets), ", ")
BOI_datasets_split[[1]]
metadata[metadata$Dataset == "PXD005336",]
metadata[metadata$Dataset == "PXD005336",]
metadata[metadata$Dataset == "PXD005336", c(1,2,3,22)]
metadata[metadata$Dataset == "PXD005336", c("Dataset","Experiment.Tag","Instrument.Name")]
metadata[metadata$Dataset == "PXD005336", c("Dataset","Experiment.Tag","Instrument.Name")]
# initialise empty df to store additional data data wiht peptidoform granularity
expanded_data <- data.frame(peptidoform_iD = character(),
Experiment_Tag = character(),
instruments = character(),
stringsAsFactors=FALSE)
View(metadata)
# get the vector of dataset_experiemtnalTags
datasets <- BOI_datasets_split[[1]]
# populate the peptidoform id column
peptidoform_id <- rep(BOI$peptidoform_id[1], length(datasets))
# split each item at the first '-' - the bit on the left is dataset ID, everything else on the right including subsequent - is Experiment Tag
dataset_id <-
experiment_tags <- sapply(datasets, function(xsapply(datasets, function(x) strsplit(x, "-")[[1]][1])) strsplit(x, "-")[[1]][2])
# split each item at the first '-' - the bit on the left is dataset ID, everything else on the right including subsequent - is Experiment Tag
dataset_id <-
experiment_tags <- sapply(datasets, function(sapply(datasets, function(x) strsplit(x, "-")[[1]][1])) strsplit(x, "-")[[1]][2])
experiment_tags <- sapply(datasets, function(sapply(datasets, function(x) strsplit(x, "-")[[1]][1]))
sapply(datasets, function(x) strsplit(x, "-")[[1]][1])
# split each item at the first '-' - the bit on the left is dataset ID, everything else on the right including subsequent - is Experiment Tag
dataset_ids <- sapply(datasets, function(x) strsplit(x, "-")[[1]][1])
# initialise empty df to store additional data data wiht peptidoform granularity
expanded_data <- data.frame(peptidoform_id = character(),
Experiment_Tag = character(),
dataset_id = character(),
stringsAsFactors=FALSE)
# get the vector of dataset_experiemtnalTags
datasets <- BOI_datasets_split[[1]]
# populate the peptidoform id column
peptidoform_id <- rep(BOI$peptidoform_id[1], length(datasets))
# split each item at the first '-' - the bit on the left is dataset ID, everything else on the right including subsequent - is Experiment Tag
dataset_ids <- sapply(datasets, function(x) strsplit(x, "-")[[1]][1])
experiment_tags <-
data.frame(peptidoform_id = peptidoform_id,
Experiment_Tag = experiment_tags,
dataset_id = dataset_ids,
stringsAsFactors=FALSE)
# split each item at the first '-' - the bit on the left is dataset ID, everything else on the right including subsequent - is Experiment Tag
dataset_ids <- sapply(datasets, function(x) strsplit(x, "-", fixed=TRUE)[[1]][1])
experiment_tags <- sapply(datasets, function(x) {
parts <- strsplit(x, "-", fixed=TRUE)[[1]]
paste(parts[-1], collapse="-")
})
data.frame(peptidoform_id = peptidoform_id,
Experiment_Tag = experiment_tags,
dataset_id = dataset_ids,
stringsAsFactors=FALSE)
temp_data <- data.frame(peptidoform_id = peptidoform_id,
Experiment_Tag = experiment_tags,
dataset_id = dataset_ids,
stringsAsFactors=FALSE)
expanded_data <- rbind(expanded_data, temp_data)
# initialise empty df to store additional data data wiht peptidoform granularity
expanded_data <- data.frame(peptidoform_id = character(),
Experiment_Tag = character(),
dataset_id = character(),
stringsAsFactors=FALSE)
expanded_data <- rbind(expanded_data, temp_data)
View(expanded_data)
# initialise empty df to store additional data data wiht peptidoform granularity
expanded_data <- data.frame(peptidoform_id = character(),
Experiment_Tag = character(),
dataset_id = character(),
stringsAsFactors=FALSE)
# lets look at every datasetID_experimentTag in our BOI data for each peptidoform
for(i in seq_along(BOI_datasets_split)) {
# get the vector of dataset_experiemtnalTags
datasets <- BOI_datasets_split[[i]]
# populate the peptidoform id column
peptidoform_id <- rep(BOI$peptidoform_id[i], length(datasets))
# split each item at the first '-' - the bit on the left is dataset ID, everything else on the right including subsequent - is Experiment Tag
dataset_ids <- sapply(datasets, function(x) strsplit(x, "-", fixed=TRUE)[[1]][1])
experiment_tags <- sapply(datasets, function(x) {
parts <- strsplit(x, "-", fixed=TRUE)[[1]]
paste(parts[-1], collapse="-")
})
temp_data <- data.frame(peptidoform_id = peptidoform_id,
Experiment_Tag = experiment_tags,
dataset_id = dataset_ids,
stringsAsFactors=FALSE)
expanded_data <- rbind(expanded_data, temp_data)
}
View(expanded_data)
# initialise empty df to store additional data data wiht peptidoform granularity
BOI_expanded_data <- data.frame(peptidoform_id = character(),
Experiment_Tag = character(),
dataset_id = character(),
stringsAsFactors=FALSE)
# lets look at every datasetID_experimentTag in our BOI data for each peptidoform
for(i in seq_along(BOI_datasets_split)) {
# get the vector of dataset_experiemtnalTags
datasets <- BOI_datasets_split[[i]]
# populate the peptidoform id column
peptidoform_id <- rep(BOI$peptidoform_id[i], length(datasets))
# split each item at the first '-' - the bit on the left is dataset ID, everything else on the right including subsequent - is Experiment Tag
dataset_ids <- sapply(datasets, function(x) strsplit(x, "-", fixed=TRUE)[[1]][1])
experiment_tags <- sapply(datasets, function(x) {
parts <- strsplit(x, "-", fixed=TRUE)[[1]]
paste(parts[-1], collapse="-")
})
temp_data <- data.frame(peptidoform_id = peptidoform_id,
Experiment_Tag = experiment_tags,
dataset_id = dataset_ids,
stringsAsFactors=FALSE)
expanded_data <- rbind(expanded_data, temp_data)
}
# Every Experiment Tag should have a match in metadata$Experiment.Tag. get the associated metadata$Instrument.Name for each
# preallocate column
expanded_data$Instrument_Name <- NA
for(i in 1:nrow(expanded_data)) {
experiment_tag <- expanded_data$Experiment_Tag[i]
matching_row <- metadata[metadata$Experiment.Tag == experiment_tag,]
if(nrow(matching_row) > 0) {
expanded_data$Instrument_Name[i] <- matching_row$Instrument.Name[1]
}
}
View(expanded_data)
# Every Experiment Tag should have a match in metadata$Experiment.Tag. get the associated metadata$Instrument.Name for each
# preallocate column
BOI_expanded_data$Instrument_Name <- NA
for(i in 1:nrow(BOI_expanded_data)) {
experiment_tag <- BOI_expanded_data$Experiment_Tag[i]
matching_row <- metadata[metadata$Experiment.Tag == experiment_tag,]
if(nrow(matching_row) > 0) {
BOI_expanded_data$Instrument_Name[i] <- matching_row$Instrument.Name[1]
}
}
# Every Experiment Tag should have a match in metadata$Experiment.Tag. get the associated metadata$Instrument.Name for each
# preallocate column
BOI_expanded_data$Instrument_Name <- NA
# initialise empty df to store additional data data wiht peptidoform granularity
BOI_expanded_data <- data.frame(peptidoform_id = character(),
Experiment_Tag = character(),
dataset_id = character(),
stringsAsFactors=FALSE)
# lets look at every datasetID_experimentTag in our BOI data for each peptidoform
for(i in seq_along(BOI_datasets_split)) {
# get the vector of dataset_experiemtnalTags
datasets <- BOI_datasets_split[[i]]
# populate the peptidoform id column
peptidoform_id <- rep(BOI$peptidoform_id[i], length(datasets))
# split each item at the first '-' - the bit on the left is dataset ID, everything else on the right including subsequent - is Experiment Tag
dataset_ids <- sapply(datasets, function(x) strsplit(x, "-", fixed=TRUE)[[1]][1])
experiment_tags <- sapply(datasets, function(x) {
parts <- strsplit(x, "-", fixed=TRUE)[[1]]
paste(parts[-1], collapse="-")
})
temp_data <- data.frame(peptidoform_id = peptidoform_id,
Experiment_Tag = experiment_tags,
dataset_id = dataset_ids,
stringsAsFactors=FALSE)
BOI_expanded_data <- rbind(expanded_data, temp_data)
}
# initialise empty df to store additional data data wiht peptidoform granularity
BOI_expanded_data <- data.frame(peptidoform_id = character(),
Experiment_Tag = character(),
dataset_id = character(),
stringsAsFactors=FALSE)
# lets look at every datasetID_experimentTag in our BOI data for each peptidoform
for(i in seq_along(BOI_datasets_split)) {
# get the vector of dataset_experiemtnalTags
datasets <- BOI_datasets_split[[i]]
# populate the peptidoform id column
peptidoform_id <- rep(BOI$peptidoform_id[i], length(datasets))
# split each item at the first '-' - the bit on the left is dataset ID, everything else on the right including subsequent - is Experiment Tag
dataset_ids <- sapply(datasets, function(x) strsplit(x, "-", fixed=TRUE)[[1]][1])
experiment_tags <- sapply(datasets, function(x) {
parts <- strsplit(x, "-", fixed=TRUE)[[1]]
paste(parts[-1], collapse="-")
})
temp_data <- data.frame(peptidoform_id = peptidoform_id,
Experiment_Tag = experiment_tags,
dataset_id = dataset_ids,
stringsAsFactors=FALSE)
BOI_expanded_data <- rbind(BOI_expanded_data, temp_data)
}
# Every Experiment Tag should have a match in metadata$Experiment.Tag. get the associated metadata$Instrument.Name for each
# preallocate column
BOI_expanded_data$Instrument_Name <- NA
for(i in 1:nrow(BOI_expanded_data)) {
experiment_tag <- BOI_expanded_data$Experiment_Tag[i]
matching_row <- metadata[metadata$Experiment.Tag == experiment_tag,]
if(nrow(matching_row) > 0) {
BOI_expanded_data$Instrument_Name[i] <- matching_row$Instrument.Name[1]
}
}
View(BOI_expanded_data)
# save the data and manually deal with NAs.
write.csv(BOI_expanded_data, file = "../out/BOI_instruments_by_peptidoform.csv", row.names = TRUE)
# get the vector of dataset_experiemtnalTags
i=33
datasets <- BOI_datasets_split[[i]]
datasets
# get the vector of dataset_experiemtnalTags
i=32
datasets <- BOI_datasets_split[[i]]
datasets
# get the vector of dataset_experiemtnalTags
i=375
datasets <- BOI_datasets_split[[i]]
# get the vector of dataset_experiemtnalTags
i=31
datasets <- BOI_datasets_split[[i]]
datasets
# we have a number of datasets per peptidoform ID;
# we might need the peptidoform ID granularity in the future
BOI_datasets <- all_bins_background$dataset_ID
# apply to every row a function that splits the string into a list of datasets; separator is ', '
BOI_datasets_split <- strsplit(as.character(BOI_datasets), ", ")
# initialise empty df to store additional data data wiht peptidoform granularity
BOI_expanded_data <- data.frame(peptidoform_id = character(),
Experiment_Tag = character(),
dataset_id = character(),
stringsAsFactors=FALSE)
# lets look at every datasetID_experimentTag in our BOI data for each peptidoform
for(i in seq_along(BOI_datasets_split)) {
# get the vector of dataset_experiemtnalTags
i=31
datasets <- BOI_datasets_split[[i]]
# populate the peptidoform id column
peptidoform_id <- rep(BOI$peptidoform_id[i], length(datasets))
# split each item at the first '-' - the bit on the left is dataset ID, everything else on the right including subsequent - is Experiment Tag
dataset_ids <- sapply(datasets, function(x) strsplit(x, "-", fixed=TRUE)[[1]][1])
experiment_tags <- sapply(datasets, function(x) {
parts <- strsplit(x, "-", fixed=TRUE)[[1]]
paste(parts[-1], collapse="-")
})
temp_data <- data.frame(peptidoform_id = peptidoform_id,
Experiment_Tag = experiment_tags,
dataset_id = dataset_ids,
stringsAsFactors=FALSE)
BOI_expanded_data <- rbind(BOI_expanded_data, temp_data)
}
# we have a number of datasets per peptidoform ID;
# we might need the peptidoform ID granularity in the future
BOI_datasets <- unique(BOI$dataset_ID)
# we have a number of datasets per peptidoform ID;
# we might need the peptidoform ID granularity in the future
BOI_datasets <- unique(all_bins_background$dataset_ID)
# apply to every row a function that splits the string into a list of datasets; separator is ', '
BOI_datasets_split <- strsplit(as.character(BOI_datasets), ", ")
# initialise empty df to store additional data data wiht peptidoform granularity
BOI_expanded_data <- data.frame(peptidoform_id = character(),
Experiment_Tag = character(),
dataset_id = character(),
stringsAsFactors=FALSE)
# lets look at every datasetID_experimentTag in our BOI data for each peptidoform
for(i in seq_along(BOI_datasets_split)) {
# get the vector of dataset_experiemtnalTags
i=31
datasets <- BOI_datasets_split[[i]]
# populate the peptidoform id column
peptidoform_id <- rep(BOI$peptidoform_id[i], length(datasets))
# split each item at the first '-' - the bit on the left is dataset ID, everything else on the right including subsequent - is Experiment Tag
dataset_ids <- sapply(datasets, function(x) strsplit(x, "-", fixed=TRUE)[[1]][1])
experiment_tags <- sapply(datasets, function(x) {
parts <- strsplit(x, "-", fixed=TRUE)[[1]]
paste(parts[-1], collapse="-")
})
temp_data <- data.frame(peptidoform_id = peptidoform_id,
Experiment_Tag = experiment_tags,
dataset_id = dataset_ids,
stringsAsFactors=FALSE)
BOI_expanded_data <- rbind(BOI_expanded_data, temp_data)
}
# initialise empty df to store additional data data wiht peptidoform granularity
BOI_expanded_data <- data.frame(peptidoform_id = character(),
Experiment_Tag = character(),
dataset_id = character(),
stringsAsFactors=FALSE)
# lets look at every datasetID_experimentTag in our BOI data for each peptidoform
for(i in seq_along(BOI_datasets_split)) {
# get the vector of dataset_experiemtnalTags
datasets <- BOI_datasets_split[[i]]
# populate the peptidoform id column
peptidoform_id <- rep(BOI$peptidoform_id[i], length(datasets))
# split each item at the first '-' - the bit on the left is dataset ID, everything else on the right including subsequent - is Experiment Tag
dataset_ids <- sapply(datasets, function(x) strsplit(x, "-", fixed=TRUE)[[1]][1])
experiment_tags <- sapply(datasets, function(x) {
parts <- strsplit(x, "-", fixed=TRUE)[[1]]
paste(parts[-1], collapse="-")
})
temp_data <- data.frame(peptidoform_id = peptidoform_id,
Experiment_Tag = experiment_tags,
dataset_id = dataset_ids,
stringsAsFactors=FALSE)
BOI_expanded_data <- rbind(BOI_expanded_data, temp_data)
}
data_dir <- "C:/Users/jtzve/Desktop/Sufo_Tyrosine/08_instrument_enrichment/in/"
all_bins_background <- read.csv(file = paste0(data_dir, "tyrosine_containing_background_inSwissProt.tsv"),
header = TRUE,
sep = "\t"
)
dataset_combos <- all_bins_background$dataset_ID
dataset_combos <- all_bins_background$dataset_ID %>% unique()
# split at , and merge into a large list, but keep only unique records
all_datasets_split <- unique(unlist(strsplit(as.character(all_bins_background$dataset_ID), ", ")))
expanded_data <- data.frame(Experiment_Tag = character(),
dataset_id = character(),
stringsAsFactors=FALSE)
# for each tag try to match it to the metadata
for(i in seq_along(all_datasets_split)) {
# get the vector of dataset_experiemtnalTags
datasets <- all_datasets_split[[i]]
# populate the peptidoform id column
# peptidoform_id <- rep(BOI$peptidoform_id[i], length(datasets))
# split each item at the first '-' - the bit on the left is dataset ID, everything else on the right including subsequent - is Experiment Tag
dataset_ids <- sapply(datasets, function(x) strsplit(x, "-", fixed=TRUE)[[1]][1])
experiment_tags <- sapply(datasets, function(x) {
parts <- strsplit(x, "-", fixed=TRUE)[[1]]
paste(parts[-1], collapse="-")
})
temp_data <- data.frame(
Experiment_Tag = experiment_tags,
dataset_id = dataset_ids,
stringsAsFactors=FALSE)
expanded_data <- rbind(expanded_data, temp_data)
}
# set instrument name to NA
expanded_data$Instrument_Name <- NA
# set instrument name to NA
expanded_data$Instrument_Name <- NA
# try match the experiment tag and replace the NA where there is a match
for(i in 1:nrow(expanded_data)) {
experiment_tag <- expanded_data$Experiment_Tag[i]
matching_row <- metadata[metadata$Experiment.Tag == experiment_tag,]
if(nrow(matching_row) > 0) {
expanded_data$Instrument_Name[i] <- matching_row$Instrument.Name[1]
}
}
mismatched_datasets <- expanded_data[expanded_data$Instrument_Name == NA,]
View(mismatched_datasets)
View(expanded_data)
mismatched_datasets <- expanded_data[is.na(expanded_data$Instrument_Name),]
View(mismatched_datasets)
# save the data and manually deal with NAs.
write.csv(mismatched_datasets, file = "../out/mismatched_datasets_for_manual_annotation.csv", row.names = TRUE)
