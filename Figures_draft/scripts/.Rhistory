files_list <- list()
for (i in (length(files_of_interst))) {
files_list[i] <- read.csv(files_of_interst[i])
}
View(files_list)
for (i in (length(files_of_interst))) {
files_list[i] <- read.csv(files_of_interst[i])
}
files_of_interst
files_list <- list()
for (i in (length(files_of_interst))) {
files_list[i] <- read.csv(files_of_interst[i])
}
test<- read.csv(files_of_interst[1])
files_list <- list()
for (i in (length(files_of_interst))) {
files_list[[i]] <- read.csv(files_of_interst[1])
}
View(files_list)
for (i in (1: length(files_of_interst))) {
files_list[[i]] <- read.csv(files_of_interst[1])
}
View(files_list)
files_list <- list()
for (i in (1: length(files_of_interst))) {
files_list[[i]] <- read.csv(files_of_interst[i])
}
View(files_list)
generate_USI <- function(df) {
# Pre-allocate the USI column to speed up the process
df$USI <- NA
for (i in 1:nrow(df)) {
# Extract necessary components for each row
current_dataset <- sub("([^-]*)(-.*)?", "\\1", df$dataset_ID[i])
msRun <- gsub("^(.*?)\\..*$", "\\1", df$spectrum[i])
scan_number <- gsub("^[^.]*\\.([^.]+)\\..*$", "\\1", df$spectrum[i])
spectrum_interpretation <- paste(df$peptide[i], "/", df$z[i], sep = "")
# Generate USI
df$USI[i] <- paste("mzspec", current_dataset, msRun, "scan", scan_number, spectrum_interpretation, sep = ":")
}
# Create a new column with the modified USI values
df$USI_workaround <- gsub("CPTAC_S0", "PXD9999", df$USI)
return(df)
}
files_with_USIs_list <- list()
generate_USI <- function(df) {
# Pre-allocate the USI column to speed up the process
df$USI <- NA
for (i in 1:nrow(df)) {
# Extract necessary components for each row
current_dataset <- sub("([^-]*)(-.*)?", "\\1", df$dataset_ID[i])
msRun <- gsub("^(.*?)\\..*$", "\\1", df$spectrum[i])
scan_number <- gsub("^[^.]*\\.([^.]+)\\..*$", "\\1", df$spectrum[i])
spectrum_interpretation <- paste(df$peptide[i], "/", df$z[i], sep = "")
# Generate USI
df$USI[i] <- paste("mzspec", current_dataset, msRun, "scan", scan_number, spectrum_interpretation, sep = ":")
}
# Create a new column with the modified USI values
df$USI_workaround <- gsub("CPTAC_S0", "PXD9999", df$USI)
filename <- unique(df$peptidoform_id)
write.csv(file = paste0("../out/added_USIs_to", filename, ".csv"), x = df)
return(df)
}
files_with_USIs_list <- list()
for (i in (1: length(files_of_interst))) {
files_with_USIs_list[[i]] <- generate_USI(files_list[[i]])
}
View(bin_proportions_df)
View(results)
# start PDF device
pdf("../out/BarPlots_byBin_30pc_individual_final_version_for_manuscript_BLANK_LABELS.pdf", width = 11, height = 8.5)
# loop through each column to create and save the plot
for (col in columns_to_plot) {
p <- ggplot(results, aes(x = reorder(bin_ID, lower_boundary), y = get(col))) +
geom_bar(stat = "identity", aes(fill = highlight)) +
scale_fill_manual(values = color_blind_friendly_colors) +
geom_text(aes(label = get(col), color = highlight), vjust = -0.5, size = 5, fontface = "bold") +
scale_color_manual(values = color_blind_friendly_colors) +
theme_minimal() +
labs(x = "Bin ID", y = col, title = paste(col, "by Bin")) +
theme(
axis.text.x = element_blank(),
# axis.ticks.x = element_line(size = 0.5),
axis.ticks.x = element_blank(),
plot.title = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_text(angle = 0, hjust = 1, size = 24),
axis.ticks.y = element_blank(),
axis.ticks.length = unit(0.5, "cm"),
legend.position = "none"
) +
guides(fill = guide_legend(title = "Category"), color = FALSE)
print(p) # Print the plot to the PDF device
}
# Close the PDF device
dev.off()
getwd()
# start PDF device
pdf("../out/BarPlots_byBin_30pc_individual_final_version_for_manuscript_BLANK_LABELS.pdf", width = 11, height = 8.5)
# loop through each column to create and save the plot
for (col in columns_to_plot) {
p <- ggplot(results, aes(x = reorder(bin_ID, lower_boundary), y = get(col))) +
geom_bar(stat = "identity", aes(fill = highlight)) +
scale_fill_manual(values = color_blind_friendly_colors) +
geom_text(aes(label = get(col), color = highlight), vjust = -0.5, size = 5, fontface = "bold", angle = 90)+
scale_color_manual(values = color_blind_friendly_colors) +
theme_minimal() +
labs(x = "Bin ID", y = col, title = paste(col, "by Bin")) +
theme(
axis.text.x = element_blank(),
# axis.ticks.x = element_line(size = 0.5),
axis.ticks.x = element_blank(),
plot.title = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_text(angle = 0, hjust = 1, size = 24),
axis.ticks.y = element_blank(),
axis.ticks.length = unit(0.5, "cm"),
legend.position = "none"
) +
guides(fill = guide_legend(title = "Category"), color = FALSE)
print(p) # Print the plot to the PDF device
}
# Close the PDF device
dev.off()
# start PDF device
pdf("../out/BarPlots_byBin_30pc_individual_final_version_for_manuscript_BLANK_LABELS.pdf", width = 11, height = 8.5)
# loop through each column to create and save the plot
for (col in columns_to_plot) {
p <- ggplot(results, aes(x = reorder(bin_ID, lower_boundary), y = get(col))) +
geom_bar(stat = "identity", aes(fill = highlight)) +
scale_fill_manual(values = color_blind_friendly_colors) +
geom_text(aes(label = get(col), color = highlight), vjust = -0.5,
size = 5, fontface = "bold", angle = 90, nudge_y = 0.5)+
scale_color_manual(values = color_blind_friendly_colors) +
theme_minimal() +
labs(x = "Bin ID", y = col, title = paste(col, "by Bin")) +
theme(
axis.text.x = element_blank(),
# axis.ticks.x = element_line(size = 0.5),
axis.ticks.x = element_blank(),
plot.title = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_text(angle = 0, hjust = 1, size = 24),
axis.ticks.y = element_blank(),
axis.ticks.length = unit(0.5, "cm"),
legend.position = "none"
) +
guides(fill = guide_legend(title = "Category"), color = FALSE)
print(p) # Print the plot to the PDF device
}
# Close the PDF device
dev.off()
# start PDF device
pdf("../out/BarPlots_byBin_30pc_individual_final_version_for_manuscript_BLANK_LABELS.pdf", width = 11, height = 8.5)
# loop through each column to create and save the plot
for (col in columns_to_plot) {
p <- ggplot(results, aes(x = reorder(bin_ID, lower_boundary), y = get(col))) +
geom_bar(stat = "identity", aes(fill = highlight)) +
scale_fill_manual(values = color_blind_friendly_colors) +
geom_text(aes(label = get(col), color = highlight), vjust = -0.5,
size = 5, fontface = "bold", angle = 90, nudge_y = 0.1)+
scale_color_manual(values = color_blind_friendly_colors) +
theme_minimal() +
labs(x = "Bin ID", y = col, title = paste(col, "by Bin")) +
theme(
axis.text.x = element_blank(),
# axis.ticks.x = element_line(size = 0.5),
axis.ticks.x = element_blank(),
plot.title = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_text(angle = 0, hjust = 1, size = 24),
axis.ticks.y = element_blank(),
axis.ticks.length = unit(0.5, "cm"),
legend.position = "none"
) +
guides(fill = guide_legend(title = "Category"), color = FALSE)
print(p) # Print the plot to the PDF device
}
# Close the PDF device
dev.off()
# start PDF device
pdf("../out/BarPlots_byBin_30pc_individual_final_version_for_manuscript_BLANK_LABELS.pdf", width = 11, height = 8.5)
# loop through each column to create and save the plot
for (col in columns_to_plot) {
p <- ggplot(results, aes(x = reorder(bin_ID, lower_boundary), y = get(col))) +
geom_bar(stat = "identity", aes(fill = highlight)) +
scale_fill_manual(values = color_blind_friendly_colors) +
geom_text(aes(label = get(col), color = highlight), vjust = 0,
size = 5, fontface = "bold", angle = 90, nudge_y = 0.01)+
scale_color_manual(values = color_blind_friendly_colors) +
theme_minimal() +
labs(x = "Bin ID", y = col, title = paste(col, "by Bin")) +
theme(
axis.text.x = element_blank(),
# axis.ticks.x = element_line(size = 0.5),
axis.ticks.x = element_blank(),
plot.title = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_text(angle = 0, hjust = 1, size = 24),
axis.ticks.y = element_blank(),
axis.ticks.length = unit(0.5, "cm"),
legend.position = "none"
) +
guides(fill = guide_legend(title = "Category"), color = FALSE)
print(p) # Print the plot to the PDF device
}
# Close the PDF device
dev.off()
# start PDF device
pdf("../out/BarPlots_byBin_30pc_individual_final_version_for_manuscript_BLANK_LABELS.pdf", width = 11, height = 8.5)
# loop through each column to create and save the plot
for (col in columns_to_plot) {
p <- ggplot(results, aes(x = reorder(bin_ID, lower_boundary), y = get(col))) +
geom_bar(stat = "identity", aes(fill = highlight)) +
scale_fill_manual(values = color_blind_friendly_colors) +
geom_text(aes(label = get(col), color = highlight), vjust = 0,
size = 5, fontface = "bold", angle = 90, nudge_y = 0.03)+
scale_color_manual(values = color_blind_friendly_colors) +
theme_minimal() +
labs(x = "Bin ID", y = col, title = paste(col, "by Bin")) +
theme(
axis.text.x = element_blank(),
# axis.ticks.x = element_line(size = 0.5),
axis.ticks.x = element_blank(),
plot.title = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_text(angle = 0, hjust = 1, size = 24),
axis.ticks.y = element_blank(),
axis.ticks.length = unit(0.5, "cm"),
legend.position = "none"
) +
guides(fill = guide_legend(title = "Category"), color = FALSE)
print(p) # Print the plot to the PDF device
}
# Close the PDF device
dev.off()
columns_to_plot
columns_to_plot <- names(results)[11:(ncol(results)-1)]
columns_to_plot
columns_to_plot <- names(results)[11:(ncol(results)-4)]
columns_to_plot
# start PDF device
pdf("../out/BarPlots_byBin_15pc_summed_final_version_for_manuscript_BLANK_LABELS.pdf", width = 11, height = 8.5)
# loop through each column to create and save the plot
for (col in columns_to_plot) {
results <- results %>%
mutate(!!paste0(col, "_formatted") := sprintf("%.2f", !!sym(col)))
p <- ggplot(results, aes(x = reorder(bin_ID, lower_boundary), y = get(col))) +
geom_bar(stat = "identity", aes(fill = highlight)) +
scale_fill_manual(values = color_blind_friendly_colors) +
geom_text(aes(label = get(col), color = highlight), vjust = 0,
size = 12, fontface = "bold", angle = 90, nudge_y = 0.03)+
scale_color_manual(values = color_blind_friendly_colors) +
theme_minimal() +
labs(x = "Bin ID", y = col, title = paste(col, "by Bin")) +
theme(
axis.text.x = element_blank(),
# axis.ticks.x = element_line(size = 0.5),
axis.ticks.x = element_blank(),
plot.title = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_text(angle = 0, hjust = 1, size = 24),
axis.ticks.y = element_blank(),
axis.ticks.length = unit(0.5, "cm"),
legend.position = "none"
) +
guides(fill = guide_legend(title = "Category"), color = FALSE)
print(p) # Print the plot to the PDF device
}
# Close the PDF device
dev.off()
View(results)
results <- results[, -c(21:26)]
View(results)
columns_to_plot <- names(results)[11:(ncol(results)-4)]
columns_to_plot
# start PDF device
pdf("../out/BarPlots_byBin_15pc_summed_final_version_for_manuscript_BLANK_LABELS.pdf", width = 11, height = 8.5)
# loop through each column to create and save the plot
for (col in columns_to_plot) {
# Create a temporary data frame with an additional column for the formatted labels
temp_results <- results %>%
mutate(!!paste0(col, "_formatted") := sprintf("%.2f", !!sym(col)))
# Use the formatted column for the label in geom_text
p <- ggplot(temp_results, aes(x = reorder(bin_ID, lower_boundary), y = get(col))) +
geom_bar(stat = "identity", aes(fill = highlight)) +
scale_fill_manual(values = color_blind_friendly_colors) +
geom_text(aes(label = get(paste0(col, "_formatted")), color = highlight), vjust = 0,
size = 12, fontface = "bold", angle = 90, nudge_y = 0.03) +
scale_color_manual(values = color_blind_friendly_colors) +
theme_minimal() +
labs(x = "Bin ID", y = col, title = paste(col, "by Bin")) +
theme(
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
plot.title = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_text(angle = 0, hjust = 1, size = 24),
axis.ticks.y = element_blank(),
axis.ticks.length = unit(0.5, "cm"),
legend.position = "none"
) +
guides(fill = guide_legend(title = "Category"), color = FALSE)
print(p) # Print the plot
}
# Close the PDF device
dev.off()
# start PDF device
pdf("../out/BarPlots_byBin_15pc_summed_final_version_for_manuscript_BLANK_LABELS.pdf", width = 11, height = 8.5)
# loop through each column to create and save the plot
for (col in columns_to_plot) {
# Create a temporary data frame with an additional column for the formatted labels
temp_results <- results %>%
mutate(!!paste0(col, "_formatted") := sprintf("%.2f", !!sym(col)))
# Use the formatted column for the label in geom_text
p <- ggplot(temp_results, aes(x = reorder(bin_ID, lower_boundary), y = get(col))) +
geom_bar(stat = "identity", aes(fill = highlight)) +
scale_fill_manual(values = color_blind_friendly_colors) +
geom_text(aes(label = get(paste0(col, "_formatted")), color = highlight), vjust = 1,
size = 12, fontface = "bold", angle = 90, nudge_y = 0.03) +
scale_color_manual(values = color_blind_friendly_colors) +
theme_minimal() +
labs(x = "Bin ID", y = col, title = paste(col, "by Bin")) +
theme(
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
plot.title = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_text(angle = 0, hjust = 1, size = 24),
axis.ticks.y = element_blank(),
axis.ticks.length = unit(0.5, "cm"),
legend.position = "none"
) +
guides(fill = guide_legend(title = "Category"), color = FALSE)
print(p) # Print the plot
}
# Close the PDF device
dev.off()
# start PDF device
pdf("../out/BarPlots_byBin_15pc_summed_final_version_for_manuscript_BLANK_LABELS.pdf", width = 11, height = 8.5)
# loop through each column to create and save the plot
for (col in columns_to_plot) {
# Create a temporary data frame with an additional column for the formatted labels
temp_results <- results %>%
mutate(!!paste0(col, "_formatted") := sprintf("%.2f", !!sym(col)))
# Use the formatted column for the label in geom_text
p <- ggplot(temp_results, aes(x = reorder(bin_ID, lower_boundary), y = get(col))) +
geom_bar(stat = "identity", aes(fill = highlight)) +
scale_fill_manual(values = color_blind_friendly_colors) +
geom_text(aes(label = get(paste0(col, "_formatted")), color = highlight), vjust = 0.5,
size = 12, fontface = "bold", angle = 90, nudge_y = 0.03) +
scale_color_manual(values = color_blind_friendly_colors) +
theme_minimal() +
labs(x = "Bin ID", y = col, title = paste(col, "by Bin")) +
theme(
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
plot.title = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_text(angle = 0, hjust = 1, size = 24),
axis.ticks.y = element_blank(),
axis.ticks.length = unit(0.5, "cm"),
legend.position = "none"
) +
guides(fill = guide_legend(title = "Category"), color = FALSE)
print(p) # Print the plot
}
# Close the PDF device
dev.off()
# start PDF device
pdf("../out/BarPlots_byBin_15pc_summed_final_version_for_manuscript_BLANK_LABELS.pdf", width = 11, height = 8.5)
# loop through each column to create and save the plot
for (col in columns_to_plot) {
# Create a temporary data frame with an additional column for the formatted labels
temp_results <- results %>%
mutate(!!paste0(col, "_formatted") := sprintf("%.2f", !!sym(col)))
# Use the formatted column for the label in geom_text
p <- ggplot(temp_results, aes(x = reorder(bin_ID, lower_boundary), y = get(col))) +
geom_bar(stat = "identity", aes(fill = highlight)) +
scale_fill_manual(values = color_blind_friendly_colors) +
geom_text(aes(label = get(paste0(col, "_formatted")), color = highlight), vjust = 0.5,
size = 12, fontface = "bold", angle = 45, nudge_y = 0.06) +
scale_color_manual(values = color_blind_friendly_colors) +
theme_minimal() +
labs(x = "Bin ID", y = col, title = paste(col, "by Bin")) +
theme(
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
plot.title = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_text(angle = 0, hjust = 1, size = 24),
axis.ticks.y = element_blank(),
axis.ticks.length = unit(0.5, "cm"),
legend.position = "none"
) +
guides(fill = guide_legend(title = "Category"), color = FALSE)
print(p) # Print the plot
}
# Close the PDF device
dev.off()
# start PDF device
pdf("../out/BarPlots_byBin_15pc_summed_final_version_for_manuscript_BLANK_LABELS.pdf", width = 11, height = 8.5)
# loop through each column to create and save the plot
for (col in columns_to_plot) {
# Create a temporary data frame with an additional column for the formatted labels
temp_results <- results %>%
mutate(!!paste0(col, "_formatted") := sprintf("%.2f", !!sym(col)))
# Use the formatted column for the label in geom_text
p <- ggplot(temp_results, aes(x = reorder(bin_ID, lower_boundary), y = get(col))) +
geom_bar(stat = "identity", aes(fill = highlight)) +
scale_fill_manual(values = color_blind_friendly_colors) +
geom_text(aes(label = get(paste0(col, "_formatted")), color = highlight), vjust = 0.5,
size = 12, fontface = "bold", angle = 0, nudge_y = 0.06) +
scale_color_manual(values = color_blind_friendly_colors) +
theme_minimal() +
labs(x = "Bin ID", y = col, title = paste(col, "by Bin")) +
theme(
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
plot.title = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_text(angle = 0, hjust = 1, size = 24),
axis.ticks.y = element_blank(),
axis.ticks.length = unit(0.5, "cm"),
legend.position = "none"
) +
guides(fill = guide_legend(title = "Category"), color = FALSE)
print(p) # Print the plot
}
# Close the PDF device
dev.off()
# start PDF device
pdf("../out/BarPlots_byBin_15pc_summed_final_version_for_manuscript_BLANK_LABELS.pdf", width = 11, height = 8.5)
# loop through each column to create and save the plot
for (col in columns_to_plot) {
# Create a temporary data frame with an additional column for the formatted labels
temp_results <- results %>%
mutate(!!paste0(col, "_formatted") := sprintf("%.2f", !!sym(col)))
# Use the formatted column for the label in geom_text
p <- ggplot(temp_results, aes(x = reorder(bin_ID, lower_boundary), y = get(col))) +
geom_bar(stat = "identity", aes(fill = highlight)) +
scale_fill_manual(values = color_blind_friendly_colors) +
geom_text(aes(label = get(paste0(col, "_formatted")), color = highlight), vjust = 0.5,
size = 11, fontface = "plain", angle = 0, nudge_y = 0.00) +
scale_color_manual(values = color_blind_friendly_colors) +
theme_minimal() +
labs(x = "Bin ID", y = col, title = paste(col, "by Bin")) +
theme(
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
plot.title = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_text(angle = 0, hjust = 1, size = 24),
axis.ticks.y = element_blank(),
axis.ticks.length = unit(0.5, "cm"),
legend.position = "none"
) +
guides(fill = guide_legend(title = "Category"), color = FALSE)
print(p) # Print the plot
}
# Close the PDF device
dev.off()
# start PDF device
pdf("../out/BarPlots_byBin_15pc_summed_final_version_for_manuscript_BLANK_LABELS.pdf", width = 11, height = 8.5)
# loop through each column to create and save the plot
for (col in columns_to_plot) {
# Create a temporary data frame with an additional column for the formatted labels
temp_results <- results %>%
mutate(!!paste0(col, "_formatted") := sprintf("%.2f", !!sym(col)))
# Use the formatted column for the label in geom_text
p <- ggplot(temp_results, aes(x = reorder(bin_ID, lower_boundary), y = get(col))) +
geom_bar(stat = "identity", aes(fill = highlight)) +
scale_fill_manual(values = color_blind_friendly_colors) +
geom_text(aes(label = get(paste0(col, "_formatted")), color = highlight), vjust = 0.5,
size = 11, fontface = "plain", angle = 0, nudge_y = 0.03) +
scale_color_manual(values = color_blind_friendly_colors) +
theme_minimal() +
labs(x = "Bin ID", y = col, title = paste(col, "by Bin")) +
theme(
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
plot.title = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_text(angle = 0, hjust = 1, size = 24),
axis.ticks.y = element_blank(),
axis.ticks.length = unit(0.5, "cm"),
legend.position = "none"
) +
guides(fill = guide_legend(title = "Category"), color = FALSE)
print(p) # Print the plot
}
# Close the PDF device
dev.off()
library(pdftools)
setwd("C:/Users/jtzve/Desktop/Sufo_Tyrosine/Figures_draft/scripts")
pdf_convert("../in/BarPlots_byBin_30pc_individual_final_version_for_manuscript_withx.pdf", format = "png", pages = c(11:13), filenames = NULL, dpi = 600, opw = "", upw = "", verbose = TRUE)
pdf_convert("../in/BarPlots_byBin_15pc_summed_final_version_for_manuscript_BLANK_LABELS.pdf", format = "png", pages = c(11:13), filenames = NULL, dpi = 600, opw = "", upw = "", verbose = TRUE)
pdf_convert("../in/BarPlots_byBin_15pc_summed_final_version_for_manuscript_BLANK_LABELS.pdf", format = "png", pages = NULL, filenames = NULL, dpi = 600, opw = "", upw = "", verbose = TRUE)
