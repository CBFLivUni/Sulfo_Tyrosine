axis.ticks.x = element_blank(),
plot.title = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_text(angle = 0, hjust = 1, size = 24),
axis.ticks.y = element_blank(),
axis.ticks.length = unit(0.5, "cm"),
legend.position = "none"
) +
guides(fill = guide_legend(title = "Category"), color = FALSE)
print(p) # Print the plot
}
# Close the PDF device
dev.off()
# accept two dataframes and their corresponding columns as input
plot_chi_squared_residuals <- function(observed_df, expected_df, observed_col, expected_col, pdf_device) {
# extract the counts from the dataframes
observed_counts <- observed_df[[observed_col]]
expected_counts <- expected_df[[expected_col]]
# perform the Chi-squared test
chi_squared_test <- chisq.test(observed_counts, p = expected_counts / sum(expected_counts), simulate.p.value = TRUE)
# calculate standardised residuals
standardized_residuals <- chi_squared_test$stdres
# create a dataframe for plotting
residuals_data <- data.frame(bin_ID = observed_df$bin_ID, Residuals = standardized_residuals)
# merge with the original data to include m/z boundaries
residuals_data <- residuals_data %>%
left_join(observed_df %>% select(bin_ID, lower_boundary), by = "bin_ID") %>%
arrange(lower_boundary) # order by lower boundary for plotting
# plotting the standardized residuals
plot_title <- paste0("Standardized Residuals from Chi-squared Test of ", observed_col)
p <- ggplot(residuals_data, aes(x = reorder(bin_ID, lower_boundary), y = Residuals)) +
geom_point(size = 3) +
geom_hline(yintercept = c(-2, 2), linetype = "dashed", color = "red") + # thresholds for significance
theme_minimal() +
labs(title = plot_title,
x = "Bin (Ordered by Lower m/z Boundary)",
y = "Standardized Residual") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(p)
}
# accept two dataframes and their corresponding columns as input
plot_chi_squared_residuals <- function(observed_df, expected_df, observed_col, expected_col, pdf_device) {
# extract the counts from the dataframes
observed_counts <- observed_df[[observed_col]]
expected_counts <- expected_df[[expected_col]]
# perform the Chi-squared test
chi_squared_test <- chisq.test(observed_counts, p = expected_counts / sum(expected_counts), simulate.p.value = TRUE)
# calculate standardised residuals
standardized_residuals <- chi_squared_test$stdres
# create a dataframe for plotting
residuals_data <- data.frame(bin_ID = observed_df$bin_ID, Residuals = standardized_residuals)
# merge with the original data to include m/z boundaries
residuals_data <- residuals_data %>%
left_join(observed_df %>% select(bin_ID, lower_boundary), by = "bin_ID") %>%
arrange(lower_boundary) # order by lower boundary for plotting
# plotting the standardized residuals
plot_title <- paste0("Standardized Residuals from Chi-squared Test of ", observed_col)
p <- ggplot(residuals_data, aes(x = reorder(bin_ID, lower_boundary), y = Residuals)) +
geom_point(size = 3) +
geom_hline(yintercept = c(-2, 2), linetype = "dashed", color = "salmon") + # thresholds for significance
theme_minimal() +
labs(title = plot_title,
x = "Bin (Ordered by Lower m/z Boundary)",
y = "Standardized Residual") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(p)
}
## need a tleas 5 observations per variable for each bin; we know this is not the case for the two bins at the lowest m/z; too few peptidoforms have been recorded for these bins so we will remove them for the chi-squared tests
# sort by mz lower boundary and remove two bins with too few observations
sorted_results <- results[order(results$lower_boundary), ]
chi_results <- sorted_results[-c(1:2), ]
# for chis squared tests we would need to get some expected proportions for the null hypothesis that all bins have the same proportions accross
# combine all data frames into one and retain only unique peptidoform rows
combined_df <- bind_rows(postGMM_data) %>%
distinct()
# NB this includes the bins we removed above, but since they contribute a tiny fraction of all peptidoforms, some of which not unique, it should be OK.
total_peptidoforms <- nrow(combined_df)
Y_containing_total <- sum(grepl("Y", combined_df$peptidoform_id))
T_containing_total <- sum(grepl("T", combined_df$peptidoform_id))
S_containing_total <- sum(grepl("S", combined_df$peptidoform_id))
pY_containing_total <- sum(grepl("Y243", combined_df$peptidoform_id))
pT_containing_total <- sum(grepl("T181", combined_df$peptidoform_id))
pS_containing_total <- sum(grepl("S167", combined_df$peptidoform_id))
# calculate overall proportions
prop_Y = Y_containing_total / total_peptidoforms
prop_T = T_containing_total / total_peptidoforms
prop_S = S_containing_total / total_peptidoforms
prop_pY = pY_containing_total / total_peptidoforms
prop_pT = pT_containing_total / total_peptidoforms
prop_pS = pS_containing_total / total_peptidoforms
# calculate expected counts for each bin
expected_counts_for_chi <- data.frame(
bin_ID = chi_results$bin_ID,
lower_boundary = chi_results$lower_boundary,
total_peptidoforms = chi_results$total_peptidoforms,
expected_Y_counts = chi_results$total_peptidoforms * prop_Y,
expected_T_counts = chi_results$total_peptidoforms * prop_T,
expected_S_counts = chi_results$total_peptidoforms * prop_S,
expected_pY_counts = chi_results$total_peptidoforms * prop_pY,
expected_pT_counts = chi_results$total_peptidoforms * prop_pT,
expected_pS_counts = chi_results$total_peptidoforms * prop_pS
)
# crate my data frame of observed results in the same order
observed_counts_for_chi <- data.frame(
bin_ID = chi_results$bin_ID,
lower_boundary = chi_results$lower_boundary,
total_peptidoforms = chi_results$total_peptidoforms,
observed_Y_counts = chi_results$tyrosine_containing_peptides_count,
observed_T_counts = chi_results$threonine_containing_peptides_count,
observed_S_counts = chi_results$serine_containing_peptides_count,
observed_pY_counts = chi_results$phosphotyrosine_containing_peptides_count,
observed_pT_counts = chi_results$phosphothreonine_containing_peptides_count,
observed_pS_counts = chi_results$phosphoserine_containing_peptides_count
)
################################### we can perform chi squared test for each column # in plotting script
## kind of hacky??
# calculate expected "counts" for each bin by multiplying by 100
expected_proportions_for_chi <- data.frame(
bin_ID = chi_results$bin_ID,
lower_boundary = chi_results$lower_boundary,
total_peptidoforms = chi_results$total_peptidoforms,
expected_Y_proportions = round(prop_Y * 100),
expected_T_proportions = round(prop_T * 100),
expected_S_proportions = round(prop_S * 100),
expected_pY_proportions = round(prop_pY * 100),
expected_pT_proportions = round(prop_pT * 100),
expected_pS_proportions = round(prop_pS * 100),
expected_pY_fraction_of_Y = round(prop_pY/prop_Y * 100),
expected_pT_fraction_of_T = round(prop_pT/prop_T * 100),
expected_pS_fraction_of_S = round(prop_pS/prop_S * 100)
)
# crate my data frame of observed results in the same order
observed_proportions_for_chi <- data.frame(
bin_ID = chi_results$bin_ID,
lower_boundary = chi_results$lower_boundary,
total_peptidoforms = chi_results$total_peptidoforms,
observed_Y_proportions = round(chi_results$tyrosine_containing_proportion * 100),
observed_T_proportions = round(chi_results$threonine_containing_proportion * 100),
observed_S_proportions = round(chi_results$serine_containing_proportion * 100),
observed_pY_proportions = round(chi_results$phosphotyrosine_containing_proportion * 100),
observed_pT_proportions = round(chi_results$phosphothreonine_containing_proportion * 100),
observed_pS_proportions = round(chi_results$phosphoserine_containing_proportion * 100),
observed_pY_fraction_of_Y = round(chi_results$pY_containing_fraction_of_Ycontaining * 100),
observed_pT_fraction_of_T = round(chi_results$pT_containing_fraction_of_Tcontaining * 100),
observed_pS_fraction_of_S = round(chi_results$pS_containing_fraction_of_Scontaining * 100)
)
pdf("../out/ChiSquared_residuals.pdf", width = 11, height = 8.5)
# Loop over the columns and generate the plots
for (i in 4:ncol(observed_counts_for_chi)) {
observed_col <- names(observed_counts_for_chi)[i]
expected_col <- names(expected_counts_for_chi)[i]
plot_chi_squared_residuals(observed_counts_for_chi,
expected_counts_for_chi,
observed_col,
expected_col,
pdf_device = NULL)
}
dev.off()
pdf("../out/ChiSquared_residuals_proportions.pdf", width = 11, height = 8.5)
for (i in 4:ncol(observed_proportions_for_chi)) {
observed_col <- names(observed_proportions_for_chi)[i]
expected_col <- names(expected_proportions_for_chi)[i]
plot_chi_squared_residuals(observed_proportions_for_chi, expected_proportions_for_chi, observed_col, expected_col, pdf_device = NULL)
}
dev.off()
setwd("C:/Users/jtzve/Desktop/Sufo_Tyrosine/Figures_draft/scripts")
pdf_convert("../in/BarPlots_for_manuscript_multipleBOIs.pdf", format = "png", pages = NULL, filenames = NULL, dpi = 600, opw = "", upw = "", verbose = TRUE)
library(pdftools)
pdf_convert("../in/BarPlots_for_manuscript_multipleBOIs.pdf", format = "png", pages = NULL, filenames = NULL, dpi = 600, opw = "", upw = "", verbose = TRUE)
# create a data frame with one row for each bin
# rm(bin_proportions_df)
bin_proportions_df <- as.data.frame(matrix(nrow = length(postGMM_data), ncol = 0))
bin_proportions_df$bin_ID <- cleaned_names
# extract bin limits from the bin ID. round the values because they are a bit weird
bin_proportions_df$lower_boundary <- lower_boundaries
bin_proportions_df$upper_boundary <- upper_boundaries
# for each bin, look at the corresponding data in post_GMM_data, and count:
# 1) the overall number of Tyrosine-containing peptides (one or more Y present in peptidoform ID coplumn)
# 2) the number of phosphotyrosine-containing peptides (Y243 present)
# 3) the total number of peptidoforms
# 4) calculate the proportion of tyrosine containing and proportion of phophotyrosine containing peptides in each bin
## NB: also do the same for Serine and Threonine to compare
# Initialise a data frame to store the results
results <- data.frame(bin_proportions_df,
########## TYROSINE
tyrosine_containing_peptides_count = integer(length(postGMM_data)),
phosphotyrosine_containing_peptides_count = integer(length(postGMM_data)),
total_peptidoforms = integer(length(postGMM_data)),
tyrosine_containing_proportion = numeric(length(postGMM_data)),
phosphotyrosine_containing_proportion = numeric(length(postGMM_data)),
######### THREONINE
threonine_containing_peptides_count = integer(length(postGMM_data)),
phosphothreonine_containing_peptides_count = integer(length(postGMM_data)),
#total_peptidoforms = integer(length(postGMM_data)),
threonine_containing_proportion = numeric(length(postGMM_data)),
phosphothreonine_containing_proportion = numeric(length(postGMM_data)),
######## SERINE
serine_containing_peptides_count = integer(length(postGMM_data)),
phosphoserine_containing_peptides_count = integer(length(postGMM_data)),
#total_peptidoforms = integer(length(postGMM_data)),
serine_containing_proportion = numeric(length(postGMM_data)),
phosphoserine_containing_proportion = numeric(length(postGMM_data)))
# test_df <- data.frame(peptidoform_id = c("TTT", "Y", "TYTY", "TY_Y243"))
# data <- test_df
# Iterate through each bin
for (i in seq_along(postGMM_data)) {
data <- postGMM_data[[i]]
results$tyrosine_containing_peptides_count[i] <- sum(grepl("Y", data$peptidoform_id))
results$phosphotyrosine_containing_peptides_count[i] <- sum(grepl("Y243", data$peptidoform_id))
results$total_peptidoforms[i] <- nrow(data)
# Calculating proportions
results$tyrosine_containing_proportion[i] <- results$tyrosine_containing_peptides_count[i] / results$total_peptidoforms[i]
results$phosphotyrosine_containing_proportion[i] <- results$phosphotyrosine_containing_peptides_count[i] / results$total_peptidoforms[i]
# Now for threonine
results$threonine_containing_peptides_count[i] <- sum(grepl("T", data$peptidoform_id))
results$phosphothreonine_containing_peptides_count[i] <- sum(grepl("T181", data$peptidoform_id))
### TODO also interesting how many of the pT contain a Y - might be misidentified   # as pT when it's in fact sY
results$pT_containing_with_Y[i] <- sum(grepl("T181.*Y|Y.*T181", data$peptidoform_id))
# Calculating proportions
results$threonine_containing_proportion[i] <- results$threonine_containing_peptides_count[i] / results$total_peptidoforms[i]
results$phosphothreonine_containing_proportion[i] <- results$phosphothreonine_containing_peptides_count[i] / results$total_peptidoforms[i]
## and for serine
results$serine_containing_peptides_count[i] <- sum(grepl("S", data$peptidoform_id))
results$phosphoserine_containing_peptides_count[i] <- sum(grepl("S167", data$peptidoform_id))
# Calculating proportions
results$serine_containing_proportion[i] <- results$serine_containing_peptides_count[i] / results$total_peptidoforms[i]
results$phosphoserine_containing_proportion[i] <- results$phosphoserine_containing_peptides_count[i] / results$total_peptidoforms[i]
}
# might be interesting to look at what fraction of tyrosine-containing are 'phosphorylated'
results$pY_containing_fraction_of_Ycontaining <- results$phosphotyrosine_containing_peptides_count /
results$tyrosine_containing_peptides_count
# Ratio of phospho-Threonine to total Threonine-containing peptides
results$pT_containing_fraction_of_Tcontaining <- results$phosphothreonine_containing_peptides_count / results$threonine_containing_peptides_count
# Ratio of phospho-serine to total serine-containing peptides
results$pS_containing_fraction_of_Scontaining <- results$phosphoserine_containing_peptides_count / results$serine_containing_peptides_count
write.csv(results, file = "../out/PTM_proportions_results_by_bin_newdat.csv", row.names = FALSE)
## reorder column names
new_order <- c("bin_ID",
"lower_boundary",
"upper_boundary",
"total_peptidoforms",
"threonine_containing_peptides_count",
"serine_containing_peptides_count",
"tyrosine_containing_peptides_count",
"phosphothreonine_containing_peptides_count",
"phosphoserine_containing_peptides_count",
"phosphotyrosine_containing_peptides_count",
"threonine_containing_proportion",
"serine_containing_proportion",
"tyrosine_containing_proportion",
"phosphothreonine_containing_proportion",
"phosphoserine_containing_proportion",
"phosphotyrosine_containing_proportion",
"pT_containing_fraction_of_Tcontaining",
"pS_containing_fraction_of_Scontaining",
"pY_containing_fraction_of_Ycontaining"
)
results <- results[, new_order]
names(results)
# round the columns that contain proportions to 4 decimals for the plots - all except first 10
results[, 10:ncol(results)] <- lapply(results[, 10:ncol(results)], round, 4)
# check
head(results)
# also order by m/z
results <- results[order(results$lower_boundary), ]
# Then, plot with highlighting
# Create a new column 'highlight' based on conditions
results$highlight <- ifelse(results$bin_ID %in% c("mz_-0.0225_-0.0175", "mz_-0.0175_-0.0125", "mz_-0.0125_-0.0075"), "Bins of Interest",
ifelse(results$bin_ID %in% c("mz_0.0075_0.0125", "mz_0.0125_0.0175", "mz_0.0175_0.0225"), "DECOY Bins", "Other Bins"))
# Assign color-blind friendly colors
color_blind_friendly_colors <- c("Bins of Interest" = "#E69F00", # orange
"DECOY Bins" = "#56B4E9", # sky blue
"Other Bins" = "grey") # yellow
# create a data frame with one row for each bin
# rm(bin_proportions_df)
bin_proportions_df <- as.data.frame(matrix(nrow = length(postGMM_data), ncol = 0))
bin_proportions_df$bin_ID <- cleaned_names
# extract bin limits from the bin ID. round the values because they are a bit weird
bin_proportions_df$lower_boundary <- lower_boundaries
bin_proportions_df$upper_boundary <- upper_boundaries
# for each bin, look at the corresponding data in post_GMM_data, and count:
# 1) the overall number of Tyrosine-containing peptides (one or more Y present in peptidoform ID coplumn)
# 2) the number of phosphotyrosine-containing peptides (Y243 present)
# 3) the total number of peptidoforms
# 4) calculate the proportion of tyrosine containing and proportion of phophotyrosine containing peptides in each bin
## NB: also do the same for Serine and Threonine to compare
# Initialise a data frame to store the results
results <- data.frame(bin_proportions_df,
########## TYROSINE
tyrosine_containing_peptides_count = integer(length(postGMM_data)),
phosphotyrosine_containing_peptides_count = integer(length(postGMM_data)),
total_peptidoforms = integer(length(postGMM_data)),
tyrosine_containing_proportion = numeric(length(postGMM_data)),
phosphotyrosine_containing_proportion = numeric(length(postGMM_data)),
######### THREONINE
threonine_containing_peptides_count = integer(length(postGMM_data)),
phosphothreonine_containing_peptides_count = integer(length(postGMM_data)),
#total_peptidoforms = integer(length(postGMM_data)),
threonine_containing_proportion = numeric(length(postGMM_data)),
phosphothreonine_containing_proportion = numeric(length(postGMM_data)),
######## SERINE
serine_containing_peptides_count = integer(length(postGMM_data)),
phosphoserine_containing_peptides_count = integer(length(postGMM_data)),
#total_peptidoforms = integer(length(postGMM_data)),
serine_containing_proportion = numeric(length(postGMM_data)),
phosphoserine_containing_proportion = numeric(length(postGMM_data)))
# test_df <- data.frame(peptidoform_id = c("TTT", "Y", "TYTY", "TY_Y243"))
# data <- test_df
# Iterate through each bin
for (i in seq_along(postGMM_data)) {
data <- postGMM_data[[i]]
results$tyrosine_containing_peptides_count[i] <- sum(grepl("Y", data$peptidoform_id))
results$phosphotyrosine_containing_peptides_count[i] <- sum(grepl("Y243", data$peptidoform_id))
results$total_peptidoforms[i] <- nrow(data)
# Calculating proportions
results$tyrosine_containing_proportion[i] <- results$tyrosine_containing_peptides_count[i] / results$total_peptidoforms[i]
results$phosphotyrosine_containing_proportion[i] <- results$phosphotyrosine_containing_peptides_count[i] / results$total_peptidoforms[i]
# Now for threonine
results$threonine_containing_peptides_count[i] <- sum(grepl("T", data$peptidoform_id))
results$phosphothreonine_containing_peptides_count[i] <- sum(grepl("T181", data$peptidoform_id))
### TODO also interesting how many of the pT contain a Y - might be misidentified   # as pT when it's in fact sY
results$pT_containing_with_Y[i] <- sum(grepl("T181.*Y|Y.*T181", data$peptidoform_id))
# Calculating proportions
results$threonine_containing_proportion[i] <- results$threonine_containing_peptides_count[i] / results$total_peptidoforms[i]
results$phosphothreonine_containing_proportion[i] <- results$phosphothreonine_containing_peptides_count[i] / results$total_peptidoforms[i]
## and for serine
results$serine_containing_peptides_count[i] <- sum(grepl("S", data$peptidoform_id))
results$phosphoserine_containing_peptides_count[i] <- sum(grepl("S167", data$peptidoform_id))
# Calculating proportions
results$serine_containing_proportion[i] <- results$serine_containing_peptides_count[i] / results$total_peptidoforms[i]
results$phosphoserine_containing_proportion[i] <- results$phosphoserine_containing_peptides_count[i] / results$total_peptidoforms[i]
}
# might be interesting to look at what fraction of tyrosine-containing are 'phosphorylated'
results$pY_containing_fraction_of_Ycontaining <- results$phosphotyrosine_containing_peptides_count /
results$tyrosine_containing_peptides_count
# Ratio of phospho-Threonine to total Threonine-containing peptides
results$pT_containing_fraction_of_Tcontaining <- results$phosphothreonine_containing_peptides_count / results$threonine_containing_peptides_count
# Ratio of phospho-serine to total serine-containing peptides
results$pS_containing_fraction_of_Scontaining <- results$phosphoserine_containing_peptides_count / results$serine_containing_peptides_count
write.csv(results, file = "../out/PTM_proportions_results_by_bin_newdat.csv", row.names = FALSE)
## reorder column names
new_order <- c("bin_ID",
"lower_boundary",
"upper_boundary",
"total_peptidoforms",
"threonine_containing_peptides_count",
"serine_containing_peptides_count",
"tyrosine_containing_peptides_count",
"phosphothreonine_containing_peptides_count",
"phosphoserine_containing_peptides_count",
"phosphotyrosine_containing_peptides_count",
"threonine_containing_proportion",
"serine_containing_proportion",
"tyrosine_containing_proportion",
"phosphothreonine_containing_proportion",
"phosphoserine_containing_proportion",
"phosphotyrosine_containing_proportion",
"pT_containing_fraction_of_Tcontaining",
"pS_containing_fraction_of_Scontaining",
"pY_containing_fraction_of_Ycontaining",
"pT_containing_with_Y"
)
results <- results[, new_order]
names(results)
# round the columns that contain proportions to 4 decimals for the plots - all except first 10
results[, 10:ncol(results)] <- lapply(results[, 10:ncol(results)], round, 4)
# check
head(results)
# also order by m/z
results <- results[order(results$lower_boundary), ]
# Then, plot with highlighting
# Create a new column 'highlight' based on conditions
results$highlight <- ifelse(results$bin_ID %in% c("mz_-0.0225_-0.0175", "mz_-0.0175_-0.0125", "mz_-0.0125_-0.0075"), "Bins of Interest",
ifelse(results$bin_ID %in% c("mz_0.0075_0.0125", "mz_0.0125_0.0175", "mz_0.0175_0.0225"), "DECOY Bins", "Other Bins"))
# Assign color-blind friendly colors
color_blind_friendly_colors <- c("Bins of Interest" = "#E69F00", # orange
"DECOY Bins" = "#56B4E9", # sky blue
"Other Bins" = "grey") # yellow
# create a data frame with one row for each bin
# rm(bin_proportions_df)
bin_proportions_df <- as.data.frame(matrix(nrow = length(postGMM_data), ncol = 0))
bin_proportions_df$bin_ID <- cleaned_names
# extract bin limits from the bin ID. round the values because they are a bit weird
bin_proportions_df$lower_boundary <- lower_boundaries
bin_proportions_df$upper_boundary <- upper_boundaries
# for each bin, look at the corresponding data in post_GMM_data, and count:
# 1) the overall number of Tyrosine-containing peptides (one or more Y present in peptidoform ID coplumn)
# 2) the number of phosphotyrosine-containing peptides (Y243 present)
# 3) the total number of peptidoforms
# 4) calculate the proportion of tyrosine containing and proportion of phophotyrosine containing peptides in each bin
## NB: also do the same for Serine and Threonine to compare
# Initialise a data frame to store the results
results <- data.frame(bin_proportions_df,
########## TYROSINE
tyrosine_containing_peptides_count = integer(length(postGMM_data)),
phosphotyrosine_containing_peptides_count = integer(length(postGMM_data)),
total_peptidoforms = integer(length(postGMM_data)),
tyrosine_containing_proportion = numeric(length(postGMM_data)),
phosphotyrosine_containing_proportion = numeric(length(postGMM_data)),
######### THREONINE
threonine_containing_peptides_count = integer(length(postGMM_data)),
phosphothreonine_containing_peptides_count = integer(length(postGMM_data)),
#total_peptidoforms = integer(length(postGMM_data)),
threonine_containing_proportion = numeric(length(postGMM_data)),
phosphothreonine_containing_proportion = numeric(length(postGMM_data)),
######## SERINE
serine_containing_peptides_count = integer(length(postGMM_data)),
phosphoserine_containing_peptides_count = integer(length(postGMM_data)),
#total_peptidoforms = integer(length(postGMM_data)),
serine_containing_proportion = numeric(length(postGMM_data)),
phosphoserine_containing_proportion = numeric(length(postGMM_data)))
# test_df <- data.frame(peptidoform_id = c("TTT", "Y", "TYTY", "TY_Y243"))
# data <- test_df
# Iterate through each bin
for (i in seq_along(postGMM_data)) {
data <- postGMM_data[[i]]
results$tyrosine_containing_peptides_count[i] <- sum(grepl("Y", data$peptidoform_id))
results$phosphotyrosine_containing_peptides_count[i] <- sum(grepl("Y243", data$peptidoform_id))
results$total_peptidoforms[i] <- nrow(data)
# Calculating proportions
results$tyrosine_containing_proportion[i] <- results$tyrosine_containing_peptides_count[i] / results$total_peptidoforms[i]
results$phosphotyrosine_containing_proportion[i] <- results$phosphotyrosine_containing_peptides_count[i] / results$total_peptidoforms[i]
# Now for threonine
results$threonine_containing_peptides_count[i] <- sum(grepl("T", data$peptidoform_id))
results$phosphothreonine_containing_peptides_count[i] <- sum(grepl("T181", data$peptidoform_id))
### TODO also interesting how many of the pT contain a Y - might be misidentified   # as pT when it's in fact sY
results$pT_containing_with_Y[i] <- sum(grepl("T181.*Y|Y.*T181", data$peptidoform_id))
print(results$pT_containing_with_Y[i])
# Calculating proportions
results$threonine_containing_proportion[i] <- results$threonine_containing_peptides_count[i] / results$total_peptidoforms[i]
results$phosphothreonine_containing_proportion[i] <- results$phosphothreonine_containing_peptides_count[i] / results$total_peptidoforms[i]
## and for serine
results$serine_containing_peptides_count[i] <- sum(grepl("S", data$peptidoform_id))
results$phosphoserine_containing_peptides_count[i] <- sum(grepl("S167", data$peptidoform_id))
# Calculating proportions
results$serine_containing_proportion[i] <- results$serine_containing_peptides_count[i] / results$total_peptidoforms[i]
results$phosphoserine_containing_proportion[i] <- results$phosphoserine_containing_peptides_count[i] / results$total_peptidoforms[i]
}
# might be interesting to look at what fraction of tyrosine-containing are 'phosphorylated'
results$pY_containing_fraction_of_Ycontaining <- results$phosphotyrosine_containing_peptides_count /
results$tyrosine_containing_peptides_count
# Ratio of phospho-Threonine to total Threonine-containing peptides
results$pT_containing_fraction_of_Tcontaining <- results$phosphothreonine_containing_peptides_count / results$threonine_containing_peptides_count
# Ratio of phospho-serine to total serine-containing peptides
results$pS_containing_fraction_of_Scontaining <- results$phosphoserine_containing_peptides_count / results$serine_containing_peptides_count
write.csv(results, file = "../out/PTM_proportions_results_by_bin_newdat.csv", row.names = FALSE)
## reorder column names
new_order <- c("bin_ID",
"lower_boundary",
"upper_boundary",
"total_peptidoforms",
"threonine_containing_peptides_count",
"serine_containing_peptides_count",
"tyrosine_containing_peptides_count",
"phosphothreonine_containing_peptides_count",
"phosphoserine_containing_peptides_count",
"phosphotyrosine_containing_peptides_count",
"threonine_containing_proportion",
"serine_containing_proportion",
"tyrosine_containing_proportion",
"phosphothreonine_containing_proportion",
"phosphoserine_containing_proportion",
"phosphotyrosine_containing_proportion",
"pT_containing_fraction_of_Tcontaining",
"pS_containing_fraction_of_Scontaining",
"pY_containing_fraction_of_Ycontaining",
"pT_containing_with_Y"
)
results <- results[, new_order]
names(results)
# round the columns that contain proportions to 4 decimals for the plots - all except first 10
results[, 10:ncol(results)] <- lapply(results[, 10:ncol(results)], round, 4)
# check
head(results)
# also order by m/z
results <- results[order(results$lower_boundary), ]
# Then, plot with highlighting
# Create a new column 'highlight' based on conditions
results$highlight <- ifelse(results$bin_ID %in% c("mz_-0.0225_-0.0175", "mz_-0.0175_-0.0125", "mz_-0.0125_-0.0075"), "Bins of Interest",
ifelse(results$bin_ID %in% c("mz_0.0075_0.0125", "mz_0.0125_0.0175", "mz_0.0175_0.0225"), "DECOY Bins", "Other Bins"))
# Assign color-blind friendly colors
color_blind_friendly_colors <- c("Bins of Interest" = "#E69F00", # orange
"DECOY Bins" = "#56B4E9", # sky blue
"Other Bins" = "grey") # yellow
View(results)
## pT with Y as fraction of pT
results$pT_with_Y_as_fraction_of_pT <- results$pT_containing_with_Y / results$phosphothreonine_containing_peptides_count
results$pT_with_Y_as_fraction_of_pT
write.csv(results, file = "../out/PTM_proportions_results_by_bin_newdat.csv", row.names = FALSE)
19.05/3
getwd()
pages_15pc_individual <- c(100, # 100 = nASEEEPEYGEEIK_n230_1_S167_1_Y243_1 - Secretogranin-1 - KNOWN SULFATED
106, # 106 = nATWLSLFSSEESNLGANNYDDYR_n230_1_S167_3 - Vitronectin, KNOWN SULFATED
148, # 148 = nGDVFTMPEDEYTVYDDGEEK_n230_1_Y243_1 - Vitronectin, KNOWN SULFATED
122, # 122 = nDSYETSQLDDQSAETHSHK_n230_1_S167_1_T181_1 - mix sulfated and phosphorylated; Osteopontin - secreted
43, # 43 = MSNYSLLSVDYVVDK_M147_1_S167_1_Y243_1  - sulfated only example; Sulfotransferase 2A1
398, # 398 = nVHNDAQSFDYDHDAFLGAEEAK_n230_1_S167_1_Y243_1 - sulfated; example for Calumenin - Golgi
29, # 29 = KAYSFCGTVEYMAPEVVNR_M147_1_Y243_1 - false positive that slipped through filtering;
40, # 40 =  LSRGSIDREDGSLQGPIGNQHIYQPVGKPDPAAPPK_S167_1 - false positive
420 # 420 = nYVGFGNTPPPQKK_n145_1_T181_1 - false positive
)
pdf_convert("../in/histograms_post_auc_filtering_15pc_individualAUCbin_-0.0125_-0.0075.pdf",
format = "png",
pages = pages_15pc_individual,
filenames = NULL,
dpi = 600, opw = "", upw = "", verbose = TRUE)
pdf_convert("../in/histograms_post_auc_filtering_15pc_individualAUCbin_-0.0175_-0.0125.pdf",
format = "png",
pages = 20,
filenames = NULL,
dpi = 600, opw = "", upw = "", verbose = TRUE)
