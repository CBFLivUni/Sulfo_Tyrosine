input_filenames <- basename(calibrated_files)
# read in all data one by one into an empty list, setting each data frame as a
# new elemnt of the list.
calibrated_data <- list()
print("reading in data")
for (i in 1:length(calibrated_files)) {
print(calibrated_files[[i]])
calibrated_data[[i]] <- read.csv(calibrated_files[[i]], sep = "\t")
}
# we want to add names to the dataframes so they are used e.g. when writing csvs.
# first strip everythign after and including _interact .... .tsv
stripped_filenames <- gsub("_interact.*", "", input_filenames)
# assign this to our list
names(calibrated_data) <- stripped_filenames
# source the PTM filtering function
source("scripts/PTM_filtering_fun.R")
# determine what PTMs are of interest to use in function
PTMs_of_interest = c("S[167]", "T[181]", "Y[243]") # here phosphorylation of S, T, and Y
# for every calibrated dataset
filtered_data <- list()
for (i in 1:length(calibrated_data)) {
#apply the PTM filtering function to only include peptides with phosphtylation
print(i)
filtered_data[[i]] <- FilterPTMs(df = calibrated_data[[i]],
PTMs_of_interest = PTMs_of_interest)
}
# once again set the name for each dataset
names(filtered_data) <- stripped_filenames
# then remove the list of read in data to free memory
rm(calibrated_data)
gc()
source("scripts/Generate_peptidoform_ID.R")
# add peptidoform ID and its scipher + dataset ID to each dataset to enable subsequent filtering
pepcols <-  c("peptide", "mod_peptide") # cols with peptide and PTM data
# these are defaults, here just for ease
peptidoform_id_summaries <- list()
for (i in 1:length(filtered_data)) {
dataset_ID <- names(filtered_data[i])
print(dataset_ID)
print(i/length(filtered_data)*100)
filtered_data[[i]]$dataset_ID <- dataset_ID  # set the dataset ID to its unique folder name
peptidoform_id_summaries[[i]] <- Generate_Peptidoform_ID(df = filtered_data[[i]],
outname = dataset_ID) # set name for saving .csv files
}
batch = "batch2_3/extracted_files/"
# get all calibrated files
calibrated_files <- list.files(paste0(wd, batch), pattern = extension, full.names = TRUE, recursive = TRUE)
# extract the folder paths for hist plot f-n
folders <- dirname(calibrated_files)
# and the filenames for input in plot histograms f-n by Andy
input_filenames <- basename(calibrated_files)
# read in all data one by one into an empty list, setting each data frame as a
# new elemnt of the list.
calibrated_data <- list()
print("reading in data")
for (i in 1:length(calibrated_files)) {
print(calibrated_files[[i]])
calibrated_data[[i]] <- read.csv(calibrated_files[[i]], sep = "\t")
}
# we want to add names to the dataframes so they are used e.g. when writing csvs.
# first strip everythign after and including _interact .... .tsv
stripped_filenames <- gsub("_interact.*", "", input_filenames)
# assign this to our list
names(calibrated_data) <- stripped_filenames
# source the PTM filtering function
source("scripts/PTM_filtering_fun.R")
# determine what PTMs are of interest to use in function
PTMs_of_interest = c("S[167]", "T[181]", "Y[243]") # here phosphorylation of S, T, and Y
# for every calibrated dataset
filtered_data <- list()
for (i in 1:length(calibrated_data)) {
#apply the PTM filtering function to only include peptides with phosphtylation
print(i)
filtered_data[[i]] <- FilterPTMs(df = calibrated_data[[i]],
PTMs_of_interest = PTMs_of_interest)
}
# once again set the name for each dataset
names(filtered_data) <- stripped_filenames
# then remove the list of read in data to free memory
rm(calibrated_data)
gc()
gc()
gc()
# add peptidoform ID and its scipher + dataset ID to each dataset to enable subsequent filtering
pepcols <-  c("peptide", "mod_peptide") # cols with peptide and PTM data
# these are defaults, here just for ease
peptidoform_id_summaries <- list()
gc()
for (i in 1:length(filtered_data)) {
dataset_ID <- names(filtered_data[i])
print(dataset_ID)
print(i/length(filtered_data)*100)
filtered_data[[i]]$dataset_ID <- dataset_ID  # set the dataset ID to its unique folder name
peptidoform_id_summaries[[i]] <- Generate_Peptidoform_ID(df = filtered_data[[i]],
outname = dataset_ID) # set name for saving .csv files
}
# the data has been written... did not return df for some reason, maybe I didn't source the function after changing? anyway...
rm()
knitr::opts_chunk$set(echo = FALSE)
# set wd to parent folder
wd <- "C:/Users/jtzve/Desktop/Sufo_Tyrosine/01_Sulfotyrosine_Data_Processing/"
knitr::opts_knit$set(root.dir = wd)
# specify the extension unique to your calibrated files
extension = "thresholded_calibrated.tsv"
# get all calibrated files
calibrated_files <- list.files(paste0(wd, batch), pattern = extension, full.names = TRUE, recursive = TRUE)
# extract the folder paths for hist plot f-n
folders <- dirname(calibrated_files)
# specify the extension unique to your calibrated files
extension = "thresholded_calibrated.tsv"
batch = "batch2_4/extracted_files/"
# get all calibrated files
calibrated_files <- list.files(paste0(wd, batch), pattern = extension, full.names = TRUE, recursive = TRUE)
# extract the folder paths for hist plot f-n
folders <- dirname(calibrated_files)
# and the filenames for input in plot histograms f-n by Andy
input_filenames <- basename(calibrated_files)
# read in all data one by one into an empty list, setting each data frame as a
# new elemnt of the list.
calibrated_data <- list()
print("reading in data")
for (i in 1:length(calibrated_files)) {
print(calibrated_files[[i]])
calibrated_data[[i]] <- read.csv(calibrated_files[[i]], sep = "\t")
}
# we want to add names to the dataframes so they are used e.g. when writing csvs.
# first strip everythign after and including _interact .... .tsv
stripped_filenames <- gsub("_interact.*", "", input_filenames)
# assign this to our list
names(calibrated_data) <- stripped_filenames
# source the PTM filtering function
source("scripts/PTM_filtering_fun.R")
# determine what PTMs are of interest to use in function
PTMs_of_interest = c("S[167]", "T[181]", "Y[243]") # here phosphorylation of S, T, and Y
# for every calibrated dataset
filtered_data <- list()
for (i in 1:length(calibrated_data)) {
#apply the PTM filtering function to only include peptides with phosphtylation
print(i)
filtered_data[[i]] <- FilterPTMs(df = calibrated_data[[i]],
PTMs_of_interest = PTMs_of_interest)
}
# once again set the name for each dataset
names(filtered_data) <- stripped_filenames
# then remove the list of read in data to free memory
rm(calibrated_data)
gc()
source("scripts/Generate_peptidoform_ID.R")
# add peptidoform ID and its scipher + dataset ID to each dataset to enable subsequent filtering
pepcols <-  c("peptide", "mod_peptide") # cols with peptide and PTM data
# these are defaults, here just for ease
peptidoform_id_summaries <- list()
gc()
for (i in 1:length(filtered_data)) {
dataset_ID <- names(filtered_data[i])
print(dataset_ID)
print(i/length(filtered_data)*100)
filtered_data[[i]]$dataset_ID <- dataset_ID  # set the dataset ID to its unique folder name
peptidoform_id_summaries[[i]] <- Generate_Peptidoform_ID(df = filtered_data[[i]],
outname = dataset_ID) # set name for saving .csv files
}
# the data has been written... did not return df for some reason, maybe I didn't source the function after changing? anyway...
rm()
batch = "batch2_5/extracted_files/"
# get all calibrated files
calibrated_files <- list.files(paste0(wd, batch), pattern = extension, full.names = TRUE, recursive = TRUE)
# extract the folder paths for hist plot f-n
folders <- dirname(calibrated_files)
# and the filenames for input in plot histograms f-n by Andy
input_filenames <- basename(calibrated_files)
# read in all data one by one into an empty list, setting each data frame as a
# new elemnt of the list.
calibrated_data <- list()
print("reading in data")
for (i in 1:length(calibrated_files)) {
print(calibrated_files[[i]])
calibrated_data[[i]] <- read.csv(calibrated_files[[i]], sep = "\t")
}
# we want to add names to the dataframes so they are used e.g. when writing csvs.
# first strip everythign after and including _interact .... .tsv
stripped_filenames <- gsub("_interact.*", "", input_filenames)
# assign this to our list
names(calibrated_data) <- stripped_filenames
# determine what PTMs are of interest to use in function
PTMs_of_interest = c("S[167]", "T[181]", "Y[243]") # here phosphorylation of S, T, and Y
# for every calibrated dataset
filtered_data <- list()
for (i in 1:length(calibrated_data)) {
#apply the PTM filtering function to only include peptides with phosphtylation
print(i)
filtered_data[[i]] <- FilterPTMs(df = calibrated_data[[i]],
PTMs_of_interest = PTMs_of_interest)
}
for (i in 1:length(calibrated_data)) {
#apply the PTM filtering function to only include peptides with phosphtylation
print(i)
filtered_data[[i]] <- FilterPTMs(df = calibrated_data[[i]],
PTMs_of_interest = PTMs_of_interest)
}
# once again set the name for each dataset
names(filtered_data) <- stripped_filenames
# once again set the name for each dataset
names(filtered_data) <- stripped_filenames
# then remove the list of read in data to free memory
rm(calibrated_data)
gc()
# add peptidoform ID and its scipher + dataset ID to each dataset to enable subsequent filtering
pepcols <-  c("peptide", "mod_peptide") # cols with peptide and PTM data
# these are defaults, here just for ease
peptidoform_id_summaries <- list()
for (i in 1:length(filtered_data)) {
dataset_ID <- names(filtered_data[i])
print(dataset_ID)
print(i/length(filtered_data)*100)
filtered_data[[i]]$dataset_ID <- dataset_ID  # set the dataset ID to its unique folder name
peptidoform_id_summaries[[i]] <- Generate_Peptidoform_ID(df = filtered_data[[i]],
outname = dataset_ID) # set name for saving .csv files
}
# the data has been written... did not return df for some reason, maybe I didn't source the function after changing? anyway...
rm()
batch = "batch2_6/extracted_files/"
# get all calibrated files
calibrated_files <- list.files(paste0(wd, batch), pattern = extension, full.names = TRUE, recursive = TRUE)
# extract the folder paths for hist plot f-n
folders <- dirname(calibrated_files)
# and the filenames for input in plot histograms f-n by Andy
input_filenames <- basename(calibrated_files)
# read in all data one by one into an empty list, setting each data frame as a
# new elemnt of the list.
calibrated_data <- list()
print("reading in data")
for (i in 1:length(calibrated_files)) {
print(calibrated_files[[i]])
calibrated_data[[i]] <- read.csv(calibrated_files[[i]], sep = "\t")
}
# we want to add names to the dataframes so they are used e.g. when writing csvs.
# first strip everythign after and including _interact .... .tsv
stripped_filenames <- gsub("_interact.*", "", input_filenames)
# assign this to our list
names(calibrated_data) <- stripped_filenames
# determine what PTMs are of interest to use in function
PTMs_of_interest = c("S[167]", "T[181]", "Y[243]") # here phosphorylation of S, T, and Y
# for every calibrated dataset
filtered_data <- list()
for (i in 1:length(calibrated_data)) {
#apply the PTM filtering function to only include peptides with phosphtylation
print(i)
filtered_data[[i]] <- FilterPTMs(df = calibrated_data[[i]],
PTMs_of_interest = PTMs_of_interest)
}
# once again set the name for each dataset
names(filtered_data) <- stripped_filenames
# then remove the list of read in data to free memory
rm(calibrated_data)
gc()
# add peptidoform ID and its scipher + dataset ID to each dataset to enable subsequent filtering
pepcols <-  c("peptide", "mod_peptide") # cols with peptide and PTM data
# these are defaults, here just for ease
peptidoform_id_summaries <- list()
for (i in 1:length(filtered_data)) {
dataset_ID <- names(filtered_data[i])
print(dataset_ID)
print(i/length(filtered_data)*100)
filtered_data[[i]]$dataset_ID <- dataset_ID  # set the dataset ID to its unique folder name
peptidoform_id_summaries[[i]] <- Generate_Peptidoform_ID(df = filtered_data[[i]],
outname = dataset_ID) # set name for saving .csv files
}
# the data has been written... did not return df for some reason, maybe I didn't source the function after changing? anyway...
rm()
names(filtered_data)
batch = "batch2_6/extracted_files/"
# get all calibrated files
calibrated_files <- list.files(paste0(wd, batch), pattern = extension, full.names = TRUE, recursive = TRUE)
# extract the folder paths for hist plot f-n
folders <- dirname(calibrated_files)
# and the filenames for input in plot histograms f-n by Andy
input_filenames <- basename(calibrated_files)
input_filenames
batch = "batch2_5/extracted_files/"
# get all calibrated files
calibrated_files <- list.files(paste0(wd, batch), pattern = extension, full.names = TRUE, recursive = TRUE)
# extract the folder paths for hist plot f-n
folders <- dirname(calibrated_files)
# and the filenames for input in plot histograms f-n by Andy
input_filenames <- basename(calibrated_files)
input_filenames
batch = "batch2_7/extracted_files/"
# get all calibrated files
calibrated_files <- list.files(paste0(wd, batch), pattern = extension, full.names = TRUE, recursive = TRUE)
# extract the folder paths for hist plot f-n
folders <- dirname(calibrated_files)
# and the filenames for input in plot histograms f-n by Andy
input_filenames <- basename(calibrated_files)
# read in all data one by one into an empty list, setting each data frame as a
# new elemnt of the list.
calibrated_data <- list()
print("reading in data")
for (i in 1:length(calibrated_files)) {
print(calibrated_files[[i]])
calibrated_data[[i]] <- read.csv(calibrated_files[[i]], sep = "\t")
}
# we want to add names to the dataframes so they are used e.g. when writing csvs.
# first strip everythign after and including _interact .... .tsv
stripped_filenames <- gsub("_interact.*", "", input_filenames)
# assign this to our list
names(calibrated_data) <- stripped_filenames
# determine what PTMs are of interest to use in function
PTMs_of_interest = c("S[167]", "T[181]", "Y[243]") # here phosphorylation of S, T, and Y
# for every calibrated dataset
filtered_data <- list()
for (i in 1:length(calibrated_data)) {
#apply the PTM filtering function to only include peptides with phosphtylation
print(i)
filtered_data[[i]] <- FilterPTMs(df = calibrated_data[[i]],
PTMs_of_interest = PTMs_of_interest)
}
# once again set the name for each dataset
names(filtered_data) <- stripped_filenames
# then remove the list of read in data to free memory
rm(calibrated_data)
gc()
# add peptidoform ID and its scipher + dataset ID to each dataset to enable subsequent filtering
pepcols <-  c("peptide", "mod_peptide") # cols with peptide and PTM data
# these are defaults, here just for ease
peptidoform_id_summaries <- list()
for (i in 1:length(filtered_data)) {
dataset_ID <- names(filtered_data[i])
print(dataset_ID)
print(i/length(filtered_data)*100)
filtered_data[[i]]$dataset_ID <- dataset_ID  # set the dataset ID to its unique folder name
peptidoform_id_summaries[[i]] <- Generate_Peptidoform_ID(df = filtered_data[[i]],
outname = dataset_ID) # set name for saving .csv files
}
# the data has been written... did not return df for some reason, maybe I didn't source the function after changing? anyway...
rm(peptidoform_id_summaries)
gc()
batch = "batch2_8/extracted_files/"
# get all calibrated files
calibrated_files <- list.files(paste0(wd, batch), pattern = extension, full.names = TRUE, recursive = TRUE)
# extract the folder paths for hist plot f-n
folders <- dirname(calibrated_files)
# and the filenames for input in plot histograms f-n by Andy
input_filenames <- basename(calibrated_files)
# read in all data one by one into an empty list, setting each data frame as a
# new elemnt of the list.
calibrated_data <- list()
print("reading in data")
for (i in 1:length(calibrated_files)) {
print(calibrated_files[[i]])
calibrated_data[[i]] <- read.csv(calibrated_files[[i]], sep = "\t")
}
# we want to add names to the dataframes so they are used e.g. when writing csvs.
# first strip everythign after and including _interact .... .tsv
stripped_filenames <- gsub("_interact.*", "", input_filenames)
# assign this to our list
names(calibrated_data) <- stripped_filenames
# determine what PTMs are of interest to use in function
PTMs_of_interest = c("S[167]", "T[181]", "Y[243]") # here phosphorylation of S, T, and Y
# for every calibrated dataset
filtered_data <- list()
for (i in 1:length(calibrated_data)) {
#apply the PTM filtering function to only include peptides with phosphtylation
print(i)
filtered_data[[i]] <- FilterPTMs(df = calibrated_data[[i]],
PTMs_of_interest = PTMs_of_interest)
}
# once again set the name for each dataset
names(filtered_data) <- stripped_filenames
# then remove the list of read in data to free memory
rm(calibrated_data)
# add peptidoform ID and its scipher + dataset ID to each dataset to enable subsequent filtering
pepcols <-  c("peptide", "mod_peptide") # cols with peptide and PTM data
# these are defaults, here just for ease
peptidoform_id_summaries <- list()
for (i in 1:length(filtered_data)) {
dataset_ID <- names(filtered_data[i])
print(dataset_ID)
print(i/length(filtered_data)*100)
filtered_data[[i]]$dataset_ID <- dataset_ID  # set the dataset ID to its unique folder name
peptidoform_id_summaries[[i]] <- Generate_Peptidoform_ID(df = filtered_data[[i]],
outname = dataset_ID) # set name for saving .csv files
}
i = 19
dataset_ID <- names(filtered_data[i])
print(dataset_ID)
print(i/length(filtered_data)*100)
filtered_data[[i]]$dataset_ID <- dataset_ID  # set the dataset ID to its unique folder name
head(filtered_data[[i]])
View(filtered_data)
### source functions and other scripts#####
source("plot_hist_fun.R") # plot all histograms - #plotting with function from Andy
##### get datasets calibrated data to work with ##########
# get all calibrated tsvs
# wd <- paste0(getwd(), "/")
wd <- "C:/Users/jtzve/Desktop/Sufo_Tyrosine/01_Sulfotyrosine_Data_Processing/batch2_8/"
extension = ".pep_thresholded_calibrated.tsv"
##### get datasets calibrated data to work with ##########
# get all calibrated tsvs
# wd <- paste0(getwd(), "/")
wd <- "C:/Users/jtzve/Desktop/Sufo_Tyrosine/01_Sulfotyrosine_Data_Processing/batch2_9/"
extension = ".pep_thresholded_calibrated.tsv"
calibrated_files <- list.files(wd, pattern = extension, full.names = FALSE, recursive = TRUE)
# extract the folder paths for hist plot f-n
folders <- dirname(calibrated_files)
# and the filenames for input in plot histograms f-n by Andy
input_filenames <- basename(calibrated_files)
########## plot initial hostograms ############
# for all files, ploit the histogram using andy's modified function
## added a line or two of code in his f-n to deal with subdirectories
for (i in 1:length(input_filenames)) {
print(input_filenames[[i]])
plot_histograms(folder = folders[[i]],
input_file = input_filenames[[i]],
wd = wd)
}
##### get datasets calibrated data to work with ##########
# get all calibrated tsvs
# wd <- paste0(getwd(), "/")
wd <- "C:/Users/jtzve/Desktop/Sufo_Tyrosine/01_Sulfotyrosine_Data_Processing/batch2_9/"
extension = ".pep_thresholded_calibrated.tsv"
calibrated_files <- list.files(wd, pattern = extension, full.names = FALSE, recursive = TRUE)
# extract the folder paths for hist plot f-n
folders <- dirname(calibrated_files)
# and the filenames for input in plot histograms f-n by Andy
input_filenames <- basename(calibrated_files)
########## plot initial hostograms ############
# for all files, ploit the histogram using andy's modified function
## added a line or two of code in his f-n to deal with subdirectories
for (i in 16:length(input_filenames)) {
print(input_filenames[[i]])
plot_histograms(folder = folders[[i]],
input_file = input_filenames[[i]],
wd = wd)
}
# specify the extension unique to your calibrated files
extension = "thresholded_calibrated.tsv"
batch = "batch2_9/"
# get all calibrated files
calibrated_files <- list.files(paste0(wd, batch), pattern = extension, full.names = TRUE, recursive = TRUE)
# extract the folder paths for hist plot f-n
folders <- dirname(calibrated_files)
# and the filenames for input in plot histograms f-n by Andy
input_filenames <- basename(calibrated_files)
# read in all data one by one into an empty list, setting each data frame as a
# new elemnt of the list.
calibrated_data <- list()
print("reading in data")
for (i in 1:length(calibrated_files)) {
print(calibrated_files[[i]])
calibrated_data[[i]] <- read.csv(calibrated_files[[i]], sep = "\t")
}
# specify the extension unique to your calibrated files
extension = "thresholded_calibrated.tsv"
batch = "batch2_9/"
knitr::opts_chunk$set(echo = FALSE)
# set wd to parent folder
wd <- "C:/Users/jtzve/Desktop/Sufo_Tyrosine/01_Sulfotyrosine_Data_Processing/"
knitr::opts_knit$set(root.dir = wd)
# specify the extension unique to your calibrated files
extension = "thresholded_calibrated.tsv"
batch = "batch2_9/"
# get all calibrated files
calibrated_files <- list.files(paste0(wd, batch), pattern = extension, full.names = TRUE, recursive = TRUE)
batch = "batch2_9"
# get all calibrated files
calibrated_files <- list.files(paste0(wd, batch), pattern = extension, full.names = TRUE, recursive = TRUE)
# extract the folder paths for hist plot f-n
folders <- dirname(calibrated_files)
# and the filenames for input in plot histograms f-n by Andy
input_filenames <- basename(calibrated_files)
# read in all data one by one into an empty list, setting each data frame as a
# new elemnt of the list.
calibrated_data <- list()
print("reading in data")
for (i in 1:length(calibrated_files)) {
print(calibrated_files[[i]])
calibrated_data[[i]] <- read.csv(calibrated_files[[i]], sep = "\t")
}
# we want to add names to the dataframes so they are used e.g. when writing csvs.
# first strip everythign after and including _interact .... .tsv
stripped_filenames <- gsub("_interact.*", "", input_filenames)
# assign this to our list
names(calibrated_data) <- stripped_filenames
# source the PTM filtering function
source("scripts/PTM_filtering_fun.R")
# determine what PTMs are of interest to use in function
PTMs_of_interest = c("S[167]", "T[181]", "Y[243]") # here phosphorylation of S, T, and Y
# for every calibrated dataset
filtered_data <- list()
for (i in 1:length(calibrated_data)) {
#apply the PTM filtering function to only include peptides with phosphtylation
print(i)
filtered_data[[i]] <- FilterPTMs(df = calibrated_data[[i]],
PTMs_of_interest = PTMs_of_interest)
}
# once again set the name for each dataset
names(filtered_data) <- stripped_filenames
gc()
source("scripts/Generate_peptidoform_ID.R")
# add peptidoform ID and its scipher + dataset ID to each dataset to enable subsequent filtering
pepcols <-  c("peptide", "mod_peptide") # cols with peptide and PTM data
# these are defaults, here just for ease
peptidoform_id_summaries <- list()
i = 19
for (i in 1:length(filtered_data)) {
dataset_ID <- names(filtered_data[i])
print(dataset_ID)
print(i/length(filtered_data)*100)
filtered_data[[i]]$dataset_ID <- dataset_ID  # set the dataset ID to its unique folder name
peptidoform_id_summaries[[i]] <- Generate_Peptidoform_ID(df = filtered_data[[i]],
outname = dataset_ID) # set name for saving .csv files
}
