# need to downgrade devtools for biomart to work #stackoverflow
# devtools::install_version("dbplyr", version = "2.3.4")
## for getting next prot and Ref seq IDs from the SwissProt library
split_ids <- function(string) {
# First, try splitting with "; "
split_result <- strsplit(string, "; ")
# If the length of any split_result is 1, it means there was no "; " to split on
# In this case, try splitting with just ";"
if (any(sapply(split_result, length) == 1)) {
split_result <- strsplit(string, ";")
}
return(split_result)
}
## GSEA as an attempt to better reflect how many different peptidoforms map to
# the same protein
counts_based_GSEA <- function(foreground_proteins, termAssociations_df) {
# Count the number of times each protein appears
foreground_protein_counts <- table(foreground_proteins)
# Convert to dataframe
protein_counts_df <- as.data.frame(foreground_protein_counts, stringsAsFactors = FALSE)
names(protein_counts_df) <- c("ProteinID", "Count")
# Create a ranked list based on count
protein_counts_df <- protein_counts_df %>%
arrange(desc(Count))
# Prepare geneList for GSEA
geneList <- setNames(protein_counts_df$Count, protein_counts_df$ProteinID)
# Carry out GSEA
GSEA_BOI <- GSEA(geneList = geneList,
exponent = 1,
minGSSize = 5,
maxGSSize = 500,
eps = 1e-10,
pvalueCutoff = 1,
pAdjustMethod = "BH",
TERM2GENE = termAssociations_df,
TERM2NAME = NA, # Adjust as needed
verbose = TRUE,
seed = FALSE,
by = "fgsea",
scoreType = "pos" # Adjust scoreType as needed
)
return(GSEA_BOI)
}
project_dir = "C:/Users/jtzve/Desktop/Sufo_Tyrosine/07_Enrichment_analysis_custom_background_Sets/"
data_dir <- "C:/Users/jtzve/Desktop/Sufo_Tyrosine/07_Enrichment_analysis_custom_background_Sets/in/"
gc()
# bin data
bin_of_interest <- read.csv(file = paste0(data_dir, "tyrosine_containing_foreground_inSwissProt.tsv"),
header = TRUE,
sep = "\t"
)
BOI_foreground_proteins <- bin_of_interest$cleaned_protein_IDs
# one bin left
DECOY_minus1 <- read.csv(file = paste0(data_dir, "tyrosine_containing_DECOY_minus1_inSwissProt.tsv"),
header = TRUE,
sep = "\t"
)
DM1_foreground_proteins <- DECOY_minus1$cleaned_protein_IDs
# DECOY_minus2 <- read.csv(file = paste0(data_dir, "tyrosine_containing_DECOY_minus2_inSwissProt.tsv"),
#                             header = TRUE,
#                             sep = "\t"
#                             ) ## not read in as no unique entries not already in decoy minus 1
DECOY1 <- read.csv(file = paste0(data_dir, "tyrosine_containing_DECOY1_inSwissProt.tsv"),
header = TRUE,
sep = "\t"
)
D1_foreground_proteins <- DECOY1$cleaned_protein_IDs
DECOY2 <- read.csv(file = paste0(data_dir, "tyrosine_containing_DECOY2_inSwissProt.tsv"),
header = TRUE,
sep = "\t"
)
D2_foreground_proteins <- DECOY2$cleaned_protein_IDs
DECOY3 <- read.csv(file = paste0(data_dir, "tyrosine_containing_DECOY3_inSwissProt.tsv"),
header = TRUE,
sep = "\t"
)
D3_foreground_proteins <- DECOY3$cleaned_protein_IDs
all_bins_background <- read.csv(file = paste0(data_dir, "tyrosine_containing_background_inSwissProt.tsv"),
header = TRUE,
sep = "\t"
)
background_proteins <- unique(all_bins_background$cleaned_protein_IDs)
# protein data from SwissProt
# all of Swiss prot as of 17 Jan 2024
SwissProtHuman <- read.csv(file = paste0(data_dir, "SwissProtLibrary_2024_01_17.tsv"),
header = TRUE,
sep = "\t"
)
# # search result of (proteome:UP000005640) AND (ft_mod_res:sulfotyrosine)
# known_sY <- read.csv(file = paste0(data_dir, "known_sY_SP_2024_02_20.tsv"),
#                             header = TRUE,
#                             sep = "\t"
#                             )
# search result of (proteome:UP000005640) AND (sulfotyrosine) - not specifically in ft mod, one extra protein
known_sY <- read.csv(file = paste0(data_dir, "known_sY_v2_2024_02_26.tsv"),
header = TRUE,
sep = "\t"
)
# # transmembrane and signal peptide (secreted) containing; I decided to subset into sub-groups instead of using this
# potential_sY <- read.csv(file = paste0(data_dir, "potential_sY_SP_2024_02_20.tsv"),
#                             header = TRUE,
#                             sep = "\t"
#                             )
# Split Swiss_Prot_Human$neXtProt and Swiss_Prot_Human$RefSeq into lists of IDs
# Apply the split_ids function I wrote; we will need these
neXtProt_list <- lapply(SwissProtHuman$neXtProt, split_ids)
RefSeq_list <- lapply(SwissProtHuman$RefSeq, split_ids)
# we want our background list to have some sort of terms associated with them.
# we can use the entire SwissProt database as background and create a custom
# list with terms for each entry
# we can do this by assigning a list of terms as follows:
# initialise an empty list to store terms; name entries by protein ID
protein_terms <- vector("list", length = nrow(SwissProtHuman))
names(protein_terms) <- SwissProtHuman$Entry #
# loop through each protein and add terms based on conditions
for (i in 1:nrow(SwissProtHuman)) {
# print(i)
entry <- SwissProtHuman$Entry[i]
terms <- vector("list")
# check the following conditions:
# if the protein is known to have a sY, assign the term "known_sY"
# these are IDs present in known_SY$Entry
if (entry %in% known_sY$Entry) {
terms <- c(terms, "known_sY")
}
# if the protein has a signal peptide assign the term "potential_sY_HasSigPep"
# these are IDs in SwissProtHuman$Entry  where SwissProtHuman$Signal.peptide is != ""
if (SwissProtHuman$Signal.peptide[1] != "") {
terms <- c(terms, "potential_sY_HasSigPep")
}
# if the protein is secreted assign "potential_sY_Secreted"
# these are IDs in SwissProtHuman$Entry  where SwissProtHuman$Subcellular.location..CC. contains 'Secreted'
if (grepl("Secreted", SwissProtHuman$Subcellular.location..CC.[i])) {
terms <- c(terms, "potential_sY_Secreted")
}
# if the protein is transmembrane assign "potential_sY_Transmembrane"
# these are IDs in SwissProtHuman$Entry  where SwissProtHuman$Transmembrane != ""
if (SwissProtHuman$Transmembrane[i] != "") {
terms <- c(terms, "potential_sY_Transmembrane")
}
# if the protein is in the Golgi assign "potential_sY_Golgi"
# these are IDs in SwissProtHuman$Entry wehere SwissProtHuman$Subcellular.location..CC.
# OR SwissProtHuman$Protein.names contain 'Golgi'
if (grepl("Golgi", SwissProtHuman$Subcellular.location..CC.[i]) || grepl("Golgi", SwissProtHuman$Protein.names[i])) {
terms <- c(terms, "potential_sY_Golgi")
}
# if neither of these is true, assign term "unlikely_sY"
if (length(terms) == 0) {
terms <- c(terms, "unlikely_sY")
}
# assign the accumulated terms for this protein ID entry in the list
protein_terms[[entry]] <- terms
}
# now prepare the term associations in a format suitable for the enricher() function:
# TERM2GENE
# user input annotation of TERM TO GENE mapping, a data.frame of 2 column with term and gene.
# initialise vectors to hold terms and their associated genes
terms_vector <- c()
genes_vector <- c()
# Loop through each protein to populate the vectors
for (entry in names(protein_terms)) {
# Get associated terms for each protein
terms <- protein_terms[[entry]]
# Go through each term
for (term in terms) {
# Append the term and protein to the vectors
terms_vector <- c(terms_vector, term)
genes_vector <- c(genes_vector, entry)
}
}
# create the data frame from the vectors
termAssociations_df <- data.frame(term = terms_vector, gene = genes_vector, stringsAsFactors = FALSE)
# display the structure of the data frame to verify
str(termAssociations_df)
ORA_BOI <- enricher(BOI_foreground,
pvalueCutoff = 1,
pAdjustMethod = "BH",
minGSSize = 5,
maxGSSize = 50000,
qvalueCutoff = 1,
TERM2GENE=termAssociations_df,
universe=background_proteins)
BOI_foreground <- bin_of_interest$cleaned_protein_IDs
ORA_BOI <- enricher(BOI_foreground,
pvalueCutoff = 1,
pAdjustMethod = "BH",
minGSSize = 5,
maxGSSize = 50000,
qvalueCutoff = 1,
TERM2GENE=termAssociations_df,
universe=background_proteins)
ORA_BOI_result <- ORA_BOI@result
ORA_BOI_result
ORA_BOI_result
# decpy minus 1 - not really any point doing this one though
ORA_DM1 <- enricher(DM1_foreground_proteins,
pvalueCutoff = 1,
pAdjustMethod = "BH",
minGSSize = 5,
maxGSSize = 50000,
qvalueCutoff = 1,
TERM2GENE=termAssociations_df,
universe=background_proteins)
ORA_DM1_result <- ORA_DM1@result
ORA_DM1_result
# DECOY1
ORA_D1 <- enricher(D1_foreground_proteins,
pvalueCutoff = 1,
pAdjustMethod = "BH",
minGSSize = 1,
maxGSSize = 50000,
qvalueCutoff = 1,
TERM2GENE=termAssociations_df,
universe=background_proteins)
ORA_D1_result <- ORA_D1@result
ORA_D1_result
# DECOY2
ORA_D2 <- enricher(D2_foreground_proteins,
pvalueCutoff = 1,
pAdjustMethod = "BH",
minGSSize = 1,
maxGSSize = 50000,
qvalueCutoff = 1,
TERM2GENE=termAssociations_df,
universe=background_proteins)
ORA_D2_result <- ORA_D2@result
ORA_D2_result
2197/2758
105/116
# DECOY3
ORA_D3 <- enricher(D3_foreground_proteins,
pvalueCutoff = 1,
pAdjustMethod = "BH",
minGSSize = 1,
maxGSSize = 50000,
qvalueCutoff = 1,
TERM2GENE=termAssociations_df,
universe=background_proteins)
ORA_D3_result <- ORA_D3@result
# what if we grouped the bin of interest and bin to the left results since some
# doubly sulfated have slipped there?
combined_BOI__DM1 <- c(BOI_foreground_proteins, DM1_foreground_proteins) %>% unique()
# what if we grouped the bin of interest and bin to the left results since some
# doubly sulfated have slipped there?
combined_BOI__DM1 <- c(BOI_foreground_proteins, DM1_foreground_proteins) %>% unique()
ORA_combined_BOI__DM1 <- enricher(combined_BOI__DM1,
pvalueCutoff = 1,
pAdjustMethod = "BH",
minGSSize = 5,
maxGSSize = 50000,
qvalueCutoff = 1,
TERM2GENE=termAssociations_df,
universe=background_proteins)
combined_BOI__DM1_ORA_results <- enrichResult_nearBOI@result
combined_BOI__DM1_ORA_results <- ORA_combined_BOI__DM1@result
dotplot(ORA_combined_BOI__DM1, showCategory=5)
dotplot(ORA_combined_BOI__DM1, showCategory=5)
ORA_combined_BOI__DM1 <- enricher(combined_BOI__DM1,
pvalueCutoff = 0.05,
pAdjustMethod = "BH",
minGSSize = 5,
maxGSSize = 50000,
qvalueCutoff = 1,
TERM2GENE=termAssociations_df,
universe=background_proteins)
combined_BOI__DM1_ORA_results <- ORA_combined_BOI__DM1@result
dotplot(ORA_combined_BOI__DM1, showCategory=5)
dotplot(ORA_combined_BOI__DM1, showCategory=5)
ORA_combined_BOI__DM1 <- enricher(combined_BOI__DM1,
pvalueCutoff = 0.5,
pAdjustMethod = "BH",
minGSSize = 5,
maxGSSize = 50000,
qvalueCutoff = 1,
TERM2GENE=termAssociations_df,
universe=background_proteins)
combined_BOI__DM1_ORA_results <- ORA_combined_BOI__DM1@result
dotplot(ORA_combined_BOI__DM1, showCategory=5)
dotplot(ORA_combined_BOI__DM1, showCategory=5)
ORA_combined_BOI__DM1 <- enricher(combined_BOI__DM1,
pvalueCutoff = 1,
pAdjustMethod = "BH",
minGSSize = 5,
maxGSSize = 50000,
qvalueCutoff = 1,
TERM2GENE=termAssociations_df,
universe=background_proteins)
plusDECOYS_all <- c(D1_foreground_proteins, D2_foreground_proteins, D3_foreground_proteins) %>% unique()
ORA_plusDECOYS_all <- enricher(plusDECOYS_all,
pvalueCutoff = 1,
pAdjustMethod = "BH",
minGSSize = 1,
maxGSSize = 50000,
qvalueCutoff = 1,
TERM2GENE=termAssociations_df,
universe=background_proteins)
ORA_plusDECOYS_all <- enricher(plusDECOYS_all,
pvalueCutoff = 1,
pAdjustMethod = "BH",
minGSSize = 1,
maxGSSize = 50000,
qvalueCutoff = 1,
TERM2GENE=termAssociations_df,
universe=background_proteins)
View(termAssociations_df)
grouped_term_associations_df <- termAssociations_df[,1]
grouped_term_associations_df <- termAssociations_df %>%
mutate(Column2 = if_else(Column2 == 'unlikely_sY', 'unlikely_sY', 'likely_sY'))
names(termAssociations_df)
View(termAssociations_df)
grouped_term_associations_df <- termAssociations_df %>%
mutate(term = if_else(term == 'unlikely_sY', 'unlikely_sY', 'likely_sY'))
View(grouped_term_associations_df)
grouped_term_associations_df <- termAssociations_df %>%
mutate(term = if_else(term == 'unlikely_sY', 'unlikely_sY', 'likely_sY')) %>%
unique()
View(grouped_term_associations_df)
names(grouped_term_associations_df)
# use this new mapping for ORA
ORA_combined_BOI__DM1_grouped_terms <- enricher(combined_BOI__DM1,
pvalueCutoff = 1,
pAdjustMethod = "BH",
minGSSize = 5,
maxGSSize = 50000,
qvalueCutoff = 1,
TERM2GENE=grouped_term_associations_df,
universe=background_proteins)
combined_BOI__DM1_ORA_grouped_terms_results <- ORA_combined_BOI__DM1_grouped_terms@result
dotplot(ORA_combined_BOI__DM1_grouped_terms, showCategory=5)
combined_BOI__DM1_ORA_grouped_terms_results
15/66
561/2758
ORA_plusDECOYS_all_grouped_terms <- enricher(plusDECOYS_all,
pvalueCutoff = 1,
pAdjustMethod = "BH",
minGSSize = 1,
maxGSSize = 50000,
qvalueCutoff = 1,
TERM2GENE=grouped_term_associations_df,
universe=background_proteins)
ORA_plusDECOYS_all_grouped_terms_results <- ORA_plusDECOYS_all_grouped_terms@result
dotplot(ORA_plusDECOYS_all_grouped_terms, showCategory=5)
ORA_plusDECOYS_all_grouped_terms_results
GSEA_BOI <- counts_based_GSEA(BOI_foreground_proteins, termAssociations_df)
GSEA_BOI_results <- GSEA_BOI@result
GSEA_BOI_results
GSEA_BOI <- counts_based_GSEA(BOI_foreground_proteins, termAssociations_df)
GSEA_BOI <- counts_based_GSEA(BOI_foreground_proteins, termAssociations_df)
GSEA_BOI_results <- GSEA_BOI@result
GSEA_BOI_grouped_terms <- counts_based_GSEA(BOI_foreground_proteins, grouped_term_associations_df)
GSEA_BOI_results_grouped_terms <- GSEA_BOI_grouped_terms@result
GSEA_BOI_results_grouped_terms
# DECOY1
GSEA_D1 <- counts_based_GSEA(D1_foreground_proteins, termAssociations_df)
GSEA_D1_results <- GSEA_D1@result
GSEA_D1_results
# combined BOI and DEcoy minus 1 bin
combined_BOI__DM1 <- c(BOI_foreground_proteins, DM1_foreground_proteins)
GSEA_BOU_DM1 <- counts_based_GSEA(combined_BOI__DM1, termAssociations_df)
# combined BOI and DEcoy minus 1 bin
setdiff(DM1_foreground_proteins, BOI_foreground_proteins)
DM1_foreground_proteins
setdiff(BOI_foreground_proteins, DM1_foreground_proteins)
# combined BOI and DEcoy minus 1 bin
combined_BOI__DM1 <- c(BOI_foreground_proteins, DM1_foreground_proteins)
GSEA_BOU_DM1 <- counts_based_GSEA(combined_BOI__DM1, termAssociations_df)
GSEA_BOU_DM1_results <- GSEA_BOU_DM1@result
GSEA_BOU_DM1_results
## this iskind of incorrect - need to remove some of the overlapping terms
setdiff(DECOY_minus1, bin_of_interest)
## this iskind of incorrect - need to remove some of the overlapping terms
setdiff(DECOY_minus1$peptidoform_id, bin_of_interest$peptidoform_id)
## this iskind of incorrect - need to remove some of the overlapping terms
new_peptidoforms <- setdiff(DECOY_minus1$peptidoform_id, bin_of_interest$peptidoform_id)
new_proteins <- DECOY_minus1[DECOY_minus1$peptidoform_id %in% new_peptidoforms, ]
new_proteins
new_proteins <- DECOY_minus1$cleaned_protein_IDs[DECOY_minus1$peptidoform_id %in% new_peptidoforms]
new_proteins
combined_BOI_DM1_forGSEA <- c(BOI_foreground_proteins, new_proteins)
GSEA_BOU_DM1 <- counts_based_GSEA(combined_BOI_DM1_forGSEA, termAssociations_df)
GSEA_BOU_DM1_results <- GSEA_BOU_DM1@result
GSEA_BOU_DM1_results
GSEA_BOI_results
GSEA_BOU_DM1_grouped_terms <- counts_based_GSEA(combined_BOI_DM1_forGSEA, grouped_term_associations_df)
GSEA_BOU_DM1_results_grouped_terms <- GSEA_BOU_DM1_grouped_terms@result
GSEA_BOU_DM1_results_grouped_terms
GSEA_D1_results
GSEA_D1_grouped_terms <- counts_based_GSEA(D1_foreground_proteins, grouped_term_associations_df)
GSEA_D1_results_grouped_terms <- GSEA_D1_grouped_terms@result
GSEA_D1_results_grouped_terms
# DECOY2
GSEA_D2 <- counts_based_GSEA(D2_foreground_proteins, termAssociations_df)
GSEA_D2_results <- GSEA_D2@result
GSEA_D2_grouped_terms <- counts_based_GSEA(D2_foreground_proteins, grouped_term_associations_df)
GSEA_D2_results_grouped_terms <- GSEA_D2_grouped_terms@result
GSEA_D2_results
GSEA_D2_results_grouped_terms
GSEA_D2_results
GSEA_D3 <- counts_based_GSEA(D3_foreground_proteins, termAssociations_df)
GSEA_D3_results <- GSEA_D3@result
GSEA_D3_grouped_terms <- counts_based_GSEA(D3_foreground_proteins, grouped_term_associations_df)
GSEA_D3_results_grouped_terms <- GSEA_D3_grouped_terms@result
GSEA_D3_results
GSEA_D3_results_grouped_terms
library(tidyverse)
library(stringr)
library(dplyr)
library(clusterProfiler)
library(org.Hs.eg.db)
library(biomaRt)
library(devtools)
# BiocManager::install("enrichplot")
library(enrichplot)
library(BiocFileCache)
library(dbplyr)
# need to downgrade devtools for biomart to work #stackoverflow
# devtools::install_version("dbplyr", version = "2.3.4")
## GSEA as an attempt to better reflect how many different peptidoforms map to
# the same protein
counts_based_GSEA <- function(foreground_proteins, termAssociations_df) {
# Count the number of times each protein appears
foreground_protein_counts <- table(foreground_proteins)
# Convert to dataframe
protein_counts_df <- as.data.frame(foreground_protein_counts, stringsAsFactors = FALSE)
names(protein_counts_df) <- c("ProteinID", "Count")
# Create a ranked list based on count
protein_counts_df <- protein_counts_df %>%
arrange(desc(Count))
# Prepare geneList for GSEA
geneList <- setNames(protein_counts_df$Count, protein_counts_df$ProteinID)
# Carry out GSEA
GSEA_BOI <- GSEA(geneList = geneList,
exponent = 1,
minGSSize = 5,
maxGSSize = 500,
eps = 1e-10,
pvalueCutoff = 1,
pAdjustMethod = "BH",
TERM2GENE = termAssociations_df,
TERM2NAME = NA, # Adjust as needed
verbose = TRUE,
seed = FALSE,
by = "fgsea",
scoreType = "pos" # Adjust scoreType as needed
)
results <- GSEA_BOI@result
# file_name = # write code to set file name to the function variable names used as inputseparated by _: e.g. if foreground_proteins = bin_ofinterest_foreground
# and termAssociations_df = termAssociations_df file name should be GSEA_bin_ofinterest_foreground_termAssociations_df_results.csv
# add a line to save results as file_name.csv
# Dynamic file naming based on input variable names
foreground_var_name <- deparse(substitute(foreground_proteins))
term_assoc_var_name <- deparse(substitute(termAssociations_df))
file_name <- paste0("GSEA_", foreground_var_name, "_", term_assoc_var_name, "_results.csv")
# Save results to CSV
write.csv(results, file_name, row.names = FALSE)
return(GSEA_BOI)
}
# bin of interest
GSEA_BOI <- counts_based_GSEA(BOI_foreground_proteins, termAssociations_df)
GSEA_BOI_results <- GSEA_BOI@result
GSEA_BOI_grouped_terms <- counts_based_GSEA(BOI_foreground_proteins, grouped_term_associations_df)
GSEA_BOI_results_grouped_terms <- GSEA_BOI_grouped_terms@result
## this iskind of incorrect - need to remove some of the overlapping terms based
# on peptidoform id; only proteins associated to unique ids to decoy-1 bin to be added
new_peptidoforms <- setdiff(DECOY_minus1$peptidoform_id, bin_of_interest$peptidoform_id)
new_proteins <- DECOY_minus1$cleaned_protein_IDs[DECOY_minus1$peptidoform_id %in% new_peptidoforms]
combined_BOI_DM1_forGSEA <- c(BOI_foreground_proteins, new_proteins)
GSEA_BOU_DM1 <- counts_based_GSEA(combined_BOI_DM1_forGSEA, termAssociations_df)
GSEA_BOU_DM1_results <- GSEA_BOU_DM1@result
GSEA_BOU_DM1_grouped_terms <- counts_based_GSEA(combined_BOI_DM1_forGSEA, grouped_term_associations_df)
GSEA_BOU_DM1_grouped_terms <- counts_based_GSEA(combined_BOI_DM1_forGSEA, grouped_term_associations_df)
GSEA_BOU_DM1_results_grouped_terms <- GSEA_BOU_DM1_grouped_terms@result
# DECOYs
# DECOY1
GSEA_D1 <- counts_based_GSEA(D1_foreground_proteins, termAssociations_df)
GSEA_D1_results <- GSEA_D1@result
GSEA_D1_grouped_terms <- counts_based_GSEA(D1_foreground_proteins, grouped_term_associations_df)
GSEA_D1_results_grouped_terms <- GSEA_D1_grouped_terms@result
# DECOY2
GSEA_D2 <- counts_based_GSEA(D2_foreground_proteins, termAssociations_df)
GSEA_D2_results <- GSEA_D2@result
GSEA_D2_grouped_terms <- counts_based_GSEA(D2_foreground_proteins, grouped_term_associations_df)
GSEA_D2_results_grouped_terms <- GSEA_D2_grouped_terms@result
GSEA_D3 <- counts_based_GSEA(D3_foreground_proteins, termAssociations_df)
GSEA_D3_results <- GSEA_D3@result
GSEA_D3_grouped_terms <- counts_based_GSEA(D3_foreground_proteins, grouped_term_associations_df)
GSEA_D3_results_grouped_terms <- GSEA_D3_grouped_terms@result
write.csv(ORA_BOI_result, "ORA_BOI_result.csv", row.names = FALSE)
write.csv(ORA_DM1_result, "ORA_DM1_result", row.names = FALSE)
write.csv(ORA_D1_result, "ORA_D1_result", row.names = FALSE)
write.csv(ORA_D2_result, "ORA_D2_result.csv", row.names = FALSE)
write.csv(ORA_D1_result, "ORA_D1_result.csv", row.names = FALSE)
write.csv(ORA_DM1_result, "ORA_DM1_result.csv", row.names = FALSE)
write.csv(ORA_D3_result, "ORA_D3_result.csv", row.names = FALSE)
write.csv(combined_BOI__DM1_ORA_results, "combined_BOI__DM1_ORA_results.csv", row.names = FALSE)
write.csv(ORA_plusDECOYS_all_results, "ORA_plusDECOYS_all_results.csv", row.names = FALSE)
plusDECOYS_all <- c(D1_foreground_proteins, D2_foreground_proteins, D3_foreground_proteins) %>% unique()
ORA_plusDECOYS_all <- enricher(plusDECOYS_all,
pvalueCutoff = 1,
pAdjustMethod = "BH",
minGSSize = 1,
maxGSSize = 50000,
qvalueCutoff = 1,
TERM2GENE=termAssociations_df,
universe=background_proteins)
ORA_plusDECOYS_all_results <- ORA_plusDECOYS_all@result
write.csv(ORA_plusDECOYS_all_results, "ORA_plusDECOYS_all_results.csv", row.names = FALSE)
grouped_term_associations_df <- termAssociations_df %>%
mutate(term = if_else(term == 'unlikely_sY', 'unlikely_sY', 'likely_sY')) %>%
unique()
write.csv(combined_BOI__DM1_ORA_grouped_terms_results, "combined_BOI__DM1_ORA_grouped_terms_results.csv", row.names = FALSE)
write.csv(ORA_plusDECOYS_all_grouped_terms_results, "ORA_plusDECOYS_all_grouped_terms_results.csv", row.names = FALSE)
