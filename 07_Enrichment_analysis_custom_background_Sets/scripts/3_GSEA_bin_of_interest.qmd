---
title: "Post_GMM_Analysis"
format: pdf
editor: visual
---

```{r libraries, echo=FALSE}
library(tidyverse)
library(stringr) 
library(dplyr)
library(clusterProfiler)
library(org.Hs.eg.db)
library(biomaRt)
library(devtools)

```
```{r functions}

## for getting next prot and Ref seq IDs from the SwissProt library
split_ids <- function(string) {
  # First, try splitting with "; "
  split_result <- strsplit(string, "; ")
  # If the length of any split_result is 1, it means there was no "; " to split on
  # In this case, try splitting with just ";"
  if (any(sapply(split_result, length) == 1)) {
    split_result <- strsplit(string, ";")
  }
  return(split_result)
}


```

```{r directories, echo=FALSE}
project_dir = "C:/Users/jtzve/Desktop/Sufo_Tyrosine/07_Enrichment_analysis_custom_background_Sets/"
data_dir <- "C:/Users/jtzve/Desktop/Sufo_Tyrosine/07_Enrichment_analysis_custom_background_Sets/in/"
gc()
```
```{r data_read_in}
# bin data
bin_of_interest <- read.csv(file = paste0(data_dir, "tyrosine_containing_foreground_inSwissProt.tsv"), 
                            header = TRUE,
                            sep = "\t"
                            )

all_bins_background <- read.csv(file = paste0(data_dir, "tyrosine_containing_background_inSwissProt.tsv"), 
                            header = TRUE,
                            sep = "\t"
                            )

# protein data from SwissProt
SwissProtHuman <- read.csv(file = paste0(data_dir, "SwissProtLibrary_2024_01_17.tsv"), 
                            header = TRUE,
                            sep = "\t"
                            )
known_sY <- read.csv(file = paste0(data_dir, "known_sY_SP_2024_02_20.tsv"), 
                            header = TRUE,
                            sep = "\t"
                            )
potential_sY <- read.csv(file = paste0(data_dir, "potential_sY_SP_2024_02_20.tsv"), 
                            header = TRUE,
                            sep = "\t"
                            )
```



```{r proteinID_foreground}
# run cleaning to retain SwissProt entry only
# Split Swiss_Prot_Human$neXtProt and Swiss_Prot_Human$RefSeq into lists of IDs
  # Apply the split_ids function I wrote; we will need these 
neXtProt_list <- lapply(SwissProtHuman$neXtProt, split_ids)
RefSeq_list <- lapply(SwissProtHuman$RefSeq, split_ids)





```

```{r cluster_profiler_prepare_inputs_for_GOterms}

library(BiocFileCache)
library(dbplyr)
# need to downgrade devtools for biomart to work #stackoverflow
devtools::install_version("dbplyr", version = "2.3.4")



## convert the SwissProt IDs to Ensembl gene IDs
# Connect to the Ensembl database
# ensembl <- useMart("ensembl", dataset = "hsapiens_gene_ensembl")
ensembl <- useEnsembl(biomart = "ensembl", dataset = "hsapiens_gene_ensembl")

# Get the corresponding Entrez IDs for all UniProt IDs that we can
Uniprot = getBM(
  attributes=c('ensembl_gene_id','uniprotswissprot'), 
  mart = ensembl)

# 84 of our background IDs do not have an ENSEMBL gene ID (via biomart):
sum(!tyrosines_containing_background_inSwissProt$cleaned_protein_IDs %in% Uniprot$uniprotswissprot)
# 0 of our foreground IDs do not have an ENSEMBL gene ID (via biomart):
sum(!tyrosines_containing_foreground_inSwissProt$cleaned_protein_IDs %in% Uniprot$uniprotswissprot)



# convert swiss prot to ensembl gene ids and remove unmatched
background_genes <- extractEnsemblGeneIDs(tyrosines_containing_background_inSwissProt, Uniprot)

# For foreground dataset
foreground_genes <- extractEnsemblGeneIDs(tyrosines_containing_foreground_inSwissProt, Uniprot)

# do the same for each DECOY dataset
# 
# # Initialize a list to store the Ensembl gene IDs for each decoy dataset
# DECOY_genes_list <- list()
# 
# # Loop through each decoy dataset, extract Ensembl gene IDs, and store them in the list
# for (i in 1:length(DECOY_bins_list)) {
#   decoy_genes <- extractEnsemblGeneIDs(DECOY_bins_list[[i]], Uniprot)
#   DECOY_genes_list[[i]] <- decoy_genes
# }

```




```{r GSEA_ranked_protein_list_custom_background}
# we need to count how many times a gene id appears to rank the genes in the foreground

# these are all proteins
foreground_proteins <- tyrosines_containing_foreground_inSwissProt$cleaned_protein_IDs

# create a ranked list where you keep track of how many times a protein appears and rank the ones with highest count as the top rank

# count number of times
foreground_protein_counts <- table(foreground_proteins)
class(foreground_protein_counts)

#convert to df
protein_counts_df <- as.data.frame(foreground_protein_counts, stringsAsFactors=FALSE)
names(protein_counts_df) <- c("ProteinID", "Count")


# sort in descending order by count and pull the list of proteins to create a ranked list:

ranked_proteins_list <- protein_counts_df %>% arrange(desc(Count)) %>% pull(Count, ProteinID)



```



