source("PTM_filtering_fun.R") # filter peptides by PTMs to only include phosphorylated - my function
source("Summarise_by_peptidoform_fun.R") # for each dataset summarise the mass shift for each unique peptidoform - my function
##### get datasets calibrated data to work with ##########
# get all calibrated tsvs
wd <- paste0(getwd(), "/")
extension = ".pep_calibrated.tsv"
calibrated_files <- list.files(wd, pattern = extension, full.names = FALSE, recursive = TRUE)
# extract the folder paths for hist plot f-n
folders <- dirname(calibrated_files)
# and the filenames for input in plot histograms f-n by Andy
input_filenames <- basename(calibrated_files)
# read in all data one by one into an empty list, setting each data frame as a
# new elemnt of the list.
calibrated_data <- list()
for (i in 1:length(calibrated_files)) {
calibrated_data[[i]] <- read.csv(calibrated_files[[i]], sep = "\t")
}
# read in all data one by one into an empty list, setting each data frame as a
# new elemnt of the list.
calibrated_data <- list()
# we want to add names to the dataframes so they are used e.g. when writing csvs.
# first strip everythign after and including _interact .... .tsv
stripped_filenames <- gsub("_interact.*", "", input_filenames)
# read in all data one by one into an empty list, setting each data frame as a
# new elemnt of the list.
calibrated_data <- list()
print("reading in data")
for (i in 1:length(calibrated_files)) {
print(calibrated_files[[i]])
calibrated_data[[i]] <- read.csv(calibrated_files[[i]], sep = "\t")
}
# we want to add names to the dataframes so they are used e.g. when writing csvs.
# first strip everythign after and including _interact .... .tsv
stripped_filenames <- gsub("_interact.*", "", input_filenames)
# assign this to our list
names(calibrated_data) <- stripped_filenames
########## filter all data to only include peptides with phospho PTMs ##########
#determine which columns of the data you would like to continue workinbg with.
colstokeep <- c("ppm_error", "da_error", "calibrated_error", "peptide",
"mod_peptide") # must have this col to filter!
# determine what PTMs are of interest
PTMs_of_interest = c("S[167]", "T[181]", "Y[243]") # here phosphorylation of S, T, and Y
# for every calibrated dataset
filtered_data <- list()
# for every calibrated dataset
filtered_data <- list()
for (i in 1:length(calibrated_data)) {
#apply the PTM filtering function to only include peptides with phosphtylation
print(i)
filtered_data[[i]] <- FilterPTMs(df = calibrated_data[[i]],
pepcols = colstokeep,
PTMs_of_interest = PTMs_of_interest)
}
# add names just in case
names(filtered_data) <- stripped_filenames
####### summarise data by unique peptidoform ##########
# define which parameters you want summarised by peptidoform
columns_of_interest <- c("calibrated_error") # e.g. cols for histogram plotting
pepcols <-  c("peptide", "mod_peptide") # cols with peptide and PTM data
# these are defaults, here just for ease
peptidoform_id_summaries <- list()
for (i in 1:length(filtered_data)) {
#apply the PTM filtering function to only include peptides with phosphtylation
output_name <- names(filtered_data[i])
print(output_name)
peptidoform_id_summaries[[i]] <- Summarise_By_Peptidoform(df = filtered_data[[i]],
columns_to_summarise =  columns_of_interest,
pepcols = pepcols,
outname = output_name)
}
source("Summarise_by_peptidoform_fun.R") # for each dataset summarise the mass shift for each unique peptidoform - my function
# these are defaults, here just for ease
peptidoform_id_summaries <- list()
for (i in 1:length(filtered_data)) {
#apply the PTM filtering function to only include peptides with phosphtylation
output_name <- names(filtered_data[i])
print(output_name)
peptidoform_id_summaries[[i]] <- Summarise_By_Peptidoform(df = filtered_data[[i]],
columns_to_summarise =  columns_of_interest,
pepcols = pepcols,
outname = output_name)
}
##### get datasets calibrated data to work with ##########
# get all calibrated tsvs
wd <- paste0(getwd(), "/")
extension = ".pep_calibrated.tsv"
calibrated_files <- list.files(wd, pattern = extension, full.names = FALSE, recursive = TRUE)
# extract the folder paths for hist plot f-n
folders <- dirname(calibrated_files)
# and the filenames for input in plot histograms f-n by Andy
input_filenames <- basename(calibrated_files)
input_filenames
write.csv(input_filenames, file = "../metadata/filenames.csv")
##### get datasets calibrated data to work with ##########
# get all calibrated tsvs
wd <- paste0(getwd(), "/")
extension = ".pep_calibrated.tsv"
calibrated_files <- list.files(wd, pattern = extension, full.names = FALSE, recursive = TRUE)
# extract the folder paths for hist plot f-n
folders <- dirname(calibrated_files)
# and the filenames for input in plot histograms f-n by Andy
input_filenames <- basename(calibrated_files)
write.csv(input_filenames, file = "../metadata/filenames.csv")
gc()
reticulate::repl_python()
knitr::opts_chunk$set(echo = FALSE)
reticulate::repl_python()
getwd()
extension = "thresholded_calibrated.tsv.tsv"
getwd()
extension = "thresholded_calibrated.tsv.tsv"
setwd("C:/Users/jtzve/Desktop/Sufo_Tyrosine/01_Sulfotyrosine_Data_Processing/")
extension = "thresholded_calibrated.tsv.tsv"
knitr::opts_chunk$set(echo = FALSE)
root.dir("C:/Users/jtzve/Desktop/Sufo_Tyrosine/01_Sulfotyrosine_Data_Processing/")
knitr::opts_chunk$set(echo = FALSE)
knitr::root.dir("C:/Users/jtzve/Desktop/Sufo_Tyrosine/01_Sulfotyrosine_Data_Processing/")
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_knit$set(root.dir = "C:/Users/jtzve/Desktop/Sufo_Tyrosine/01_Sulfotyrosine_Data_Processing/")
getwd()
knitr::opts_chunk$set(root.dir = "C:/Users/jtzve/Desktop/Sufo_Tyrosine/01_Sulfotyrosine_Data_Processing/")
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(root.dir = "C:/Users/jtzve/Desktop/Sufo_Tyrosine/01_Sulfotyrosine_Data_Processing/")
knitr::opt_knit$set(root.dir = "C:/Users/jtzve/Desktop/Sufo_Tyrosine/01_Sulfotyrosine_Data_Processing/")
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(root.dir = "C:/Users/jtzve/Desktop/Sufo_Tyrosine/01_Sulfotyrosine_Data_Processing/")
knitr::opts_knit$set(root.dir = "C:/Users/jtzve/Desktop/Sufo_Tyrosine/01_Sulfotyrosine_Data_Processing/")
getwd()
getwd()
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(root.dir = "C:/Users/jtzve/Desktop/Sufo_Tyrosine/01_Sulfotyrosine_Data_Processing/")
knitr::opts_knit$set(root.dir = "C:/Users/jtzve/Desktop/Sufo_Tyrosine/01_Sulfotyrosine_Data_Processing/")
getwd()
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(root.dir = "C:/Users/jtzve/Desktop/Sufo_Tyrosine/")
knitr::opts_knit$set(root.dir = "C:/Users/jtzve/Desktop/Sufo_Tyrosine/01_Sulfotyrosine_Data_Processing/")
getwd()
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_knit$set(root.dir = "C:/Users/jtzve/Desktop/Sufo_Tyrosine/01_Sulfotyrosine_Data_Processing/")
getwd()
knitr::opts_chunk$set(echo = FALSE)
# set wd to parent folder
knitr::opts_knit$set(root.dir = "C:/Users/jtzve/Desktop/Sufo_Tyrosine/01_Sulfotyrosine_Data_Processing/")
extension = "thresholded_calibrated.tsv.tsv"
# get all files with the extension
calibrated_files <- list.files(wd, pattern = extension, full.names = FALSE, recursive = TRUE)
knitr::opts_chunk$set(echo = FALSE)
# set wd to parent folder
wd <- "C:/Users/jtzve/Desktop/Sufo_Tyrosine/01_Sulfotyrosine_Data_Processing/"
knitr::opts_knit$set(root.dir = wd)
extension = "thresholded_calibrated.tsv.tsv"
# get all files with the extension
calibrated_files <- list.files(wd, pattern = extension, full.names = FALSE, recursive = TRUE)
extension = "thresholded_calibrated.tsv"
# get all files with the extension
calibrated_files <- list.files(wd, pattern = extension, full.names = FALSE, recursive = TRUE)
# specify the extension unique to your calibrated files
extension = "thresholded_calibrated.tsv"
# get all calibrated files
calibrated_files <- list.files(wd, pattern = extension, full.names = FALSE, recursive = TRUE)
# specify the extension unique to your calibrated files
extension = "thresholded_calibrated.tsv"
# get all calibrated files
calibrated_files <- list.files(wd, pattern = extension, full.names = FALSE, recursive = TRUE)
# extract the folder paths for hist plot f-n
folders <- dirname(calibrated_files)
# and the filenames for input in plot histograms f-n by Andy
input_filenames <- basename(calibrated_files)
# specify the extension unique to your calibrated files
extension = "thresholded_calibrated.tsv"
# get all calibrated files
calibrated_files <- list.files(wd, pattern = extension, full.names = FALSE, recursive = TRUE)
# extract the folder paths for hist plot f-n
folders <- dirname(calibrated_files)
# and the filenames for input in plot histograms f-n by Andy
input_filenames <- basename(calibrated_files)
# read in all data one by one into an empty list, setting each data frame as a
# new elemnt of the list.
calibrated_data <- list()
print("reading in data")
for (i in 1:length(calibrated_files)) {
print(calibrated_files[[i]])
calibrated_data[[i]] <- read.csv(calibrated_files[[i]], sep = "\t")
}
# we want to add names to the dataframes so they are used e.g. when writing csvs.
# first strip everythign after and including _interact .... .tsv
stripped_filenames <- gsub("_interact.*", "", input_filenames)
stripped_filenames
# assign this to our list
names(calibrated_data) <- stripped_filenames
head(calibrated_data[[1]])
# source the PTM filtering function
source("scripts/PTM_filtering_fun.R")
# for every calibrated dataset
filtered_data <- list()
for (i in 34:length(calibrated_data)) {
#apply the PTM filtering function to only include peptides with phosphtylation
print(i)
filtered_data[[i]] <- FilterPTMs(df = calibrated_data[[i]],
PTMs_of_interest = PTMs_of_interest)
}
# determine what PTMs are of interest to use in function
PTMs_of_interest = c("S[167]", "T[181]", "Y[243]") # here phosphorylation of S, T, and Y
# for every calibrated dataset
filtered_data <- list()
for (i in 34:length(calibrated_data)) {
#apply the PTM filtering function to only include peptides with phosphtylation
print(i)
filtered_data[[i]] <- FilterPTMs(df = calibrated_data[[i]],
PTMs_of_interest = PTMs_of_interest)
}
# for every calibrated dataset
filtered_data <- list()
for (i in 1:length(calibrated_data)) {
#apply the PTM filtering function to only include peptides with phosphtylation
print(i)
filtered_data[[i]] <- FilterPTMs(df = calibrated_data[[i]],
PTMs_of_interest = PTMs_of_interest)
}
names(filtered_data) <- stripped_filenames
# then remove the list of read in data to free memory
rm(calibrated_data)
gc()
gc()
# add peptidoform ID and scipher to each dataset
for (i in 1:length(filtered_data)) {
#apply the PTM filtering function to only include peptides with phosphtylation
print(names(filtered_data[i]))
newcol <- rep(names(filtered_data[i]), nrow(filtered_data[[i]]))
}
for (i in 34:length(filtered_data)) {
dataset_ID <- names(filtered_data[i]) # set the dataset ID to its unique folder name
filtered_data[[i]]$dataset_ID <- dataset_ID
#newcol <- rep(names(filtered_data[i]), nrow(filtered_data[[i]])) #
}
filtered_data[[34]]$dataset_ID
# add peptidoform ID and its scipher + dataset ID to each dataset to enable subsequent filtering
source("scripts/Generate_peptidoform_ID.R")
source("scripts/Generate_peptidoform_ID.R")
source("scripts/Generate_peptidoform_ID.R")
# add peptidoform ID and its scipher + dataset ID to each dataset to enable subsequent filtering
pepcols <-  c("peptide", "mod_peptide") # cols with peptide and PTM data
# these are defaults, here just for ease
peptidoform_id_summaries <- list()
for (i in 34:length(filtered_data)) {
dataset_ID <- names(filtered_data[i])
print(dataset_ID)
filtered_data[[i]]$dataset_ID <- dataset_ID  # set the dataset ID to its unique folder name
peptidoform_id_summaries[[i]] <- Summarise_By_Peptidoform(df = filtered_data[[i]],
outname = dataset_ID) # set name for saving .csv files
}
head(peptidoform_id_summaries[[34]])
source("scripts/Generate_peptidoform_ID.R")
# add peptidoform ID and its scipher + dataset ID to each dataset to enable subsequent filtering
pepcols <-  c("peptide", "mod_peptide") # cols with peptide and PTM data
# these are defaults, here just for ease
peptidoform_id_summaries <- list()
for (i in 1:length(filtered_data)) {
dataset_ID <- names(filtered_data[i])
print(dataset_ID)
filtered_data[[i]]$dataset_ID <- dataset_ID  # set the dataset ID to its unique folder name
peptidoform_id_summaries[[i]] <- Summarise_By_Peptidoform(df = filtered_data[[i]],
outname = dataset_ID) # set name for saving .csv files
}
names(filtered_data)
dataset_ID <- names(filtered_data[34])
print(dataset_ID)
filtered_data[[i]]$dataset_ID <- dataset_ID  # set the dataset ID to its unique folder name
peptidoform_id_summaries[[i]] <- Summarise_By_Peptidoform(df = filtered_data[[i]],
outname = dataset_ID) # set name for saving .csv files
head(peptidoform_id_summaries)
