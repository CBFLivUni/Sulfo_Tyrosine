# 1) check if any of the IDs have a hit in Swiss_Prot_Human$Entry
# if yes replace that sublist with only the IDs with a hit (unlikely to be multiple)
# 2) if not check if any of the IDs have a hit in Swiss_Prot_Human$neXtProt
# if yes retrieve the Swiss_Prot_Human$Entry for that row of Siwss_Prot_Human, then retain that Entry ID and replace the sublist with it
# 3) if not, check if any of the IDs have a hit in Swiss_Prot_Human$RefSeq
# if yes retrieve the Swiss_Prot_Human$Entry for that row of Siwss_Prot_Human, then retain that Entry ID and replace the sublist with it
# if not keep the sublist as it is
process_sublist <- function(sublist, Swiss_Prot_Human, neXtProt_list, RefSeq_list) {
# Check for hits in Swiss_Prot_Human$Entry
entry_hits <- sublist[sublist %in% Swiss_Prot_Human$Entry]
if (length(entry_hits) > 0) {
return(entry_hits)
}
# Check for hits in Swiss_Prot_Human$neXtProt
for (id in sublist) {
if (any(sapply(neXtProt_list, function(x) id %in% x))) {
matching_row <- which(sapply(neXtProt_list, function(x) id %in% x))
return(Swiss_Prot_Human$Entry[matching_row])
}
}
# Check for hits in Swiss_Prot_Human$RefSeq
for (id in sublist) {
if (any(sapply(RefSeq_list, function(x) id %in% x))) {
matching_row <- which(sapply(RefSeq_list, function(x) id %in% x))
return(Swiss_Prot_Human$Entry[matching_row])
}
}
# If no matches, return the original sublist
return(sublist)
}
#### subsetting swiss prot gene ids amnd returning uniprot ones for enrichment
extractEnsemblGeneIDs <- function(dataSet, uniprotMapping) {
# subset to only include IDs present in UniProt mapping
subsetData <- dataSet[dataSet$cleaned_protein_IDs %in% uniprotMapping$uniprotswissprot,]
# match SwissProt IDs in the UniProt data frame to get the position index
matchedIndices <- match(subsetData$cleaned_protein_IDs, uniprotMapping$uniprotswissprot)
# rxtract corresponding ENSEMBL Gene IDs
ensemblGeneIDs <- uniprotMapping$ensembl_gene_id[matchedIndices]
# remove NAs if any (in case some SwissProt IDs didn't have a match)
ensemblGeneIDs <- na.omit(ensemblGeneIDs)
return(ensemblGeneIDs)
}
# TODO: turn beow into a function to keep my environment tidy?
# # List of all objects in the environment
# all_objects <- ls()
#
# # List of objects to keep (replace these with your actual data object names)
# data_objects <- c("postGMM_data")
#
# # Objects to remove
# objects_to_remove <- setdiff(all_objects, data_objects)
#
# # Remove the objects
# rm(list = objects_to_remove)
#
# # Clear objects_to_remove to clean up
# rm(objects_to_remove)
#
# rm("all_objects", "data_objects")
# specify the extension unique to your calibrated files
extension = "inSwissProt"
# get all files of interest
bin_data_files <- list.files(data_dir, pattern = extension, full.names = TRUE, recursive = TRUE)
# and get file path (not reltive!)
input_filenames <- basename(bin_data_files)
# read in all data one by one into an empty list, setting each data frame as a
# new elemnt of the list.
postGMM_data <- list()
print("reading in data")
for (i in 1:length(bin_data_files)) {
print(bin_data_files[[i]])
postGMM_data[[i]] <- read.csv(bin_data_files[[i]], sep =  "\t")
print(i/length(input_filenames)*100)
}
# read in all human proteins for data filtering - from Swiss Prot
Swiis_Prot_data_file <- "C:/Users/jtzve/Desktop/Sufo_Tyrosine/03_Post_GMM_analysis/data/SwissProtLibrary_2024_01_17.tsv"
Swiss_Prot_Human <- read.csv(file = Swiis_Prot_data_file, sep = "\t")
# clean the names - remove .csv, round the ranges, leave just the range and put mz before it
# reatin information about bin ID == clean names, lower boundary, upper boundary to then put in a dataframe
# Cleaning the names
cleaned_names <- gsub("tyrosine_containing_", "", input_filenames)
cleaned_names <- gsub("_inSwissProt.tsv", "", cleaned_names, fixed = TRUE)
names(postGMM_data) <- cleaned_names
## save tpo objects.e asier to work with:
## bin of interest and decoy bins next to it.
DECOY_minus1 <- postGMM_data[[1]]
DECOY_minus2 <- postGMM_data[[2]]
foreground <- postGMM_data[[6]]
# decoy bins around 0.01 mz
DECOY1 <- postGMM_data[[3]]
DECOY2 <- postGMM_data[[4]]
DECOY3 <- postGMM_data[[5]]
# merge bins in the -0.01 mz vicinity and keep only unique IDs
merged_of_interest <- rbind(DECOY_minus1, DECOY_minus2, foreground) %>% unique()
unique_DECOY_minus2 <- setdiff(DECOY_minus2$peptidoform_id, foreground$peptidoform_id)
merged_ordered <- merge(merged_of_interest, Swiss_Prot_Human, by.x = "cleaned_protein_IDs", by.y = "Entry", all.x = TRUE)
write.csv(merged_ordered, file = "../out/potential_sulfo_peptidoforms_.csv", row.names = FALSE)
peptidoforms_to_plot <- read.csv(paste0(project_dir), "in/potential_sulfo_peptidoforms_.csv")
project_dir = "C:/Users/jtzve/Desktop/Sufo_Tyrosine/06_histograms_of_peptidoforms_of_interest_per_dataset/"
# we want to use the peptidoform ID aggregated data from individual experiments
data_dir <- "C:/Users/jtzve/Desktop/Sufo_Tyrosine/01_Sulfotyrosine_Data_Processing/out/new_peptidoform_IDs/"
gc()
# specify the extension unique to your calibrated files
extension = "_peptidoforms.csv"
# get all files of interest in absolut path
data_files <- list.files(data_dir, pattern = extension, full.names = TRUE, recursive = TRUE)
# and get file names
input_filenames <- basename(data_files)
clean_names <- gsub(extension, "", input_filenames)
peptidoforms_to_plot <- read.csv(paste0(project_dir), "in/potential_sulfo_peptidoforms_.csv")
project_dir = "C:/Users/jtzve/Desktop/Sufo_Tyrosine/06_histograms_of_peptidoforms_of_interest_per_dataset/"
potential_sulfo_peptidoforms_file <-
peptidoforms_to_plot <- read.csv(paste0(project_dir, "in/potential_sulfo_peptidoforms_.csv"))
View(potential_sulfo_peptidoforms_file)
peptidoforms_to_plot <- read.csv(paste0(project_dir, "in/potential_sulfo_peptidoforms_.csv"))$peptidoform_id
peptidoforms_potentially_sulfated <- read.csv(paste0(project_dir, "in/potential_sulfo_peptidoforms_.csv"))
head(peptidoforms_potentially_sulfated)
View(potential_sulfo_peptidoforms_file)
library(ggplot2)
View(peptidoforms_potentially_sulfated)
peptidoforms_potentially_sulfated$dataset_ID[6]
peptidoforms_potentially_sulfated$dataset_ID[5]
store <- peptidoforms_potentially_sulfated
# let's get a test subset of just 2 rows with few datasets to run the code on - rows 5 and 21
peptidoforms_potentially_sulfated <- store[c(5,21),]
View(peptidoforms_potentially_sulfated)
View(peptidoforms_potentially_sulfated)
# Loop through each row in peptidoforms_potentially_sulfated
for (i in 1:nrow(peptidoforms_potentially_sulfated)) {
# Extract peptidoform_id and dataset_ID
current_peptidoform_id <- peptidoforms_potentially_sulfated$peptidoform_id[i]
dataset_ids <- strsplit(peptidoforms_potentially_sulfated$dataset_ID[i], ", ")[[1]]
# Create a PDF for each peptidoform_id
pdf(paste0("histogram_", current_peptidoform_id, ".pdf"))
for (dataset_id in dataset_ids) {
# Construct file name and read the dataset
file_name <- paste0(data_dir, "/", dataset_id, "_peptidoforms.csv")
dataset <- read.csv(file_name)
# Clean peptidoform_id in the dataset
dataset$peptidoform_id <- gsub("\\[|\\]", "", dataset$peptidoform_id)
# Filter rows with the current peptidoform_id
filtered_data <- subset(dataset, peptidoform_id == current_peptidoform_id)
# Generate and plot histogram
if (nrow(filtered_data) > 0) {
ggplot(filtered_data, aes(x = calibrated_error)) +
geom_histogram(bins = 30, fill = "blue", color = "black") +
ggtitle(paste("Histogram for", current_peptidoform_id, "in dataset", dataset_id)) +
xlab("Calibrated Error") +
ylab("Frequency")
# Add a page break in the PDF for each histogram
grid::grid.newpage()
}
}
# Close the PDF device
dev.off()
}
peptidoforms_potentially_sulfated$peptidoform_id[i]
# extract peptidoform_id and dataset_ID
current_peptidoform_id <- peptidoforms_potentially_sulfated$peptidoform_id[i]
# the dataset ID column contains all dataset IDs separated by ,
dataset_ids <- strsplit(peptidoforms_potentially_sulfated$dataset_ID[i], ", ")[[1]]
dataset_ids
peptidoforms_potentially_sulfated[i,]
peptidoforms_potentially_sulfated$dataset_ID[i]
dataset_ids
#to test loop
dataset_id <- "PXD003115-Hs_PGRCCancerProteome-Phospho"
# Construct file name and read the dataset
file_name <- paste0(data_dir, "/", dataset_id, "_peptidoforms.csv")
# get file name and read the dataset
file_name <- paste0(data_dir, "/", dataset_id, "_peptidoforms.csv")
file_name
# get file name and read the dataset
file_name <- paste0(data_dir, dataset_id, "_peptidoforms.csv")
dataset <- read.csv(file_name)
View(dataset)
# clean peptidoform_id in the current dataset
dataset$peptidoform_id <- gsub("\\[|\\]", "", dataset$peptidoform_id)
head( dataset$peptidoform_id)
# Filter rows with the current peptidoform_id
filtered_data <- subset(dataset, peptidoform_id == current_peptidoform_id)
View(filtered_data)
# Generate and plot histogram
if (nrow(filtered_data) > 0) {
ggplot(filtered_data, aes(x = calibrated_error)) +
geom_histogram(bins = 30, fill = "blue", color = "black") +
ggtitle(paste("Histogram for", current_peptidoform_id, "in dataset", dataset_id)) +
xlab("Calibrated Error") +
ylab("Frequency")
# Add a page break in the PDF for each histogram
grid::grid.newpage()
}
# Close the PDF device
dev.off()
ggplot(filtered_data, aes(x = calibrated_error)) +
geom_histogram(bins = 30, fill = "blue", color = "black") +
ggtitle(paste("Histogram for", current_peptidoform_id, "in dataset", dataset_id)) +
xlab("Calibrated Error") +
ylab("Frequency")
# Add a page break in the PDF for each histogram
grid::grid.newpage()
# Close the PDF device
dev.off()
# Close the PDF device
dev.off()
project_dir = "C:/Users/jtzve/Desktop/Sufo_Tyrosine/06_histograms_of_peptidoforms_of_interest_per_dataset/"
# we want to use the peptidoform ID aggregated data from individual experiments
data_dir <- "C:/Users/jtzve/Desktop/Sufo_Tyrosine/01_Sulfotyrosine_Data_Processing/out/new_peptidoform_IDs/"
gc()
##### clean file names #####
# specify the extension unique to your calibrated files
extension = "_peptidoforms.csv"
# get all files of interest in absolut path
data_files <- list.files(data_dir, pattern = extension, full.names = TRUE, recursive = TRUE)
# and get file names
input_filenames <- basename(data_files)
clean_names <- gsub(extension, "", input_filenames)
#### read in peptidoforms #####
peptidoforms_potentially_sulfated <- read.csv(paste0(project_dir, "in/potential_sulfo_peptidoforms_.csv"))
store <- peptidoforms_potentially_sulfated
# let's get a test subset of just 2 rows with few datasets to run the code on - rows 5 and 21
peptidoforms_potentially_sulfated <- store[c(5,21),]
peptidoforms_potentially_sulfated
View(peptidoforms_potentially_sulfated)
# extract peptidoform_id and dataset_ID
current_peptidoform_id <- peptidoforms_potentially_sulfated$peptidoform_id[i]
# the dataset ID column contains all dataset IDs separated by ,
dataset_ids <- strsplit(peptidoforms_potentially_sulfated$dataset_ID[i], ", ")[[1]]
# create a PDF for the current peptidoform id
pdf(paste0("../out/histograms_", current_peptidoform_id, ".pdf"))
#to test loop
dataset_id <- "PXD003115-Hs_PGRCCancerProteome-Phospho"
# get file name and read the dataset
file_name <- paste0(data_dir, dataset_id, "_peptidoforms.csv")
dataset <- read.csv(file_name)
# clean peptidoform_id in the current dataset
dataset$peptidoform_id <- gsub("\\[|\\]", "", dataset$peptidoform_id)
# Filter rows with the current peptidoform_id
filtered_data <- subset(dataset, peptidoform_id == current_peptidoform_id)
# Generate and plot histogram
if (nrow(filtered_data) > 0) {
ggplot(filtered_data, aes(x = calibrated_error)) +
geom_histogram(bins = 30, fill = "blue", color = "black") +
ggtitle(paste("Histogram for", current_peptidoform_id, "in dataset", dataset_id)) +
xlab("Calibrated Error") +
ylab("Frequency")
# Add a page break in the PDF for each histogram
grid::grid.newpage()
}
# plot the histograMs of each peptidoform ID within each dataset
for (dataset_id in dataset_ids) {
#to test loop
dataset_id <- "PXD003115-Hs_PGRCCancerProteome-Phospho"
# get file name and read the dataset
file_name <- paste0(data_dir, dataset_id, "_peptidoforms.csv")
dataset <- read.csv(file_name)
# clean peptidoform_id in the current dataset
dataset$peptidoform_id <- gsub("\\[|\\]", "", dataset$peptidoform_id)
# head( dataset$peptidoform_id) - has worked
# Filter rows with the current peptidoform_id
filtered_data <- subset(dataset, peptidoform_id == current_peptidoform_id)
# Generate and plot histogram
if (nrow(filtered_data) > 0) {
ggplot(filtered_data, aes(x = calibrated_error)) +
geom_histogram(bins = 30, fill = "blue", color = "black") +
ggtitle(paste("Histogram for", current_peptidoform_id, "in dataset", dataset_id)) +
xlab("Calibrated Error") +
ylab("Frequency")
# Add a page break in the PDF for each histogram
grid::grid.newpage()
}
}
# Close the PDF device
dev.off()
# create a PDF for the current peptidoform id
pdf(paste0("histograms_", current_peptidoform_id, ".pdf"))
#to test loop
dataset_id <- "PXD003115-Hs_PGRCCancerProteome-Phospho"
# get file name and read the dataset
file_name <- paste0(data_dir, dataset_id, "_peptidoforms.csv")
dataset <- read.csv(file_name)
# clean peptidoform_id in the current dataset
dataset$peptidoform_id <- gsub("\\[|\\]", "", dataset$peptidoform_id)
# Filter rows with the current peptidoform_id
filtered_data <- subset(dataset, peptidoform_id == current_peptidoform_id)
# Generate and plot histogram
if (nrow(filtered_data) > 0) {
ggplot(filtered_data, aes(x = calibrated_error)) +
geom_histogram(bins = 30, fill = "blue", color = "black") +
ggtitle(paste("Histogram for", current_peptidoform_id, "in dataset", dataset_id)) +
xlab("Calibrated Error") +
ylab("Frequency")
# Add a page break in the PDF for each histogram
grid::grid.newpage()
}
# Close the PDF device
dev.off()
ggplot(filtered_data, aes(x = calibrated_error)) +
geom_histogram(bins = 30, fill = "blue", color = "black") +
ggtitle(paste("Histogram for", current_peptidoform_id, "in dataset", dataset_id)) +
xlab("Calibrated Error") +
ylab("Frequency")
# Generate and plot histogram
if (nrow(filtered_data) > 5) {
ggplot(filtered_data, aes(x = calibrated_error)) +
geom_histogram(bins = 30, fill = "blue", color = "black") +
ggtitle(paste("Histogram for", current_peptidoform_id, "in dataset", dataset_id)) +
xlab("Calibrated Error") +
ylab("Frequency")
# Add a page break in the PDF for each histogram
grid::grid.newpage()
}
# create a PDF for the current peptidoform id
pdf(paste0("histograms_", current_peptidoform_id, ".pdf"))
# Generate and plot histogram
if (nrow(filtered_data) > 5) {
ggplot(filtered_data, aes(x = calibrated_error)) +
geom_histogram(bins = 30, fill = "blue", color = "black") +
ggtitle(paste("Histogram for", current_peptidoform_id, "in dataset", dataset_id)) +
xlab("Calibrated Error") +
ylab("Frequency")
# Add a page break in the PDF for each histogram
grid::grid.newpage()
}
# Generate and plot histogram
if (nrow(filtered_data) > 5) {
ggplot(filtered_data, aes(x = calibrated_error)) +
geom_histogram(bins = 30, fill = "blue", color = "black") +
ggtitle(paste("Histogram for", current_peptidoform_id, "in dataset", dataset_id)) +
xlab("Calibrated Error") +
ylab("Frequency")
# Add a page break in the PDF for each histogram
grid::grid.newpage()
} else {
# print to page that fewer than 5 PSMs are present in the dataset and
# print the filtered data to the page
text_grob <- textGrob(paste("Fewer than 5 PSMs are present in the dataset for",
current_peptidoform_id, "in dataset", dataset_id))
table_grob <- tableGrob(filtered_data)
grid.arrange(text_grob, table_grob, ncol = 1)
# Add a page break after the message and table
grid::grid.newpage()
}
library(gridExtra)
# Close the PDF device
dev.off()
# Close the PDF device
dev.off()
# create a PDF for the current peptidoform id
pdf(paste0("histograms_", current_peptidoform_id, ".pdf"))
# Generate and plot histogram
if (nrow(filtered_data) > 5) {
ggplot(filtered_data, aes(x = calibrated_error)) +
geom_histogram(bins = 30, fill = "blue", color = "black") +
ggtitle(paste("Histogram for", current_peptidoform_id, "in dataset", dataset_id)) +
xlab("Calibrated Error") +
ylab("Frequency")
# Add a page break in the PDF for each histogram
grid::grid.newpage()
} else {
# print to page that fewer than 5 PSMs are present in the dataset and
# print the filtered data to the page
text_grob <- textGrob(paste("Fewer than 5 PSMs are present in the dataset for",
current_peptidoform_id, "in dataset", dataset_id))
table_grob <- tableGrob(filtered_data)
grid.arrange(text_grob, table_grob, ncol = 1)
# Add a page break after the message and table
grid::grid.newpage()
}
library(grid)
# Close the PDF device
dev.off()
getwd()
setwd("C:/Users/jtzve/Desktop/Sufo_Tyrosine/06_histograms_of_peptidoforms_of_interest_per_dataset/scripts/"
> )
setwd("C:/Users/jtzve/Desktop/Sufo_Tyrosine/06_histograms_of_peptidoforms_of_interest_per_dataset/scripts/")
o
# create a PDF for the current peptidoform id
pdf(paste0("histograms_", current_peptidoform_id, ".pdf"))
# plot the histograMs of each peptidoform ID within each dataset
for (dataset_id in dataset_ids) {
#to test loop
dataset_id <- "PXD003115-Hs_PGRCCancerProteome-Phospho"
# get file name and read the dataset
file_name <- paste0(data_dir, dataset_id, "_peptidoforms.csv")
dataset <- read.csv(file_name)
# clean peptidoform_id in the current dataset
dataset$peptidoform_id <- gsub("\\[|\\]", "", dataset$peptidoform_id)
# head( dataset$peptidoform_id) - has worked
# Filter rows with the current peptidoform_id
filtered_data <- subset(dataset, peptidoform_id == current_peptidoform_id)
# Generate and plot histogram
if (nrow(filtered_data) > 5) {
ggplot(filtered_data, aes(x = calibrated_error)) +
geom_histogram(bins = 30, fill = "blue", color = "black") +
ggtitle(paste("Histogram for", current_peptidoform_id, "in dataset", dataset_id)) +
xlab("Calibrated Error") +
ylab("Frequency")
# add a page break in the PDF for each histogram
grid::grid.newpage()
} else {
# print to page that fewer than 5 PSMs are present in the dataset and
# print the filtered data to the page
text_grob <- grid::textGrob(paste("Fewer than 5 PSMs are present in the dataset for",
current_peptidoform_id, "in dataset", dataset_id))
table_grob <- gridExtra::tableGrob(filtered_data)
gridExtra::grid.arrange(text_grob, table_grob, ncol = 1)
# add a page break after the message and table
grid::grid.newpage()
}
}
# Close the PDF device
dev.off()
# create a PDF for the current peptidoform id
pdf(paste0("histograms_", current_peptidoform_id, ".pdf"))
# Generate and plot histogram
if (nrow(filtered_data) > 5) {
ggplot(filtered_data, aes(x = calibrated_error)) +
geom_histogram(bins = 30, fill = "blue", color = "black") +
ggtitle(paste("Histogram for", current_peptidoform_id, "in dataset", dataset_id)) +
xlab("Calibrated Error") +
ylab("Frequency")
# add a page break in the PDF for each histogram
grid::grid.newpage()
} else {
# print to page that fewer than 5 PSMs are present in the dataset and
# print the filtered data to the page
text_grob <- grid::textGrob(paste("Fewer than 5 PSMs are present in the dataset for \n",
current_peptidoform_id, "\nin dataset", dataset_id))
table_grob <- gridExtra::tableGrob(filtered_data$calibrated_error)
gridExtra::grid.arrange(text_grob, table_grob, ncol = 1)
# add a page break after the message and table
grid::grid.newpage()
}
# plot the histograMs of each peptidoform ID within each dataset
for (dataset_id in dataset_ids) {
#to test loop
dataset_id <- "PXD003115-Hs_PGRCCancerProteome-Phospho"
# get file name and read the dataset
file_name <- paste0(data_dir, dataset_id, "_peptidoforms.csv")
dataset <- read.csv(file_name)
# clean peptidoform_id in the current dataset
dataset$peptidoform_id <- gsub("\\[|\\]", "", dataset$peptidoform_id)
# head( dataset$peptidoform_id) - has worked
# Filter rows with the current peptidoform_id
filtered_data <- subset(dataset, peptidoform_id == current_peptidoform_id)
# Generate and plot histogram
if (nrow(filtered_data) > 5) {
ggplot(filtered_data, aes(x = calibrated_error)) +
geom_histogram(bins = 30, fill = "blue", color = "black") +
ggtitle(paste("Histogram for", current_peptidoform_id, "in dataset", dataset_id)) +
xlab("Calibrated Error") +
ylab("Frequency")
# add a page break in the PDF for each histogram
grid::grid.newpage()
} else {
# print to page that fewer than 5 PSMs are present in the dataset and
# print the filtered data to the page
text_grob <- grid::textGrob(paste("Fewer than 5 PSMs are present in the dataset for \n",
current_peptidoform_id, "\nin dataset", dataset_id))
table_grob <- gridExtra::tableGrob(filtered_data$calibrated_error)
gridExtra::grid.arrange(text_grob, table_grob, ncol = 1)
# add a page break after the message and table
grid::grid.newpage()
}
}
# Close the PDF device
dev.off()
peptidoforms_potentially_sulfated
# Loop through each row in peptidoforms_potentially_sulfated
for (i in 1:nrow(peptidoforms_potentially_sulfated)) {
# extract peptidoform_id and dataset_ID
current_peptidoform_id <- peptidoforms_potentially_sulfated$peptidoform_id[i]
# the dataset ID column contains all dataset IDs separated by ,
dataset_ids <- strsplit(peptidoforms_potentially_sulfated$dataset_ID[i], ", ")[[1]]
# create a PDF for the current peptidoform id
pdf(paste0("histograms_", current_peptidoform_id, ".pdf"))
# plot the histograMs of each peptidoform ID within each dataset
for (dataset_id in dataset_ids) {
#to test loop
# dataset_id <- "PXD003115-Hs_PGRCCancerProteome-Phospho"
# get file name and read the dataset
file_name <- paste0(data_dir, dataset_id, "_peptidoforms.csv")
dataset <- read.csv(file_name)
# clean peptidoform_id in the current dataset
dataset$peptidoform_id <- gsub("\\[|\\]", "", dataset$peptidoform_id)
# head( dataset$peptidoform_id) - has worked
# Filter rows with the current peptidoform_id
filtered_data <- subset(dataset, peptidoform_id == current_peptidoform_id)
# Generate and plot histogram
if (nrow(filtered_data) > 5) {
ggplot(filtered_data, aes(x = calibrated_error)) +
geom_histogram(bins = 30, fill = "blue", color = "black") +
ggtitle(paste("Histogram for", current_peptidoform_id, "in dataset", dataset_id)) +
xlab("Calibrated Error") +
ylab("Frequency")
# add a page break in the PDF for each histogram
grid::grid.newpage()
} else {
# print to page that fewer than 5 PSMs are present in the dataset and
# print the filtered data to the page
text_grob <- grid::textGrob(paste("Fewer than 5 PSMs are present in the dataset for \n",
current_peptidoform_id, "\nin dataset", dataset_id))
table_grob <- gridExtra::tableGrob(filtered_data$calibrated_error)
gridExtra::grid.arrange(text_grob, table_grob, ncol = 1)
# add a page break after the message and table
grid::grid.newpage()
}
}
# Close the PDF device
dev.off()
}
