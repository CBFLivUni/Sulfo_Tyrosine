library(tidyverse)
library(stringr)
##### Function to get clean filenames, and round and extract bin boundaries ######
clean_round_extract <- function(name, index) {
#separate the name into pars splitting at _
parts <- unlist(strsplit(name, "_"))
# Rounding the numbers to the fourth decimal place; lower bin boundary is the 2nd part, upper is the 3rd part
lower <- round(as.numeric(parts[2]), 4)
upper <- round(as.numeric(parts[3]), 4)
# Storing the boundaries
# index = 1
lower_boundaries[length(lower_boundaries) + 1] <<- lower
upper_boundaries[length(upper_boundaries) + 1] <<- upper
# Reconstructing the cleaned name (and returning it)
return(paste0("mz_", lower, "_", upper))
}
clean_data <- function(data) {
for (i in 1:ncol(data)) {
cleaned_col <- lapply(data[, i], function(x) {
clean_string <- gsub("\\[|\\]|'", "", x)
if (i == 5) {
clean_string <- gsub(";", ",", clean_string)
}
elements <- unlist(strsplit(clean_string, ',\\s*'))
return(elements)
})
if (i == 2) {
data[, i] <- sapply(cleaned_col, function(x) paste(x, collapse = ", "))
} else {
data[, i] <- sapply(cleaned_col, function(x) paste(unique(x), collapse = ", "))
}
}
return(data)
}
# function to clean the protein IDs in the Input data
ProteinIDCleaningFunction <- function(IDs) {
# step one, deal with NX_ etries
# Remove "NX_" prefix and any the suffix following a dash
cleaned_IDs <- gsub("(^NX_[^-]+)-.*", "\\1", IDs)
# step 2, deal with sp/ID/ cases
# Keep everything after "sp|" and before the second "|"
cleaned_IDs <- gsub(".*sp\\|([^|]+)\\|.*", "\\1", cleaned_IDs)
# step 3 deal with gi|315259111|ref|NP_001186752.1| cases
cleaned_IDs <- gsub(".*gi\\|[^|]+\\|ref\\|(NP_[^|]+).*", "\\1", cleaned_IDs)
# looks for strings starting with gi and keeps
# all text after the first occurance of NP_ up until but excluding the first subsequent |
# # Step 4: Handle cases starting with "CONTRIB" and keep everything after the last underscore "_"
# cleaned_IDs <- gsub("^CONTRIB_([^_]+)_.*", "\\1", cleaned_IDs)
# ### NB: These are gene names and not UniProt Entry IDs, so we actually want to do that step later and convert from gene name to UniProt ID?
# after cleaning,keep only the unique IDs at this stage
cleaned_IDs <- unique(cleaned_IDs)
return(cleaned_IDs)
}
## for getting next prot and Ref seq IDs from the SwissProt library
split_ids <- function(string) {
# First, try splitting with "; "
split_result <- strsplit(string, "; ")
# If the length of any split_result is 1, it means there was no "; " to split on
# In this case, try splitting with just ";"
if (any(sapply(split_result, length) == 1)) {
split_result <- strsplit(string, ";")
}
return(split_result)
}
## to process a sublist of a list of lists where each sublist is a row cell of
# the protein IDs.
# for each sublist of IDs:
#
# 1) check if any of the IDs have a hit in Swiss_Prot_Human$Entry
# if yes replace that sublist with only the IDs with a hit (unlikely to be multiple)
# 2) if not check if any of the IDs have a hit in Swiss_Prot_Human$neXtProt
# if yes retrieve the Swiss_Prot_Human$Entry for that row of Siwss_Prot_Human, then retain that Entry ID and replace the sublist with it
# 3) if not, check if any of the IDs have a hit in Swiss_Prot_Human$RefSeq
# if yes retrieve the Swiss_Prot_Human$Entry for that row of Siwss_Prot_Human, then retain that Entry ID and replace the sublist with it
# if not keep the sublist as it is
process_sublist <- function(sublist, Swiss_Prot_Human, neXtProt_list, RefSeq_list) {
# Check for hits in Swiss_Prot_Human$Entry
entry_hits <- sublist[sublist %in% Swiss_Prot_Human$Entry]
if (length(entry_hits) > 0) {
return(entry_hits)
}
# Check for hits in Swiss_Prot_Human$neXtProt
for (id in sublist) {
if (any(sapply(neXtProt_list, function(x) id %in% x))) {
matching_row <- which(sapply(neXtProt_list, function(x) id %in% x))
return(Swiss_Prot_Human$Entry[matching_row])
}
}
# Check for hits in Swiss_Prot_Human$RefSeq
for (id in sublist) {
if (any(sapply(RefSeq_list, function(x) id %in% x))) {
matching_row <- which(sapply(RefSeq_list, function(x) id %in% x))
return(Swiss_Prot_Human$Entry[matching_row])
}
}
# If no matches, return the original sublist
return(sublist)
}
#### subsetting swiss prot gene ids amnd returning uniprot ones for enrichment
extractEnsemblGeneIDs <- function(dataSet, uniprotMapping) {
# subset to only include IDs present in UniProt mapping
subsetData <- dataSet[dataSet$cleaned_protein_IDs %in% uniprotMapping$uniprotswissprot,]
# match SwissProt IDs in the UniProt data frame to get the position index
matchedIndices <- match(subsetData$cleaned_protein_IDs, uniprotMapping$uniprotswissprot)
# rxtract corresponding ENSEMBL Gene IDs
ensemblGeneIDs <- uniprotMapping$ensembl_gene_id[matchedIndices]
# remove NAs if any (in case some SwissProt IDs didn't have a match)
ensemblGeneIDs <- na.omit(ensemblGeneIDs)
return(ensemblGeneIDs)
}
# TODO: turn beow into a function to keep my environment tidy?
# # List of all objects in the environment
# all_objects <- ls()
#
# # List of objects to keep (replace these with your actual data object names)
# data_objects <- c("postGMM_data")
#
# # Objects to remove
# objects_to_remove <- setdiff(all_objects, data_objects)
#
# # Remove the objects
# rm(list = objects_to_remove)
#
# # Clear objects_to_remove to clean up
# rm(objects_to_remove)
#
# rm("all_objects", "data_objects")
project_dir = "C:/Users/jtzve/Desktop/Sufo_Tyrosine/05_LookIntoSpecificProteins/"
data_dir <- "C:/Users/jtzve/Desktop/Sufo_Tyrosine/05_LookIntoSpecificProteins/in/"
gc()
# specify the extension unique to your calibrated files
extension = "inSwissProt"
# get all files of interest
bin_data_files <- list.files(data_dir, pattern = extension, full.names = TRUE, recursive = TRUE)
# and get file path (not reltive!)
input_filenames <- basename(bin_data_files)
# read in all data one by one into an empty list, setting each data frame as a
# new elemnt of the list.
postGMM_data <- list()
print("reading in data")
for (i in 1:length(bin_data_files)) {
print(bin_data_files[[i]])
postGMM_data[[i]] <- read.csv(bin_data_files[[i]], sep =  "\t")
print(i/length(input_filenames)*100)
}
# read in all human proteins for data filtering - from Swiss Prot
Swiis_Prot_data_file <- "C:/Users/jtzve/Desktop/Sufo_Tyrosine/03_Post_GMM_analysis/data/SwissProtLibrary_2024_01_17.tsv"
Swiss_Prot_Human <- read.csv(file = Swiis_Prot_data_file, sep = "\t")
# Cleaning the names
cleaned_names <- gsub("tyrosine_containing_", "", input_filenames)
cleaned_names <- gsub("_inSwissProt.tsv", "", cleaned_names, fixed = TRUE)
names(postGMM_data) <- cleaned_names
DECOY_minus1 <- postGMM_data[[1]]
DECOY_minus2 <- postGMM_data[[2]]
foreground <- postGMM_data[[6]]
# decoy bins around 0.01 mz
DECOY1 <- postGMM_data[[3]]
DECOY2 <- postGMM_data[[4]]
DECOY3 <- postGMM_data[[5]]
# merge bins in the -0.01 mz vicinity and keep only unique IDs
merged_of_interest <- rbind(DECOY_minus1, DECOY_minus2, foreground) %>% unique()
# find IDs in left bins that ar enot in the bin of interest
unique_DECOY_minus1 <- setdiff(DECOY_minus1$peptidoform_id,  foreground$peptidoform_id)
unique_DECOY_minus2 <- setdiff(DECOY_minus2$peptidoform_id, foreground$peptidoform_id)
View(Swiss_Prot_Human)
View(merged_of_interest)
names(merged_of_interest)
View(Swiss_Prot_Human)
merged_ordered <- merge(merged_of_interest, Swiss_Prot_Human, by.x = "cleaned_protein_IDs", by.y = "Entry", all.x = TRUE)
View(merged_ordered)
write.csv(merged_ordered, file = "../out/potential_sulfo_peptidoforms.csv", row.names = FALSE)
