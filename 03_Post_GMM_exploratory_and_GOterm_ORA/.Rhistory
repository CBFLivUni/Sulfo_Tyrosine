# # Objects to remove
# objects_to_remove <- setdiff(all_objects, data_objects)
#
# # Remove the objects
# rm(list = objects_to_remove)
#
# # Clear objects_to_remove to clean up
# rm(objects_to_remove)
#
# rm("all_objects", "data_objects")
# clean the names - remove .csv, round the ranges, leave just the range and put mz before it
# reatin information about bin ID == clean names, lower boundary, upper boundary to then put in a dataframe
# Cleaning the names
cleaned_names <- gsub("postGMM_fitting_binrange", "mz", input_filenames)
cleaned_names <- gsub(".csv", "", cleaned_names, fixed = TRUE)
# Now, cleaned_names should have the format like 'mz_0.300-0.400'
# Initialize empty vectors to store upper and lower boundaries
lower_boundaries <- numeric()
upper_boundaries <- numeric()
# Applying the function to each name and storing the results
cleaned_names <- sapply(cleaned_names, clean_round_extract, seq_along(cleaned_names))
names(postGMM_data) <- cleaned_names
# create a data frame with one row for each bin
bin_proportions_df <- as.data.frame(matrix(nrow = length(postGMM_data), ncol = 0))
bin_proportions_df$bin_ID <- cleaned_names
# create a data frame with one row for each bin
bin_proportions_df <- as.data.frame(matrix(nrow = length(postGMM_data), ncol = 0))
# create a data frame with one row for each bin
rm(bin_proportions_df)
bin_proportions_df <- as.data.frame(matrix(nrow = length(postGMM_data), ncol = 0))
bin_proportions_df$bin_ID <- cleaned_names
# extract bin limits from the bin ID. round the values because they are a bit weird
bin_proportions_df$lower_boundary <- lower_boundaries
View(bin_proportions_df)
bin_proportions_df$upper_boundary <- upper_boundaries
View(bin_proportions_df)
# Initialize a data frame to store the results
results <- data.frame(bin_proportions_df,
tyrosine_count = integer(length(postGMM_data)),
phosphotyrosine_count = integer(length(postGMM_data)),
total_peptidoforms = integer(length(postGMM_data)),
tyrosine_proportion = numeric(length(postGMM_data)),
phosphotyrosine_proportion = numeric(length(postGMM_data)))
View(results)
# Iterate through each bin
for (i in seq_along(postGMM_data)) {
data <- postGMM_data[[i]]
results$tyrosine_count[i] <- sum(grepl("Y", data$peptidoform_ID))
results$phosphotyrosine_count[i] <- sum(grepl("Y243", data$peptidoform_ID))
results$total_peptidoforms[i] <- nrow(data)
# Calculating proportions
results$tyrosine_proportion[i] <- results$tyrosine_count[i] / results$total_peptidoforms[i]
results$phosphotyrosine_proportion[i] <- results$phosphotyrosine_count[i] / results$total_peptidoforms[i]
}
View(results)
View(postGMM_data)
test_df <- data.frame(peptidoform_id = c("TTT", "Y", "TYTY", "TY_Y243"))
View(results)
View(test_df)
View(data)
names(data)
# Iterate through each bin
for (i in seq_along(postGMM_data)) {
data <- postGMM_data[[i]]
results$tyrosine_count[i] <- sum(grepl("Y", data$peptidoform_id))
results$phosphotyrosine_count[i] <- sum(grepl("Y243", data$peptidoform_id))
results$total_peptidoforms[i] <- nrow(data)
# Calculating proportions
results$tyrosine_proportion[i] <- results$tyrosine_count[i] /   results$total_peptidoforms[i]
results$phosphotyrosine_proportion[i] <- results$phosphotyrosine_count[i] / results$total_peptidoforms[i]
}
View(results)
results$phospho_to_total_tyrosine_ratio <- results$phosphotyrosine_count /
results$tyrosine_count
View(results)
# Iterate through each bin
for (i in seq_along(test_df)) {
data <- postGMM_data[[i]]
results$tyrosine_count[i] <- sum(grepl("Y", data$peptidoform_id))
results$phosphotyrosine_count[i] <- sum(grepl("Y243", data$peptidoform_id))
results$total_peptidoforms[i] <- nrow(data)
# Calculating proportions
results$tyrosine_proportion[i] <- results$tyrosine_count[i] /   results$total_peptidoforms[i]
results$phosphotyrosine_proportion[i] <- results$phosphotyrosine_count[i] / results$total_peptidoforms[i]
}
names(data)
# Iterate through each bin
for (i in seq_along(test_df)) {
data <- postGMM_data[[i]]
results$tyrosine_count[i] <- sum(grepl("Y", data$peptidoform_id))
results$phosphotyrosine_count[i] <- sum(grepl("Y243", data$peptidoform_id))
results$total_peptidoforms[i] <- nrow(data)
# Calculating proportions
results$tyrosine_proportion[i] <- results$tyrosine_count[i] /   results$total_peptidoforms[i]
results$phosphotyrosine_proportion[i] <- results$phosphotyrosine_count[i] / results$total_peptidoforms[i]
results$phospho_to_total_tyrosine_ratio[i] <- results$phosphotyrosine_count[i] /
results$tyrosine_count[i]
}
View(results)
View(results)
# Iterate through each bin
for (i in seq_along(postGMM_data)) {
data <- postGMM_data[[i]]
results$tyrosine_count[i] <- sum(grepl("Y", data$peptidoform_id))
results$phosphotyrosine_count[i] <- sum(grepl("Y243", data$peptidoform_id))
results$total_peptidoforms[i] <- nrow(data)
# Calculating proportions
results$tyrosine_proportion[i] <- results$tyrosine_count[i] /   results$total_peptidoforms[i]
results$phosphotyrosine_proportion[i] <- results$phosphotyrosine_count[i] / results$total_peptidoforms[i]
results$phospho_to_total_tyrosine_ratio[i] <- results$phosphotyrosine_count[i] /
results$tyrosine_count[i]
}
View(results)
data <- test_df
grepl("Y", data$peptidoform_id)
# Iterate through each bin
for (i in seq_along(postGMM_data)) {
data <- postGMM_data[[i]]
results$tyrosine_count[i] <- sum(grepl("Y", data$peptidoform_id))
results$phosphotyrosine_count[i] <- sum(grepl("Y243", data$peptidoform_id))
results$total_peptidoforms[i] <- nrow(data)
# Calculating proportions
results$tyrosine_proportion[i] <- results$tyrosine_count[i] /   results$total_peptidoforms[i]
results$phosphotyrosine_proportion[i] <- results$phosphotyrosine_count[i] / results$total_peptidoforms[i]
results$phospho_to_total_tyrosine_ratio[i] <- results$phosphotyrosine_count[i] /
results$tyrosine_count[i]
}
rm(results)
# Iterate through each bin
for (i in seq_along(postGMM_data)) {
data <- postGMM_data[[i]]
results$tyrosine_containing_peptides_count[i] <- sum(grepl("Y", data$peptidoform_id))
results$phosphotyrosine_containing_peptides_count[i] <- sum(grepl("Y243", data$peptidoform_id))
results$total_peptidoforms[i] <- nrow(data)
# Calculating proportions
results$tyrosine_containing_proportion[i] <- results$tyrosine_containing_peptides_count[i] / results$total_peptidoforms[i]
results$phosphotyrosine_proportion[i] <- results$phosphotyrosine_containing_peptides_count[i] / results$total_peptidoforms[i]
results$phospho_to_total_tyrosine_ratio[i] <- results$phosphotyrosine_containing_peptides_count[i] /
results$phosphotyrosine_containing_peptides_count[i]
}
# Initialize a data frame to store the results
results <- data.frame(bin_proportions_df,
tyrosine_containing_peptides_count = integer(length(postGMM_data)),
phosphotyrosine_containing_peptides_count = integer(length(postGMM_data)),
total_peptidoforms = integer(length(postGMM_data)),
tyrosine_containing_proportion = numeric(length(postGMM_data)),
phosphotyrosine_containing_proportion = numeric(length(postGMM_data)))
# Iterate through each bin
for (i in seq_along(postGMM_data)) {
data <- postGMM_data[[i]]
results$tyrosine_containing_peptides_count[i] <- sum(grepl("Y", data$peptidoform_id))
results$phosphotyrosine_containing_peptides_count[i] <- sum(grepl("Y243", data$peptidoform_id))
results$total_peptidoforms[i] <- nrow(data)
# Calculating proportions
results$tyrosine_containing_proportion[i] <- results$tyrosine_containing_peptides_count[i] / results$total_peptidoforms[i]
results$phosphotyrosine_containing_proportion[i] <- results$phosphotyrosine_containing_peptides_count[i] / results$total_peptidoforms[i]
results$phospho_to_total_tyrosine_ratio[i] <- results$phosphotyrosine_containing_peptides_count[i] /
results$phosphotyrosine_containing_peptides_count[i]
}
View(results)
results$phospho_to_total_tyrosine_ratio <- results$phosphotyrosine_containing_peptides_count /
results$phosphotyrosine_containing_peptides_count
View(results)
results$phospho_to_total_tyrosine_ratio <- results$phosphotyrosine_containing_peptides_count /
results$tyrosine_containing_peptides_count
View(results)
# Initialize a data frame to store the results
results <- data.frame(bin_proportions_df,
tyrosine_containing_peptides_count = integer(length(postGMM_data)),
phosphotyrosine_containing_peptides_count = integer(length(postGMM_data)),
total_peptidoforms = integer(length(postGMM_data)),
tyrosine_containing_proportion = numeric(length(postGMM_data)),
phosphotyrosine_containing_proportion = numeric(length(postGMM_data)),
threonine_containing_peptides_count = integer(length(postGMM_data)),
phosphothreonine_containing_peptides_count = integer(length(postGMM_data)),
total_peptidoforms = integer(length(postGMM_data)),
threonine_containing_proportion = numeric(length(postGMM_data)),
phosphothreonine_containing_proportion = numeric(length(postGMM_data)),
serine_containing_peptides_count = integer(length(postGMM_data)),
phosphoserine_containing_peptides_count = integer(length(postGMM_data)),
total_peptidoforms = integer(length(postGMM_data)),
serine_containing_proportion = numeric(length(postGMM_data)),
phosphoserine_containing_proportion = numeric(length(postGMM_data)))
# Iterate through each bin
for (i in seq_along(postGMM_data)) {
data <- postGMM_data[[i]]
results$tyrosine_containing_peptides_count[i] <- sum(grepl("Y", data$peptidoform_id))
results$phosphotyrosine_containing_peptides_count[i] <- sum(grepl("Y243", data$peptidoform_id))
results$total_peptidoforms[i] <- nrow(data)
# Calculating proportions
results$tyrosine_containing_proportion[i] <- results$tyrosine_containing_peptides_count[i] / results$total_peptidoforms[i]
results$phosphotyrosine_containing_proportion[i] <- results$phosphotyrosine_containing_peptides_count[i] / results$total_peptidoforms[i]
# Now for threonine
results$threonine_containing_peptides_count[i] <- sum(grepl("T", data$peptidoform_id))
results$phosphothreonine_containing_peptides_count[i] <- sum(grepl("T181", data$peptidoform_id))
results$total_peptidoforms[i] <- nrow(data)
# Calculating proportions
results$threonine_containing_proportion[i] <- results$threonine_containing_peptides_count[i] / results$total_peptidoforms[i]
results$phosphothreonine_containing_proportion[i] <- results$phosphothreonine_containing_peptides_count[i] / results$total_peptidoforms[i]
## and for serine
results$serine_containing_peptides_count[i] <- sum(grepl("S", data$peptidoform_id))
results$phosphoserine_containing_peptides_count[i] <- sum(grepl("S167", data$peptidoform_id))
results$total_peptidoforms[i] <- nrow(data)
# Calculating proportions
results$serine_containing_proportion[i] <- results$serine_containing_peptides_count[i] / results$total_peptidoforms[i]
results$phosphoserine_containing_proportion[i] <- results$phosphoserine_containing_peptides_count[i] / results$total_peptidoforms[i]
}
# might be interesting to look at what fraction of tyrosine-containing are 'phosphorylated'
results$phospho_to_total_tyrosine_ratio <- results$phosphotyrosine_containing_peptides_count /
results$tyrosine_containing_peptides_count
# Ratio of phospho-Threonine to total Threonine-containing peptides
results$phospho_to_total_threonine_ratio <- results$phosphothreonine_containing_peptides_count / results$threonine_containing_peptides_count
# Ratio of phospho-serine to total serine-containing peptides
results$phospho_to_total_serine_ratio <- results$phosphoserine_containing_peptides_count / results$serine_containing_peptides_count
View(results)
# Initialize a data frame to store the results
results <- data.frame(bin_proportions_df,
tyrosine_containing_peptides_count = integer(length(postGMM_data)),
phosphotyrosine_containing_peptides_count = integer(length(postGMM_data)),
total_peptidoforms = integer(length(postGMM_data)),
tyrosine_containing_proportion = numeric(length(postGMM_data)),
phosphotyrosine_containing_proportion = numeric(length(postGMM_data)),
threonine_containing_peptides_count = integer(length(postGMM_data)),
phosphothreonine_containing_peptides_count = integer(length(postGMM_data)),
total_peptidoforms = integer(length(postGMM_data)),
threonine_containing_proportion = numeric(length(postGMM_data)),
phosphothreonine_containing_proportion = numeric(length(postGMM_data)),
serine_containing_peptides_count = integer(length(postGMM_data)),
phosphoserine_containing_peptides_count = integer(length(postGMM_data)),
total_peptidoforms = integer(length(postGMM_data)),
serine_containing_proportion = numeric(length(postGMM_data)),
phosphoserine_containing_proportion = numeric(length(postGMM_data)))
# Iterate through each bin
for (i in seq_along(postGMM_data)) {
data <- postGMM_data[[i]]
results$tyrosine_containing_peptides_count[i] <- sum(grepl("Y", data$peptidoform_id))
results$phosphotyrosine_containing_peptides_count[i] <- sum(grepl("Y243", data$peptidoform_id))
results$total_peptidoforms[i] <- nrow(data)
# Calculating proportions
results$tyrosine_containing_proportion[i] <- results$tyrosine_containing_peptides_count[i] / results$total_peptidoforms[i]
results$phosphotyrosine_containing_proportion[i] <- results$phosphotyrosine_containing_peptides_count[i] / results$total_peptidoforms[i]
# Now for threonine
results$threonine_containing_peptides_count[i] <- sum(grepl("T", data$peptidoform_id))
results$phosphothreonine_containing_peptides_count[i] <- sum(grepl("T181", data$peptidoform_id))
# Calculating proportions
results$threonine_containing_proportion[i] <- results$threonine_containing_peptides_count[i] / results$total_peptidoforms[i]
results$phosphothreonine_containing_proportion[i] <- results$phosphothreonine_containing_peptides_count[i] / results$total_peptidoforms[i]
## and for serine
results$serine_containing_peptides_count[i] <- sum(grepl("S", data$peptidoform_id))
results$phosphoserine_containing_peptides_count[i] <- sum(grepl("S167", data$peptidoform_id))
# Calculating proportions
results$serine_containing_proportion[i] <- results$serine_containing_peptides_count[i] / results$total_peptidoforms[i]
results$phosphoserine_containing_proportion[i] <- results$phosphoserine_containing_peptides_count[i] / results$total_peptidoforms[i]
}
# Iterate through each bin
for (i in seq_along(postGMM_data)) {
data <- postGMM_data[[i]]
results$tyrosine_containing_peptides_count[i] <- sum(grepl("Y", data$peptidoform_id))
results$phosphotyrosine_containing_peptides_count[i] <- sum(grepl("Y243", data$peptidoform_id))
results$total_peptidoforms[i] <- nrow(data)
# Calculating proportions
results$tyrosine_containing_proportion[i] <- results$tyrosine_containing_peptides_count[i] / results$total_peptidoforms[i]
results$phosphotyrosine_containing_proportion[i] <- results$phosphotyrosine_containing_peptides_count[i] / results$total_peptidoforms[i]
# Now for threonine
results$threonine_containing_peptides_count[i] <- sum(grepl("T", data$peptidoform_id))
results$phosphothreonine_containing_peptides_count[i] <- sum(grepl("T181", data$peptidoform_id))
# Calculating proportions
results$threonine_containing_proportion[i] <- results$threonine_containing_peptides_count[i] / results$total_peptidoforms[i]
results$phosphothreonine_containing_proportion[i] <- results$phosphothreonine_containing_peptides_count[i] / results$total_peptidoforms[i]
## and for serine
results$serine_containing_peptides_count[i] <- sum(grepl("S", data$peptidoform_id))
results$phosphoserine_containing_peptides_count[i] <- sum(grepl("S167", data$peptidoform_id))
# Calculating proportions
results$serine_containing_proportion[i] <- results$serine_containing_peptides_count[i] / results$total_peptidoforms[i]
results$phosphoserine_containing_proportion[i] <- results$phosphoserine_containing_peptides_count[i] / results$total_peptidoforms[i]
}
# might be interesting to look at what fraction of tyrosine-containing are 'phosphorylated'
results$phospho_to_total_tyrosine_ratio <- results$phosphotyrosine_containing_peptides_count /
results$tyrosine_containing_peptides_count
# Ratio of phospho-Threonine to total Threonine-containing peptides
results$phospho_to_total_threonine_ratio <- results$phosphothreonine_containing_peptides_count / results$threonine_containing_peptides_count
# Ratio of phospho-Threonine to total Threonine-containing peptides
results$phospho_to_total_threonine_ratio <- results$phosphothreonine_containing_peptides_count / results$threonine_containing_peptides_count
# Ratio of phospho-serine to total serine-containing peptides
results$phospho_to_total_serine_ratio <- results$phosphoserine_containing_peptides_count / results$serine_containing_peptides_count
# View the results
print(results)
View(results)
write.csv(results, file = "../out/PTM_proportions_results_by_bin.csv", row.names = FALSE)
library(tidyverse)
library(stringr)
###### Function to get clean filenames, and round and extract bin boundaries ######
clean_round_extract <- function(name, index) {
#separate the name into pars splitting at _
parts <- unlist(strsplit(name, "_"))
# Rounding the numbers to the fourth decimal place; lower bin boundary is the 2nd part, upper is the 3rd part
lower <- round(as.numeric(parts[2]), 4)
upper <- round(as.numeric(parts[3]), 4)
# Storing the boundaries
# index = 1
lower_boundaries[length(lower_boundaries) + 1] <<- lower
upper_boundaries[length(upper_boundaries) + 1] <<- upper
# Reconstructing the cleaned name (and returning it)
return(paste0("mz_", lower, "_", upper))
}
clean_data <- function(data) {
for (i in 1:ncol(data)) {
cleaned_col <- lapply(data[, i], function(x) {
clean_string <- gsub("\\[|\\]|'", "", x)
if (i == 5) {
clean_string <- gsub(";", ",", clean_string)
}
elements <- unlist(strsplit(clean_string, ',\\s*'))
return(elements)
})
if (i == 2) {
data[, i] <- sapply(cleaned_col, function(x) paste(x, collapse = ", "))
} else {
data[, i] <- sapply(cleaned_col, function(x) paste(unique(x), collapse = ", "))
}
}
return(data)
}
# TODO: turn beow into a function to keep my environment tidy?
# # List of all objects in the environment
# all_objects <- ls()
#
# # List of objects to keep (replace these with your actual data object names)
# data_objects <- c("postGMM_data")
#
# # Objects to remove
# objects_to_remove <- setdiff(all_objects, data_objects)
#
# # Remove the objects
# rm(list = objects_to_remove)
#
# # Clear objects_to_remove to clean up
# rm(objects_to_remove)
#
# rm("all_objects", "data_objects")
# specify the extension unique to your calibrated files
extension = "postGMM"
wd <- "C:/Users/jtzve/Genomics Dropbox/Jordan Tzvetkov/0_Projects/Sulfotyrosine Project/out/up_to_date_by_2024_09_01/data_by_GMM_bin/01_wide bins/"
# get all files of interest
bin_data_files <- list.files(wd, pattern = extension, full.names = TRUE, recursive = TRUE)
# and get file path (not reltive!)
input_filenames <- basename(bin_data_files)
# read in all data one by one into an empty list, setting each data frame as a
# new elemnt of the list.
postGMM_data <- list()
print("reading in data")
for (i in 1:length(bin_data_files)) {
print(bin_data_files[[i]])
postGMM_data[[i]] <- read.csv(bin_data_files[[i]])
print(i/length(input_filenames)*100)
}
# read in all human proteins for data filtering - from Swiss Prot
Swiss_Prot_Human <- read.csv(file = "C:/Users/jtzve/Genomics Dropbox/Jordan Tzvetkov/0_Projects/Sulfotyrosine Project/data/SwissProt_Human_proteins.tsv"
, sep = "\t")
setwd("C:/Users/jtzve/Desktop/Sufo_Tyrosine/03_Post_GMM_analysis/scripts")
setwd("C:/Users/jtzve/Desktop/Sufo_Tyrosine/03_Post_GMM_analysis/")
wd()
getwd()
wd <- "C:/Users/jtzve/Desktop/Sufo_Tyrosine/03_Post_GMM_analysis"
# specify the extension unique to your calibrated files
extension = "postGMM"
data_dir <- "C:/Users/jtzve/Desktop/Sufo_Tyrosine/03_Post_GMM_analysis/data/02_medium bins/"
# get all files of interest
bin_data_files <- list.files(data_dir, pattern = extension, full.names = TRUE, recursive = TRUE)
# and get file path (not reltive!)
input_filenames <- basename(bin_data_files)
# read in all data one by one into an empty list, setting each data frame as a
# new elemnt of the list.
postGMM_data <- list()
print("reading in data")
for (i in 1:length(bin_data_files)) {
print(bin_data_files[[i]])
postGMM_data[[i]] <- read.csv(bin_data_files[[i]])
print(i/length(input_filenames)*100)
}
# read in all human proteins for data filtering - from Swiss Prot
Swiis_Prot_data_file <- "C:/Users/jtzve/Desktop/Sufo_Tyrosine/03_Post_GMM_analysis/data/SwissProtLibrary_2024_01_17.tsv"
Swiss_Prot_Human <- read.csv(file = Swiis_Prot_data_file, sep = "\t")
View(Swiss_Prot_Human)
# clean the names - remove .csv, round the ranges, leave just the range and put mz before it
# reatin information about bin ID == clean names, lower boundary, upper boundary to then put in a dataframe
# Cleaning the names
cleaned_names <- gsub("postGMM_fitting_binrange", "mz", input_filenames)
cleaned_names <- gsub(".csv", "", cleaned_names, fixed = TRUE)
# Now, cleaned_names should have the format like 'mz_0.300-0.400'
# Initialize empty vectors to store upper and lower boundaries
lower_boundaries <- numeric()
upper_boundaries <- numeric()
# Applying the function to each name and storing the results
cleaned_names <- sapply(cleaned_names, clean_round_extract, seq_along(cleaned_names))
###### Function to get clean filenames, and round and extract bin boundaries ######
clean_round_extract <- function(name, index) {
#separate the name into pars splitting at _
parts <- unlist(strsplit(name, "_"))
# Rounding the numbers to the fourth decimal place; lower bin boundary is the 2nd part, upper is the 3rd part
lower <- round(as.numeric(parts[2]), 4)
upper <- round(as.numeric(parts[3]), 4)
# Storing the boundaries
# index = 1
lower_boundaries[length(lower_boundaries) + 1] <<- lower
upper_boundaries[length(upper_boundaries) + 1] <<- upper
# Reconstructing the cleaned name (and returning it)
return(paste0("mz_", lower, "_", upper))
}
clean_data <- function(data) {
for (i in 1:ncol(data)) {
cleaned_col <- lapply(data[, i], function(x) {
clean_string <- gsub("\\[|\\]|'", "", x)
if (i == 5) {
clean_string <- gsub(";", ",", clean_string)
}
elements <- unlist(strsplit(clean_string, ',\\s*'))
return(elements)
})
if (i == 2) {
data[, i] <- sapply(cleaned_col, function(x) paste(x, collapse = ", "))
} else {
data[, i] <- sapply(cleaned_col, function(x) paste(unique(x), collapse = ", "))
}
}
return(data)
}
# TODO: turn beow into a function to keep my environment tidy?
# # List of all objects in the environment
# all_objects <- ls()
#
# # List of objects to keep (replace these with your actual data object names)
# data_objects <- c("postGMM_data")
#
# # Objects to remove
# objects_to_remove <- setdiff(all_objects, data_objects)
#
# # Remove the objects
# rm(list = objects_to_remove)
#
# # Clear objects_to_remove to clean up
# rm(objects_to_remove)
#
# rm("all_objects", "data_objects")
# clean the names - remove .csv, round the ranges, leave just the range and put mz before it
# reatin information about bin ID == clean names, lower boundary, upper boundary to then put in a dataframe
# Cleaning the names
cleaned_names <- gsub("postGMM_fitting_binrange", "mz", input_filenames)
cleaned_names <- gsub(".csv", "", cleaned_names, fixed = TRUE)
# Now, cleaned_names should have the format like 'mz_0.300-0.400'
# Initialize empty vectors to store upper and lower boundaries
lower_boundaries <- numeric()
upper_boundaries <- numeric()
# Applying the function to each name and storing the results
cleaned_names <- sapply(cleaned_names, clean_round_extract, seq_along(cleaned_names))
names(postGMM_data) <- cleaned_names
cleaned_postGMM_data <- list()
for (i in 1:length(postGMM_data)) {
cleaned_postGMM_data[[i]] <- clean_data(postGMM_data[[i]])
print(i/length(postGMM_data))
}
names(cleaned_postGMM_data) <- names(postGMM_data)
bin_of_interest <- cleaned_postGMM_data[["mz_-0.014_-0.006"]]
# for our foreground we only really want phosphotyrosine-containing peptides in
# the bin of interest; reflect that in the background too!
## NB: PTM assignment might not be 100% correct and we want to actually include
# all tyrosine-containing peptidoforms, not just these assigned to have a
# phosphotyrosine because some phosphogroups assigned to be positionally on a
# Threonine or Serine might actually be on a Tyrosine.
tyrosine_containing_foreground <- bin_of_interest[grepl("Y", bin_of_interest$peptidoform_id), ]
tyrosine_containing_foreground
grepl("Y", bin_of_interest$peptidoform_id)
bin_of_interest <- cleaned_postGMM_data[["mz_-0.014_-0.006"]]
View(cleaned_postGMM_data)
bin_of_interest <- cleaned_postGMM_data[["mz_-0.013_-0.007"]]
# for our foreground we only really want phosphotyrosine-containing peptides in
# the bin of interest; reflect that in the background too!
## NB: PTM assignment might not be 100% correct and we want to actually include
# all tyrosine-containing peptidoforms, not just these assigned to have a
# phosphotyrosine because some phosphogroups assigned to be positionally on a
# Threonine or Serine might actually be on a Tyrosine.
tyrosine_containing_foreground <- bin_of_interest[grepl("Y", bin_of_interest$peptidoform_id), ]
View(tyrosine_containing_foreground)
# Save as a TSV file
write.table(phosphotyrosines_foreground, file = "out/medium_bins/tyrosine_containing_foreground.tsv", sep = "\t", row.names =  FALSE, col.names = TRUE, quote = FALSE)
# Save as a TSV file
write.table(tyrosine_containing_foreground, file = "out/medium_bins/tyrosine_containing_foreground.tsv", sep = "\t", row.names =  FALSE, col.names = TRUE, quote = FALSE)
getwd()
# Save as a TSV file
write.table(tyrosine_containing_foreground, file = "./out/medium_bins/tyrosine_containing_foreground.tsv", sep = "\t", row.names =  FALSE, col.names = TRUE, quote = FALSE)
getwd()
setwd("C:/Users/jtzve/Desktop/Sufo_Tyrosine/03_Post_GMM_analysis/")
setwd("C:/Users/jtzve/Desktop/Sufo_Tyrosine/03_Post_GMM_analysis/")
bin_of_interest <- cleaned_postGMM_data[["mz_-0.013_-0.007"]]
# for our foreground we only really want phosphotyrosine-containing peptides in
# the bin of interest; reflect that in the background too!
## NB: PTM assignment might not be 100% correct and we want to actually include
# all tyrosine-containing peptidoforms, not just these assigned to have a
# phosphotyrosine because some phosphogroups assigned to be positionally on a
# Threonine or Serine might actually be on a Tyrosine.
tyrosine_containing_foreground <- bin_of_interest[grepl("Y", bin_of_interest$peptidoform_id), ]
# Save as a TSV file
write.table(tyrosine_containing_foreground, file = "out/medium_bins/tyrosine_containing_foreground.tsv", sep = "\t", row.names =  FALSE, col.names = TRUE, quote = FALSE)
setwd("C:/Users/jtzve/Desktop/Sufo_Tyrosine/03_Post_GMM_analysis/")
knitr::root.dir("C:/Users/jtzve/Desktop/Sufo_Tyrosine/03_Post_GMM_analysis/")
knitr::opts_knit$set(root.dir = "C:/Users/jtzve/Desktop/Sufo_Tyrosine/03_Post_GMM_analysis/")
# Save as a TSV file
write.table(tyrosine_containing_foreground, file = "out/medium_bins/tyrosine_containing_foreground.tsv", sep = "\t", row.names =  FALSE, col.names = TRUE, quote = FALSE)
# Save as a TSV file
write.table(tyrosine_containing_foreground, file = "tyrosine_containing_foreground.tsv", sep = "\t", row.names =  FALSE, col.names = TRUE, quote = FALSE)
# Save as a TSV file
write.table(tyrosine_containing_foreground, file = "../data/medium_bins/tyrosine_containing_foreground.tsv", sep = "\t", row.names =  FALSE, col.names = TRUE, quote = FALSE)
