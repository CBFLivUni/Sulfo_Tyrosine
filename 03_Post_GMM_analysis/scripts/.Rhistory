"pT-containing_as_fraction_of_T-containing",
"pS-containing_as_fraction_of_S-containing")
names(data)[17:19]
data<-w
data <- data[order(data$lower_boundary, decreasing = FALSE), ]
data$bin_ID <- factor(data$bin_ID, levels = data$bin_ID)
names(data)[17:19] <- c("pY-containing_as_fraction_of_Y-containing",
"pT-containing_as_fraction_of_T-containing",
"pS-containing_as_fraction_of_S-containing")
# Open a PDF device to save all plots to a single file
pdf("All_Histograms.pdf", width = 10, height = 8)
# Loop through each column starting from the fourth column
for (i in 4:ncol(data)) {
# Create a histogram for the current column
p <- ggplot(data, aes_string(x = names(data)[i])) +
geom_histogram(bins = 30, fill = "grey") +  # Adjust bins as needed
labs(x = names(data)[i], y = "Frequency") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggtitle(paste("Histogram of", names(data)[i]))
# Print the plot to the PDF device
print(p)
}
data<-w
data <- data[order(data$lower_boundary, decreasing = FALSE), ]
data$bin_ID <- factor(data$bin_ID, levels = data$bin_ID)
names(data)[17:19] <- c("pY_containing_as_fraction_of_Y_containing",
"pT_containing_as_fraction_of_T_containing",
"pS_containing_as_fraction_of_S_containing")
# Open a PDF device to save all plots to a single file
pdf("All_Histograms.pdf", width = 10, height = 8)
# Loop through each column starting from the fourth column
for (i in 4:ncol(data)) {
# Create a histogram for the current column
p <- ggplot(data, aes_string(x = names(data)[i])) +
geom_histogram(bins = 30, fill = "grey") +  # Adjust bins as needed
labs(x = names(data)[i], y = "Frequency") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggtitle(paste("Histogram of", names(data)[i]))
# Print the plot to the PDF device
print(p)
}
# Close the PDF device
dev.off()
# Close the PDF device
dev.off()
data$bin_ID <- factor(data$bin_ID, levels = data$bin_ID)
names(data)[17:19] <- c("pY_containing_as_fraction_of_Y_containing",
"pT_containing_as_fraction_of_T_containing",
"pS_containing_as_fraction_of_S_containing")
data$bin_ID <- factor(data$bin_ID, levels = data$bin_ID)
# Open a PDF device to save all plots to a single file
pdf("All_Histograms.pdf", width = 10, height = 8)
# Loop through each column starting from the fourth column
for (i in 4:ncol(data)) {
# Create a histogram for the current column
p <- ggplot(data, aes_string(x = names(data)[i])) +
geom_histogram(bins = 30, fill = "grey") +  # Adjust bins as needed
labs(x = names(data)[i], y = "Frequency") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggtitle(paste("Histogram of", names(data)[i]))
# Print the plot to the PDF device
print(p)
}
# Close the PDF device
dev.off()
# Open a PDF device to save all plots to a single file
pdf("All_Bar_Plots.pdf", width = 10, height = 8)
# Loop through each column starting from the fourth column
for (i in 4:ncol(data)) {
# Create a bar plot for the tyrosine_containing_peptides_count against bin_ID
p <- ggplot(data, aes(x = bin_ID, y = data[,i])) +
geom_bar(stat = "identity", fill = "blue") +
labs(x = "Bin ID", y = names(data)[i]) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggtitle(paste("Bar Plot of", names(data)[i], "vs Bin ID"))
# Print the plot to the PDF device
print(p)
}
# Close the PDF device
dev.off()
# Open a PDF device to save all plots to a single file
pdf("All_Bar_Plots.pdf", width = 10, height = 8)
# Loop through each column starting from the fourth column
for (i in 4:ncol(data)) {
# Create a bar plot for the tyrosine_containing_peptides_count against bin_ID
p <- ggplot(data, aes(x = bin_ID, y = data[,i])) +
geom_bar(stat = "identity", fill = "grey") +
labs(x = "Bin ID", y = names(data)[i]) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggtitle(paste("Bar Plot of", names(data)[i], "vs Bin ID"))
# Print the plot to the PDF device
print(p)
}
# Close the PDF device
dev.off()
data<-n
data <- data[order(data$lower_boundary, decreasing = FALSE), ]
data$bin_ID <- factor(data$bin_ID, levels = data$bin_ID)
names(data)[17:19] <- c("pY_containing_as_fraction_of_Y_containing",
"pT_containing_as_fraction_of_T_containing",
"pS_containing_as_fraction_of_S_containing")
# Open a PDF device to save all plots to a single file
pdf("All_Bar_Plots.pdf", width = 10, height = 8)
# Loop through each column starting from the fourth column
for (i in 4:ncol(data)) {
# Create a bar plot for the tyrosine_containing_peptides_count against bin_ID
p <- ggplot(data, aes(x = bin_ID, y = data[,i])) +
geom_bar(stat = "identity", fill = "grey") +
labs(x = "Bin ID", y = names(data)[i]) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggtitle(paste("Bar Plot of", names(data)[i], "vs Bin ID"))
# Print the plot to the PDF device
print(p)
}
# Close the PDF device
dev.off()
data<-m
data <- data[order(data$lower_boundary, decreasing = FALSE), ]
data$bin_ID <- factor(data$bin_ID, levels = data$bin_ID)
names(data)[17:19] <- c("pY_containing_as_fraction_of_Y_containing",
"pT_containing_as_fraction_of_T_containing",
"pS_containing_as_fraction_of_S_containing")
# Open a PDF device to save all plots to a single file
pdf("All_Bar_Plots_medium_bins.pdf", width = 10, height = 8)
# Loop through each column starting from the fourth column
for (i in 4:ncol(data)) {
# Create a bar plot for the tyrosine_containing_peptides_count against bin_ID
p <- ggplot(data, aes(x = bin_ID, y = data[,i])) +
geom_bar(stat = "identity", fill = "grey") +
labs(x = "Bin ID", y = names(data)[i]) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggtitle(paste("Bar Plot of", names(data)[i], "vs Bin ID"))
# Print the plot to the PDF device
print(p)
}
# Close the PDF device
dev.off()
bin_of_interest <- cleaned_postGMM_data[["mz_0.011_0.017"]]
# for our foreground we only really want phosphotyrosine-containing peptides in
# the bin of interest; reflect that in the background too!
## NB: PTM assignment might not be 100% correct and we want to actually include
# all tyrosine-containing peptidoforms, not just these assigned to have a
# phosphotyrosine because some phosphogroups assigned to be positionally on a
# Threonine or Serine might actually be on a Tyrosine.
tyrosines_containing_foreground <- bin_of_interest[grepl("Y", bin_of_interest$peptidoform_id), ]
# Save as a TSV file
write.table(tyrosines_containing_foreground, file = paste0(project_dir,"out/medium_bins/mz_0.011_0.017_tyrosine_containing_foreground.tsv"), sep = "\t", row.names =  FALSE, col.names = TRUE, quote = FALSE)
# first generate a list of lists with the foreground IDs
# the list is the protein IDs column, with each sublist representinc a row cell split at the ',' separator between different IDs
foreground_id_list <- lapply(strsplit(tyrosines_containing_foreground$protein, ", "), function(x) unlist(strsplit(x, ", ")))
# clean them up to be able to match bakc to SwissProt library
clean_foreground_ID_list  <- lapply(foreground_id_list, ProteinIDCleaningFunction)
# keep only unique IDs for each row (sublist)
foreground_cleaned_IDs <- lapply(clean_foreground_ID_list, unique)
# process each sublist in foreground_cleaned_IDs to return the SwissProt Entry
# if there is one, if not retain prevous ID(s)
foreground_cleaned_IDs <- lapply(foreground_cleaned_IDs, process_sublist, Swiss_Prot_Human, neXtProt_list, RefSeq_list)
# Flatten the foreground_cleaned_IDs list to then add to our data frame
flattened_foreground_cleaned_IDs <- sapply(foreground_cleaned_IDs, function(x) paste(x, collapse = ","))
tyrosines_containing_foreground$cleaned_protein_IDs <- flattened_foreground_cleaned_IDs
# filter to only include rows with SwissProt Entry hits
tyrosines_containing_foreground_inSwissProt <- tyrosines_containing_foreground[tyrosines_containing_foreground$cleaned_protein_IDs %in% Swiss_Prot_Human$Entry,]
# Then write the data frame to a file
write.table(tyrosines_containing_foreground_inSwissProt, file = "../out/medium_bins/tyrosine_containing_foreground_DECOYBIN_inSwissProt.tsv", sep = "\t", row.names = FALSE, col.names = TRUE, quote = FALSE)
# also write the ones with no hit
tyrosines_containing_foreground_UNMATCHED <- tyrosines_containing_foreground[!tyrosines_containing_foreground$cleaned_protein_IDs %in% Swiss_Prot_Human$Entry,]
write.table(tyrosines_containing_foreground_UNMATCHED, file = "../out/medium_bins/tyrosine_containing_foreground_DECOYBIN_UNMATCHED.tsv", sep = "\t", row.names = FALSE, col.names = TRUE, quote = FALSE)
library(clusterProfiler)
library(clusterProfiler)
library(org.Hs.eg.db)
library(biomaRt)
library(devtools)
## convert the SwissProt IDs to Ensembl gene IDs
# Connect to the Ensembl database
ensembl <- useMart("ensembl", dataset = "hsapiens_gene_ensembl")
# Get the corresponding Entrez IDs for all UniProt IDs that we can
Uniprot = getBM(
attributes=c('ensembl_gene_id','uniprotswissprot'),
mart = ensembl)
# 85 of our background IDs do not have an ENSEMBL gene ID (via biomart):
sum(!tyrosines_containing_background_inSwissProt$cleaned_protein_IDs %in% Uniprot$uniprotswissprot)
# first generate a list of lists with the background IDs
# the list is the protein IDs column, with each sublist representinc a row cell split at the ',' separator between different IDs
background_id_list <- lapply(strsplit(tyrosines_containing_background$protein, ", "), function(x) unlist(strsplit(x, ", ")))
# clean them up to be able to match bakc to SwissProt library
clean_background_ID_list  <- lapply(background_id_list, ProteinIDCleaningFunction)
# keep only unique IDs for each row (sublist)
background_cleaned_IDs <- lapply(clean_background_ID_list, unique)
# process each sublist in background_cleaned_IDs to return the SwissProt Entry
# if there is one, if not retain prevous ID(s)
background_cleaned_IDs <- lapply(background_cleaned_IDs, process_sublist, Swiss_Prot_Human, neXtProt_list, RefSeq_list)
# Flatten the background_cleaned_IDs list to then add to our data frame
flattened_background_cleaned_IDs <- sapply(background_cleaned_IDs, function(x) paste(x, collapse = ","))
tyrosines_containing_background$cleaned_protein_IDs <- flattened_background_cleaned_IDs
# filter to only include rows with SwissProt Entry hits
tyrosines_containing_background_inSwissProt <- tyrosines_containing_background[tyrosines_containing_background$cleaned_protein_IDs %in% Swiss_Prot_Human$Entry,]
# Then write the data frame to a file
write.table(tyrosines_containing_background_inSwissProt, file = "../out/medium_bins/tyrosine_containing_background_inSwissProt_2.tsv", sep = "\t", row.names = FALSE, col.names = TRUE, quote = FALSE)
# also write the ones with no hit
tyrosines_containing_background_UNMATCHED <- tyrosines_containing_background[!tyrosines_containing_background$cleaned_protein_IDs %in% Swiss_Prot_Human$Entry,]
write.table(tyrosines_containing_background_UNMATCHED, file = "../out/medium_bins/tyrosine_containing_background_UNMATCHED_2.tsv", sep = "\t", row.names = FALSE, col.names = TRUE, quote = FALSE)
# for background we only want phosphotyrosines but from across ALL bins
# first get all bin data together and only keep unique rows (as some peptidoforms that could have bi or trimodal distribution may be captured in multiple bins)
tyrosines_containing_background <- bind_rows(cleaned_postGMM_data) %>% distinct()
library(tidyverse)
library(stringr)
project_dir = "C:/Users/jtzve/Desktop/Sufo_Tyrosine/03_Post_GMM_analysis/"
data_dir <- "C:/Users/jtzve/Desktop/Sufo_Tyrosine/03_Post_GMM_analysis/data/02_medium bins/"
#### NB bin selected was mz_0.011_0.017 - similar number of peptidoforms
gc()
###### Function to get clean filenames, and round and extract bin boundaries ######
clean_round_extract <- function(name, index) {
#separate the name into pars splitting at _
parts <- unlist(strsplit(name, "_"))
# Rounding the numbers to the fourth decimal place; lower bin boundary is the 2nd part, upper is the 3rd part
lower <- round(as.numeric(parts[2]), 4)
upper <- round(as.numeric(parts[3]), 4)
# Storing the boundaries
# index = 1
lower_boundaries[length(lower_boundaries) + 1] <<- lower
upper_boundaries[length(upper_boundaries) + 1] <<- upper
# Reconstructing the cleaned name (and returning it)
return(paste0("mz_", lower, "_", upper))
}
clean_data <- function(data) {
for (i in 1:ncol(data)) {
cleaned_col <- lapply(data[, i], function(x) {
clean_string <- gsub("\\[|\\]|'", "", x)
if (i == 5) {
clean_string <- gsub(";", ",", clean_string)
}
elements <- unlist(strsplit(clean_string, ',\\s*'))
return(elements)
})
if (i == 2) {
data[, i] <- sapply(cleaned_col, function(x) paste(x, collapse = ", "))
} else {
data[, i] <- sapply(cleaned_col, function(x) paste(unique(x), collapse = ", "))
}
}
return(data)
}
# function to clean the protein IDs in the Input data
ProteinIDCleaningFunction <- function(IDs) {
# step one, deal with NX_ etries
# Remove "NX_" prefix and any the suffix following a dash
cleaned_IDs <- gsub("(^NX_[^-]+)-.*", "\\1", IDs)
# step 2, deal with sp/ID/ cases
# Keep everything after "sp|" and before the second "|"
cleaned_IDs <- gsub(".*sp\\|([^|]+)\\|.*", "\\1", cleaned_IDs)
# step 3 deal with gi|315259111|ref|NP_001186752.1| cases
cleaned_IDs <- gsub(".*gi\\|[^|]+\\|ref\\|(NP_[^|]+).*", "\\1", cleaned_IDs)
# looks for strings starting with gi and keeps
# all text after the first occurance of NP_ up until but excluding the first subsequent |
# # Step 4: Handle cases starting with "CONTRIB" and keep everything after the last underscore "_"
# cleaned_IDs <- gsub("^CONTRIB_([^_]+)_.*", "\\1", cleaned_IDs)
# ### NB: These are gene names and not UniProt Entry IDs, so we actually want to do that step later and convert from gene name to UniProt ID.
# after cleaning,keep only the unique IDs at this stage
cleaned_IDs <- unique(cleaned_IDs)
return(cleaned_IDs)
}
## for getting next prot and Ref seq IDs from the SwissProt library
split_ids <- function(string) {
# First, try splitting with "; "
split_result <- strsplit(string, "; ")
# If the length of any split_result is 1, it means there was no "; " to split on
# In this case, try splitting with just ";"
if (any(sapply(split_result, length) == 1)) {
split_result <- strsplit(string, ";")
}
return(split_result)
}
## to process a sublist of a list of lists where each sublist is a row cell of
# the protein IDs.
# for each sublist of IDs:
#
# 1) check if any of the IDs have a hit in Swiss_Prot_Human$Entry
# if yes replace that sublist with only the IDs with a hit (unlikely to be multiple)
# 2) if not check if any of the IDs have a hit in Swiss_Prot_Human$neXtProt
# if yes retrieve the Swiss_Prot_Human$Entry for that row of Siwss_Prot_Human, then retain that Entry ID and replace the sublist with it
# 3) if not, check if any of the IDs have a hit in Swiss_Prot_Human$RefSeq
# if yes retrieve the Swiss_Prot_Human$Entry for that row of Siwss_Prot_Human, then retain that Entry ID and replace the sublist with it
# if not keep the sublist as it is
process_sublist <- function(sublist, Swiss_Prot_Human, neXtProt_list, RefSeq_list) {
# Check for hits in Swiss_Prot_Human$Entry
entry_hits <- sublist[sublist %in% Swiss_Prot_Human$Entry]
if (length(entry_hits) > 0) {
return(entry_hits)
}
# Check for hits in Swiss_Prot_Human$neXtProt
for (id in sublist) {
if (any(sapply(neXtProt_list, function(x) id %in% x))) {
matching_row <- which(sapply(neXtProt_list, function(x) id %in% x))
return(Swiss_Prot_Human$Entry[matching_row])
}
}
# Check for hits in Swiss_Prot_Human$RefSeq
for (id in sublist) {
if (any(sapply(RefSeq_list, function(x) id %in% x))) {
matching_row <- which(sapply(RefSeq_list, function(x) id %in% x))
return(Swiss_Prot_Human$Entry[matching_row])
}
}
# If no matches, return the original sublist
return(sublist)
}
# TODO: turn beow into a function to keep my environment tidy?
# # List of all objects in the environment
# all_objects <- ls()
#
# # List of objects to keep (replace these with your actual data object names)
# data_objects <- c("postGMM_data")
#
# # Objects to remove
# objects_to_remove <- setdiff(all_objects, data_objects)
#
# # Remove the objects
# rm(list = objects_to_remove)
#
# # Clear objects_to_remove to clean up
# rm(objects_to_remove)
#
# rm("all_objects", "data_objects")
# our DECOY bin
bin_of_interest <- cleaned_postGMM_data[["mz_0.011_0.017"]]
# for our foreground we only really want phosphotyrosine-containing peptides in
# the bin of interest; reflect that in the background too!
## NB: PTM assignment might not be 100% correct and we want to actually include
# all tyrosine-containing peptidoforms, not just these assigned to have a
# phosphotyrosine because some phosphogroups assigned to be positionally on a
# Threonine or Serine might actually be on a Tyrosine.
tyrosines_containing_foreground <- bin_of_interest[grepl("Y", bin_of_interest$peptidoform_id), ]
# Save as a TSV file
write.table(tyrosines_containing_foreground, file = paste0(project_dir,"out/medium_bins/mz_0.011_0.017_tyrosine_containing_foreground.tsv"), sep = "\t", row.names =  FALSE, col.names = TRUE, quote = FALSE)
# for background we only want phosphotyrosines but from across ALL bins
# first get all bin data together and only keep unique rows (as some peptidoforms that could have bi or trimodal distribution may be captured in multiple bins)
tyrosines_containing_background <- bind_rows(cleaned_postGMM_data) %>% distinct()
# filter down to only include phosphotyrosine-containing peptides
tyrosines_containing_background <- tyrosines_containing_background[grepl("Y", tyrosines_containing_background$peptidoform_id), ]
# save
write.table(tyrosines_containing_background, file = paste0(project_dir,"out/medium_bins/tyrosine_containing_background.tsv"),
sep = "\t", row.names =  FALSE, col.names = TRUE, quote = FALSE)
# first generate a list of lists with the background IDs
# the list is the protein IDs column, with each sublist representinc a row cell split at the ',' separator between different IDs
background_id_list <- lapply(strsplit(tyrosines_containing_background$protein, ", "), function(x) unlist(strsplit(x, ", ")))
# clean them up to be able to match bakc to SwissProt library
clean_background_ID_list  <- lapply(background_id_list, ProteinIDCleaningFunction)
# keep only unique IDs for each row (sublist)
background_cleaned_IDs <- lapply(clean_background_ID_list, unique)
# process each sublist in background_cleaned_IDs to return the SwissProt Entry
# if there is one, if not retain prevous ID(s)
background_cleaned_IDs <- lapply(background_cleaned_IDs, process_sublist, Swiss_Prot_Human, neXtProt_list, RefSeq_list)
# Flatten the background_cleaned_IDs list to then add to our data frame
flattened_background_cleaned_IDs <- sapply(background_cleaned_IDs, function(x) paste(x, collapse = ","))
tyrosines_containing_background$cleaned_protein_IDs <- flattened_background_cleaned_IDs
# filter to only include rows with SwissProt Entry hits
tyrosines_containing_background_inSwissProt <- tyrosines_containing_background[tyrosines_containing_background$cleaned_protein_IDs %in% Swiss_Prot_Human$Entry,]
# Then write the data frame to a file
write.table(tyrosines_containing_background_inSwissProt, file = "../out/medium_bins/tyrosine_containing_background_inSwissProt_2.tsv", sep = "\t", row.names = FALSE, col.names = TRUE, quote = FALSE)
# also write the ones with no hit
tyrosines_containing_background_UNMATCHED <- tyrosines_containing_background[!tyrosines_containing_background$cleaned_protein_IDs %in% Swiss_Prot_Human$Entry,]
write.table(tyrosines_containing_background_UNMATCHED, file = "../out/medium_bins/tyrosine_containing_background_UNMATCHED_2.tsv", sep = "\t", row.names = FALSE, col.names = TRUE, quote = FALSE)
# 85 of our background IDs do not have an ENSEMBL gene ID (via biomart):
sum(!tyrosines_containing_background_inSwissProt$cleaned_protein_IDs %in% Uniprot$uniprotswissprot)
# subset to only include these who do
background <- tyrosines_containing_background_inSwissProt[tyrosines_containing_background_inSwissProt$cleaned_protein_IDs %in% Uniprot$uniprotswissprot,]
# Match SwissProt IDs in the Uniprot data frame to get the position index
matched_indices <- match(background$cleaned_protein_IDs, Uniprot$uniprotswissprot)
# Extract corresponding ENSEMBL Gene IDs
background_genes <- Uniprot$ensembl_gene_id[matched_indices]
# Remove NAs if any (in case some SwissProt IDs didn't have a match)
background_genes <- na.omit(background_genes)
# subset to only include these who do
foreground <- tyrosines_containing_foreground_inSwissProt[tyrosines_containing_foreground_inSwissProt$cleaned_protein_IDs %in% Uniprot$uniprotswissprot,]
# Match SwissProt IDs in the Uniprot data frame to get the position index
matched_indices <- match(foreground$cleaned_protein_IDs, Uniprot$uniprotswissprot)
# Extract corresponding ENSEMBL Gene IDs
foreground_genes <- Uniprot$ensembl_gene_id[matched_indices]
# Remove NAs if any (in case some SwissProt IDs didn't have a match)
foreground_genes <- na.omit(foreground_genes)
# 0 of our foreground IDs do not have an ENSEMBL gene ID (via biomart):
sum(!tyrosines_containing_foreground_inSwissProt$cleaned_protein_IDs %in% Uniprot$uniprotswissprot)
cluster_GO_MF <- enrichGO(gene      = foreground_genes,
universe     = background_genes,
OrgDb        = org.Hs.eg.db,  # human annotation
keyType      = "ENSEMBL", #just to make sure
ont          = "MF",  # For Biological Process; can use "MF" for Molecular Function or "CC" for Cellular Component
pAdjustMethod = "BH", # Benjamini-Hochberg
pvalueCutoff = 0.05,
qvalueCutoff = 0.05)
########### now for molecular function
GO_term_dataframe_MF <- as.data.frame(cluster_GO_MF)
goplot(cluster_GO_MF)
goplot(cluster_GO_MF)
barplot(cluster_GO_MF)
cluster_GO_CC <- enrichGO(gene         = foreground_genes,
universe     = background_genes,
OrgDb        = org.Hs.eg.db,  # human annotation
keyType      = "ENSEMBL", #just to make sure
ont          = "CC",  # For Biological Process; can use "MF" for Molecular Function or "CC" for Cellular Component
pAdjustMethod = "BH", # Benjamini-Hochberg
pvalueCutoff = 0.05,
qvalueCutoff = 0.05)
GO_term_dataframe_CC <- as.data.frame(cluster_GO_CC)
goplot(cluster_GO_CC)
barplot(cluster_GO_CC)
GO_term_dataframe_CC
goplot(cluster_GO_MF)
######### now for biological processes
cluster_GO_BP <- enrichGO(gene         = foreground_genes,
universe     = background_genes,
OrgDb        = org.Hs.eg.db,  # human annotation
keyType      = "ENSEMBL", #just to make sure
ont          = "BP",  # For Biological Process; can use "MF" for Molecular Function or "CC" for Cellular Component
pAdjustMethod = "BH", # Benjamini-Hochberg
pvalueCutoff = 0.05,
qvalueCutoff = 0.05)
GO_term_dataframe_BP <- as.data.frame(cluster_GO_BP)
goplot(cluster_GO_BP)
barplot(cluster_GO_BP)
library(GOSemSim)
library(enrichplot)
# NB: treeplot might not be a good choice as we have a small number of enriched terms!
# Use function 'godata' to create a GO similarity data object
# since BP had no significant hits lets only do it for MF; CC only had 3 GO terms
GO_similarity_MF <- godata('org.Hs.eg.db', ont="MF")
### to fix Error in offspring.tbl_tree_item(.data = .data, .node = .node, tiponly = tiponly,  : could not find function "offspring.tbl_tree_item" I copied this solution from: https://github.com/YuLab-SMU/enrichplot/issues/249
nodeid.tbl_tree <- utils::getFromNamespace("nodeid.tbl_tree", "tidytree")
rootnode.tbl_tree <- utils::getFromNamespace("rootnode.tbl_tree", "tidytree")
offspring.tbl_tree <- utils::getFromNamespace("offspring.tbl_tree", "tidytree")
offspring.tbl_tree_item <- utils::getFromNamespace(".offspring.tbl_tree_item", "tidytree")
library(tidytree)
offspring.tbl_tree_item <- utils::getFromNamespace(".offspring.tbl_tree_item", "tidytree")
library(tidyverse)
offspring.tbl_tree_item <- utils::getFromNamespace(".offspring.tbl_tree_item", "tidytree")
child.tbl_tree <- utils::getFromNamespace("child.tbl_tree", "tidytree")
parent.tbl_tree <- utils::getFromNamespace("parent.tbl_tree", "tidytree")
# Add similarity matrix to the enrichment result
cluster_GO_tree <- pairwise_termsim(cluster_GO_MF, method = "Wang", semData = GO_similarity_MF)
treeplot(cluster_GO_tree)
cluster_GO_tree
# I might need entrez IDs, otherwise I get NULL
library(biomaRt)
library(ggplot2)
ensembl <- useMart("ensembl", dataset = "hsapiens_gene_ensembl")
foreground_entrez <- getBM(attributes = c('ensembl_gene_id', 'entrezgene_id'),
filters = 'ensembl_gene_id',
values = foreground_genes,
mart = ensembl)
background_entrez <- getBM(attributes = c('ensembl_gene_id', 'entrezgene_id'),
filters = 'ensembl_gene_id',
values = background_genes,
mart = ensembl)
# make sure to convert to character too!
foreground_entrez_ids <- as.character(na.omit(foreground_entrez$entrezgene_id))
background_entrez_ids <- as.character(na.omit(background_entrez$entrezgene_id))
kegg_enrichment <- enrichKEGG(
gene = foreground_entrez_ids,
universe = background_entrez_ids,
organism = 'hsa',
pvalueCutoff = 0.5, ##changed so the top 2 hits would appear; this is adjusted p value!
qvalueCutoff = 1 # this does not affect anything
)
dotplot(kegg_enrichment, showCategory = 10, font.size = 8) # returns only top 2
kegg_enrichment
kegg_enrichment <- enrichKEGG(
gene = foreground_entrez_ids,
universe = background_entrez_ids,
organism = 'hsa',
pvalueCutoff = 1, ##changed so the top 2 hits would appear; this is adjusted p value!
qvalueCutoff = 1 # this does not affect anything
)
kegg_enrichment
# do dotplot manually
# extract df
KEGG_df <- kegg_enrichment@result
View(KEGG_df)
# filter down to just p<0.05
KEGG_Significant_Pathways <- KEGG_df[KEGG_df$pvalue <0.05,]
names(KEGG_Significant_Pathways)
KEGG_Significant_Pathways$GeneRatio <- sapply(strsplit(KEGG_Significant_Pathways$GeneRatio, "/"), function(x) as.numeric(x[1]) / as.numeric(x[2]))
ggplot(KEGG_Significant_Pathways, aes(y = reorder(Description, -pvalue), x = GeneRatio)) +
geom_point(aes(size = Count, color = pvalue)) +
scale_color_gradient(low = "red", high = "blue") +
labs(y = "Description", x = "Gene Ratio", color = "pvalue", size = "Count") +
theme_bw() +
theme(
legend.position = "right",
axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),
plot.title = element_text(hjust = 0.5)
) +
ggtitle("KEGG Pathways with p<0.05")
ggsave("../out/medium_bins/KEGG_dotplot_bw_DECOY.png", plot = last_plot(), width = 6, height = 4, dpi = 300)
KEGG_Significant_Pathways
View(kegg_enrichment)
View(KEGG_Significant_Pathways)
lenghth(unique(tyrosines_containing_background_inSwissProt$protein))
length(unique(tyrosines_containing_background_inSwissProt$protein))
library(ReactomePA)
reactome_ORA <- enrichPathway(gene=foreground_entrez_ids,
universe=background_entrez_ids,
pvalueCutoff = 1, readable=TRUE)
reactome_ORA
#no hits at pcutoff 0.05
head(reactome_ORA)
