dpi = 600)
GO_term_dataframe_MF$Description <- str_wrap(GO_term_dataframe_MF$Description, width = 50)
D1_MF <- ggplot(GO_term_dataframe_MF, aes(x = GeneRatio, y = reorder(Description, GeneRatio), size = Count, color = p.adjust)) +
geom_point() + # Create the dots
scale_color_gradient(low = "red", high = "blue") + # Color gradient from low (good) to high (bad) p-values
theme_bw() +
scale_size(range = c(3, 8)) +
labs(
title = "BOI_GO_MF",
x = "Gene Ratio",
size = "Count",
color = "p.adjusted"
) +
theme(
legend.position = "right",
axis.text.x = element_text(angle = 45, hjust = 1, size = 12),
axis.text.y = element_text(angle = 0,hjust = 1, size = 10),
axis.ticks.length.x = unit(2, "mm"),
axis.ticks = element_line(linewidth = 1),
axis.title.x = element_text(size = 12),
# plot.title = element_text(size = 12),
plot.title = element_blank(),
axis.title.y = element_blank(),
legend.text = element_text(size = 10)
)
D1_MF
ggsave("../out/15pc_sum_AUC_results/plots_to_show/pathway enrichment/D1_GO_MF.png",
plot = D1_MF,
width = width_in_inches ,
height = height_in_inches, units = "in",
dpi = 600)
# make consistent across
BOI_MF <- BOI_MF + scale_size(range = c(3, 8)) +
theme(
legend.position = "right",
axis.text.x = element_text(angle = 45, hjust = 1, size = 12),
axis.text.y = element_text(angle = 0, hjust = 1, face = "plain", size = 10),
axis.ticks.length.x = unit(2, "mm"),
axis.ticks = element_line(linewidth = 1),
axis.title.x = element_blank(),
# plot.title = element_text(size = 12),
plot.title = element_blank(),
axis.title.y = element_blank(),
legend.text = element_text(size = 10)
)
# in figure i have each plot at 4.5 * 5.6 cm, but this is too small to fit the plot?
width_in_inches <- 5.6
height_in_inches <- 4.5
BOI_MF
ggsave("../out/15pc_sum_AUC_results/plots_to_show/pathway enrichment/BOI_GO_MF.png",
plot = BOI_MF,
width = width_in_inches,
height = height_in_inches, units = "in",
dpi = 600)
D1_MF <- ggplot(GO_term_dataframe_MF, aes(x = GeneRatio, y = reorder(Description, GeneRatio), size = Count, color = p.adjust)) +
geom_point() + # Create the dots
scale_color_gradient(low = "red", high = "blue") + # Color gradient from low (good) to high (bad) p-values
theme_bw() +
scale_size(range = c(3, 8)) +
labs(
title = "BOI_GO_MF",
x = "Gene Ratio",
size = "Count",
color = "p.adjusted"
) +
theme(
legend.position = "right",
axis.text.x = element_text(angle = 45, hjust = 1, size = 12),
axis.text.y = element_text(angle = 0,hjust = 1, size = 10),
axis.ticks.length.x = unit(2, "mm"),
axis.ticks = element_line(linewidth = 1),
axis.title.x = element_blank(),
# plot.title = element_text(size = 12),
plot.title = element_blank(),
axis.title.y = element_blank(),
legend.text = element_text(size = 10)
)
D1_MF
ggsave("../out/15pc_sum_AUC_results/plots_to_show/pathway enrichment/D1_GO_MF.png",
plot = D1_MF,
width = width_in_inches ,
height = height_in_inches, units = "in",
dpi = 600)
D1_BP <- ggplot(GO_term_dataframe_BP, aes(x = GeneRatio, y = reorder(Description, GeneRatio), size = Count, color = p.adjust)) +
geom_point() + # Create the dots
scale_color_gradient(low = "red", high = "blue") + # Color gradient from low (good) to high (bad) p-values
theme_bw() +
scale_size(range = c(3, 8)) +
labs(
title = "BOI_GO_BP",
x = "Gene Ratio",
size = "Count",
color = "p.adjusted"
) +
theme(
legend.position = "right",
axis.text.x = element_text(angle = 45, hjust = 1, size = 12),
axis.text.y = element_text(hjust = 1, size = 12, face = "plain", lineheight = 1),
axis.ticks.length.x = unit(2, "mm"),
axis.ticks = element_line(linewidth = 1),
axis.title.x = element_blank(),
# plot.title = element_text(size = 12),
plot.title = element_blank(),
axis.title.y = element_blank(),
legend.text = element_text(size = 10)
)
D1_BP
ggsave("../out/15pc_sum_AUC_results/plots_to_show/pathway enrichment/D1_GO_BP.png",
plot = D1_BP,
width = width_in_inches ,
height = height_in_inches, units = "in",
dpi = 600)
####### CC ##########
gene_ratio <- as.numeric(sapply(strsplit(GO_term_dataframe_CC$GeneRatio, "/"), function(x) as.numeric(x[1]) / as.numeric(x[2])))
GO_term_dataframe_CC$GeneRatio <- gene_ratio
GO_term_dataframe_CC$Description <- str_wrap(GO_term_dataframe_CC$Description, width = 50)
D1_CC <- ggplot(GO_term_dataframe_CC, aes(x = GeneRatio, y = reorder(Description, GeneRatio), size = Count, color = p.adjust)) +
geom_point() + # Create the dots
scale_color_gradient(low = "red", high = "blue") + # Color gradient from low (good) to high (bad) p-values
theme_bw() +
scale_size(range = c(3, 8)) +
labs(
title = "BOI_GO_CC",
x = "Gene Ratio",
size = "Count",
color = "p.adjusted"
) +
theme(
legend.position = "right",
axis.text.x = element_text(angle = 45, hjust = 1, size = 12),
axis.text.y = element_text(hjust = 1, size = 12, face = "plain", lineheight = 1),
axis.ticks.length.x = unit(2, "mm"),
axis.ticks = element_line(linewidth = 1),
axis.title.x = element_blank(),
# plot.title = element_text(size = 12),
plot.title = element_blank(),
axis.title.y = element_blank(),
legend.text = element_text(size = 10)
)
D1_CC
ggsave("../out/15pc_sum_AUC_results/plots_to_show/pathway enrichment/D1_GO_CC.png",
plot = D1_CC,
width = width_in_inches ,
height = height_in_inches, units = "in",
dpi = 600)
# this is A DECOY bin of interest where we expect to find enrichment of sulfotyr
bin_of_interest <- cleaned_postGMM_data[["mz_0.0125_0.0175"]]
# for our foreground we only really want phosphotyrosine-containing peptides in
# the bin of interest; reflect that in the background too!
## NB: PTM assignment might not be 100% correct and we want to actually include
# all tyrosine-containing peptidoforms, not just these assigned to have a
# phosphotyrosine because some phosphogroups assigned to be positionally on a
# Threonine or Serine might actually be on a Tyrosine.
tyrosines_containing_foreground <- bin_of_interest[grepl("Y", bin_of_interest$peptidoform_id), ]
# first generate a list of lists with the foreground IDs
# the list is the protein IDs column, with each sublist representinc a row cell split at the ',' separator between different IDs
foreground_id_list <- lapply(strsplit(tyrosines_containing_foreground$protein, ", "), function(x) unlist(strsplit(x, ", ")))
# clean them up to be able to match bakc to SwissProt library
clean_foreground_ID_list  <- lapply(foreground_id_list, ProteinIDCleaningFunction)
# keep only unique IDs for each row (sublist)
foreground_cleaned_IDs <- lapply(clean_foreground_ID_list, unique)
# process each sublist in foreground_cleaned_IDs to return the SwissProt Entry
# if there is one, if not retain prevous ID(s)
foreground_cleaned_IDs <- lapply(foreground_cleaned_IDs, process_sublist, Swiss_Prot_Human, neXtProt_list, RefSeq_list)
# Flatten the foreground_cleaned_IDs list to then add to our data frame
flattened_foreground_cleaned_IDs <- sapply(foreground_cleaned_IDs, function(x) paste(x, collapse = ","))
tyrosines_containing_foreground$cleaned_protein_IDs <- flattened_foreground_cleaned_IDs
# filter to only include rows with SwissProt Entry hits
tyrosines_containing_foreground_inSwissProt <- tyrosines_containing_foreground[tyrosines_containing_foreground$cleaned_protein_IDs %in% Swiss_Prot_Human$Entry,]
# For foreground dataset
foreground_genes <- extractEnsemblGeneIDs(tyrosines_containing_foreground_inSwissProt, Uniprot)
cluster_GO_MF <- enrichGO(gene      = foreground_genes,
universe     = background_genes,
OrgDb        = org.Hs.eg.db,  # human annotation
keyType      = "ENSEMBL", #just to make sure
ont          = "MF",  # For Biological Process; can use "MF" for Molecular Function or "CC" for Cellular Component
pAdjustMethod = "BH", # Benjamini-Hochberg
pvalueCutoff = 1,
qvalueCutoff = 0.1)
########### now for molecular function
GO_term_dataframe_MF <- as.data.frame(cluster_GO_MF)
cluster_GO_CC <- enrichGO(gene         = foreground_genes,
universe     = background_genes,
OrgDb        = org.Hs.eg.db,  # human annotation
keyType      = "ENSEMBL", #just to make sure
ont          = "CC",  # For Biological Process; can use "MF" for Molecular Function or "CC" for Cellular Component
pAdjustMethod = "BH", # Benjamini-Hochberg
pvalueCutoff = 1,
qvalueCutoff = 0.1)
# this is A DECOY bin of interest where we expect to find enrichment of sulfotyr
bin_of_interest <- cleaned_postGMM_data[["mz_0.0175_0.0225"]]
# for our foreground we only really want phosphotyrosine-containing peptides in
# the bin of interest; reflect that in the background too!
## NB: PTM assignment might not be 100% correct and we want to actually include
# all tyrosine-containing peptidoforms, not just these assigned to have a
# phosphotyrosine because some phosphogroups assigned to be positionally on a
# Threonine or Serine might actually be on a Tyrosine.
tyrosines_containing_foreground <- bin_of_interest[grepl("Y", bin_of_interest$peptidoform_id), ]
# first generate a list of lists with the foreground IDs
# the list is the protein IDs column, with each sublist representinc a row cell split at the ',' separator between different IDs
foreground_id_list <- lapply(strsplit(tyrosines_containing_foreground$protein, ", "), function(x) unlist(strsplit(x, ", ")))
# clean them up to be able to match bakc to SwissProt library
clean_foreground_ID_list  <- lapply(foreground_id_list, ProteinIDCleaningFunction)
# keep only unique IDs for each row (sublist)
foreground_cleaned_IDs <- lapply(clean_foreground_ID_list, unique)
# process each sublist in foreground_cleaned_IDs to return the SwissProt Entry
# if there is one, if not retain prevous ID(s)
foreground_cleaned_IDs <- lapply(foreground_cleaned_IDs, process_sublist, Swiss_Prot_Human, neXtProt_list, RefSeq_list)
# Flatten the foreground_cleaned_IDs list to then add to our data frame
flattened_foreground_cleaned_IDs <- sapply(foreground_cleaned_IDs, function(x) paste(x, collapse = ","))
tyrosines_containing_foreground$cleaned_protein_IDs <- flattened_foreground_cleaned_IDs
# filter to only include rows with SwissProt Entry hits
tyrosines_containing_foreground_inSwissProt <- tyrosines_containing_foreground[tyrosines_containing_foreground$cleaned_protein_IDs %in% Swiss_Prot_Human$Entry,]
# For foreground dataset
foreground_genes <- extractEnsemblGeneIDs(tyrosines_containing_foreground_inSwissProt, Uniprot)
cluster_GO_MF <- enrichGO(gene      = foreground_genes,
universe     = background_genes,
OrgDb        = org.Hs.eg.db,  # human annotation
keyType      = "ENSEMBL", #just to make sure
ont          = "MF",  # For Biological Process; can use "MF" for Molecular Function or "CC" for Cellular Component
pAdjustMethod = "BH", # Benjamini-Hochberg
pvalueCutoff = 1,
qvalueCutoff = 0.1)
########### now for molecular function
GO_term_dataframe_MF <- as.data.frame(cluster_GO_MF)
cluster_GO_CC <- enrichGO(gene         = foreground_genes,
universe     = background_genes,
OrgDb        = org.Hs.eg.db,  # human annotation
keyType      = "ENSEMBL", #just to make sure
ont          = "CC",  # For Biological Process; can use "MF" for Molecular Function or "CC" for Cellular Component
pAdjustMethod = "BH", # Benjamini-Hochberg
pvalueCutoff = 1,
qvalueCutoff = 0.1)
##### MF ######
gene_ratio <- as.numeric(sapply(strsplit(GO_term_dataframe_MF$GeneRatio, "/"), function(x) as.numeric(x[1]) / as.numeric(x[2])))
GO_term_dataframe_MF$GeneRatio <- gene_ratio
GO_term_dataframe_MF$Description <- str_wrap(GO_term_dataframe_MF$Description, width = 50)
D3_MF <- ggplot(GO_term_dataframe_MF, aes(x = GeneRatio, y = reorder(Description, GeneRatio), size = Count, color = p.adjust)) +
geom_point() + # Create the dots
scale_color_gradient(low = "red", high = "blue") + # Color gradient from low (good) to high (bad) p-values
theme_bw() +
scale_size(range = c(3, 8)) +
labs(
title = "BOI_GO_MF",
x = "Gene Ratio",
size = "Count",
color = "p.adjusted"
) +
theme(
legend.position = "right",
axis.text.x = element_text(angle = 45, hjust = 1, size = 12),
axis.text.y = element_text(angle = 0,hjust = 1, size = 10),
axis.ticks.length.x = unit(2, "mm"),
axis.ticks = element_line(linewidth = 1),
axis.title.x = element_blank(),
# plot.title = element_text(size = 12),
plot.title = element_blank(),
axis.title.y = element_blank(),
legend.text = element_text(size = 10)
)
D3_MF
ggsave("../out/15pc_sum_AUC_results/plots_to_show/pathway enrichment/D3_GO_MF.png",
plot = D3_MF,
width = width_in_inches ,
height = height_in_inches, units = "in",
dpi = 600)
GO_term_dataframe_CC <- as.data.frame(cluster_GO_CC)
######### now for biological processes
cluster_GO_BP <- enrichGO(gene         = foreground_genes,
universe     = background_genes,
OrgDb        = org.Hs.eg.db,  # human annotation
keyType      = "ENSEMBL", #just to make sure
ont          = "BP",  # For Biological Process; can use "MF" for Molecular Function or "CC" for Cellular Component
pAdjustMethod = "BH", # Benjamini-Hochberg
pvalueCutoff = 1,
qvalueCutoff =  0.1)
GO_term_dataframe_BP <- as.data.frame(cluster_GO_BP)
####### BP ##########
gene_ratio <- as.numeric(sapply(strsplit(GO_term_dataframe_BP$GeneRatio, "/"), function(x) as.numeric(x[1]) / as.numeric(x[2])))
GO_term_dataframe_BP$GeneRatio <- gene_ratio
GO_term_dataframe_BP$Description <- str_wrap(GO_term_dataframe_BP$Description, width = 50)
D3_BP <- ggplot(GO_term_dataframe_BP, aes(x = GeneRatio, y = reorder(Description, GeneRatio), size = Count, color = p.adjust)) +
geom_point() + # Create the dots
scale_color_gradient(low = "red", high = "blue") + # Color gradient from low (good) to high (bad) p-values
theme_bw() +
scale_size(range = c(3, 8)) +
labs(
title = "BOI_GO_BP",
x = "Gene Ratio",
size = "Count",
color = "p.adjusted"
) +
theme(
legend.position = "right",
axis.text.x = element_text(angle = 45, hjust = 1, size = 12),
axis.text.y = element_text(hjust = 1, size = 12, face = "plain", lineheight = 1),
axis.ticks.length.x = unit(2, "mm"),
axis.ticks = element_line(linewidth = 1),
axis.title.x = element_blank(),
# plot.title = element_text(size = 12),
plot.title = element_blank(),
axis.title.y = element_blank(),
legend.text = element_text(size = 10)
)
D3_BP
GO_term_dataframe_BP$Description <- str_wrap(GO_term_dataframe_BP$Description, width = 30)
D3_BP <- ggplot(GO_term_dataframe_BP, aes(x = GeneRatio, y = reorder(Description, GeneRatio), size = Count, color = p.adjust)) +
geom_point() + # Create the dots
scale_color_gradient(low = "red", high = "blue") + # Color gradient from low (good) to high (bad) p-values
theme_bw() +
scale_size(range = c(3, 8)) +
labs(
title = "BOI_GO_BP",
x = "Gene Ratio",
size = "Count",
color = "p.adjusted"
) +
theme(
legend.position = "right",
axis.text.x = element_text(angle = 45, hjust = 1, size = 12),
axis.text.y = element_text(hjust = 1, size = 12, face = "plain", lineheight = 1),
axis.ticks.length.x = unit(2, "mm"),
axis.ticks = element_line(linewidth = 1),
axis.title.x = element_blank(),
# plot.title = element_text(size = 12),
plot.title = element_blank(),
axis.title.y = element_blank(),
legend.text = element_text(size = 10)
)
D3_BP
ggsave("../out/15pc_sum_AUC_results/plots_to_show/pathway enrichment/D3_GO_BP.png",
plot = D3_BP,
width = width_in_inches ,
height = height_in_inches, units = "in",
dpi = 600)
####### CC ##########
gene_ratio <- as.numeric(sapply(strsplit(GO_term_dataframe_CC$GeneRatio, "/"), function(x) as.numeric(x[1]) / as.numeric(x[2])))
GO_term_dataframe_CC$GeneRatio <- gene_ratio
GO_term_dataframe_CC$Description <- str_wrap(GO_term_dataframe_CC$Description, width = 50)
D3_CC <- ggplot(GO_term_dataframe_CC, aes(x = GeneRatio, y = reorder(Description, GeneRatio), size = Count, color = p.adjust)) +
geom_point() + # Create the dots
scale_color_gradient(low = "red", high = "blue") + # Color gradient from low (good) to high (bad) p-values
theme_bw() +
scale_size(range = c(3, 8)) +
labs(
title = "BOI_GO_CC",
x = "Gene Ratio",
size = "Count",
color = "p.adjusted"
) +
theme(
legend.position = "right",
axis.text.x = element_text(angle = 45, hjust = 1, size = 12),
axis.text.y = element_text(hjust = 1, size = 12, face = "plain", lineheight = 1),
axis.ticks.length.x = unit(2, "mm"),
axis.ticks = element_line(linewidth = 1),
axis.title.x = element_blank(),
# plot.title = element_text(size = 12),
plot.title = element_blank(),
axis.title.y = element_blank(),
legend.text = element_text(size = 10)
)
D3_CC
ggsave("../out/15pc_sum_AUC_results/plots_to_show/pathway enrichment/D3_GO_CC.png",
plot = D3_CC,
width = width_in_inches ,
height = height_in_inches, units = "in",
dpi = 600)
# this is A DECOY bin of interest where we expect to find enrichment of sulfotyr
bin_of_interest <- cleaned_postGMM_data[["mz_-0.0175_-0.0125"]]
# for our foreground we only really want phosphotyrosine-containing peptides in
# the bin of interest; reflect that in the background too!
## NB: PTM assignment might not be 100% correct and we want to actually include
# all tyrosine-containing peptidoforms, not just these assigned to have a
# phosphotyrosine because some phosphogroups assigned to be positionally on a
# Threonine or Serine might actually be on a Tyrosine.
tyrosines_containing_foreground <- bin_of_interest[grepl("Y", bin_of_interest$peptidoform_id), ]
# first generate a list of lists with the foreground IDs
# the list is the protein IDs column, with each sublist representinc a row cell split at the ',' separator between different IDs
foreground_id_list <- lapply(strsplit(tyrosines_containing_foreground$protein, ", "), function(x) unlist(strsplit(x, ", ")))
# clean them up to be able to match bakc to SwissProt library
clean_foreground_ID_list  <- lapply(foreground_id_list, ProteinIDCleaningFunction)
# keep only unique IDs for each row (sublist)
foreground_cleaned_IDs <- lapply(clean_foreground_ID_list, unique)
# process each sublist in foreground_cleaned_IDs to return the SwissProt Entry
# if there is one, if not retain prevous ID(s)
foreground_cleaned_IDs <- lapply(foreground_cleaned_IDs, process_sublist, Swiss_Prot_Human, neXtProt_list, RefSeq_list)
# Flatten the foreground_cleaned_IDs list to then add to our data frame
flattened_foreground_cleaned_IDs <- sapply(foreground_cleaned_IDs, function(x) paste(x, collapse = ","))
tyrosines_containing_foreground$cleaned_protein_IDs <- flattened_foreground_cleaned_IDs
# filter to only include rows with SwissProt Entry hits
tyrosines_containing_foreground_inSwissProt <- tyrosines_containing_foreground[tyrosines_containing_foreground$cleaned_protein_IDs %in% Swiss_Prot_Human$Entry,]
# For foreground dataset
foreground_genes <- extractEnsemblGeneIDs(tyrosines_containing_foreground_inSwissProt, Uniprot)
cluster_GO_MF <- enrichGO(gene      = foreground_genes,
universe     = background_genes,
OrgDb        = org.Hs.eg.db,  # human annotation
keyType      = "ENSEMBL", #just to make sure
ont          = "MF",  # For Biological Process; can use "MF" for Molecular Function or "CC" for Cellular Component
pAdjustMethod = "BH", # Benjamini-Hochberg
pvalueCutoff = 1,
qvalueCutoff = 0.1)
########### now for molecular function
GO_term_dataframe_MF <- as.data.frame(cluster_GO_MF)
cluster_GO_CC <- enrichGO(gene      = foreground_genes,
universe     = background_genes,
OrgDb        = org.Hs.eg.db,  # human annotation
keyType      = "ENSEMBL", #just to make sure
ont          = "CC",  # For Biological Process; can use "MF" for Molecular Function or "CC" for Cellular Component
pAdjustMethod = "BH", # Benjamini-Hochberg
pvalueCutoff = 1,
qvalueCutoff = 0.1)
##### MF ######
gene_ratio <- as.numeric(sapply(strsplit(GO_term_dataframe_MF$GeneRatio, "/"), function(x) as.numeric(x[1]) / as.numeric(x[2])))
GO_term_dataframe_MF$GeneRatio <- gene_ratio
GO_term_dataframe_MF$Description <- str_wrap(GO_term_dataframe_MF$Description, width = 50)
D3_MF <- ggplot(GO_term_dataframe_MF, aes(x = GeneRatio, y = reorder(Description, GeneRatio), size = Count, color = p.adjust)) +
geom_point() + # Create the dots
scale_color_gradient(low = "red", high = "blue") + # Color gradient from low (good) to high (bad) p-values
theme_bw() +
scale_size(range = c(3, 8)) +
labs(
title = "BOI_GO_MF",
x = "Gene Ratio",
size = "Count",
color = "p.adjusted"
) +
theme(
legend.position = "right",
axis.text.x = element_text(angle = 45, hjust = 1, size = 12),
axis.text.y = element_text(angle = 0,hjust = 1, size = 10),
axis.ticks.length.x = unit(2, "mm"),
axis.ticks = element_line(linewidth = 1),
axis.title.x = element_blank(),
# plot.title = element_text(size = 12),
plot.title = element_blank(),
axis.title.y = element_blank(),
legend.text = element_text(size = 10)
)
D3_MF
D3_
##### MF ######
gene_ratio <- as.numeric(sapply(strsplit(GO_term_dataframe_MF$GeneRatio, "/"), function(x) as.numeric(x[1]) / as.numeric(x[2])))
GO_term_dataframe_MF$GeneRatio <- gene_ratio
GO_term_dataframe_MF$Description <- str_wrap(GO_term_dataframe_MF$Description, width = 50)
DM1_MF <- ggplot(GO_term_dataframe_MF, aes(x = GeneRatio, y = reorder(Description, GeneRatio), size = Count, color = p.adjust)) +
geom_point() + # Create the dots
scale_color_gradient(low = "red", high = "blue") + # Color gradient from low (good) to high (bad) p-values
theme_bw() +
scale_size(range = c(3, 8)) +
labs(
title = "BOI_GO_MF",
x = "Gene Ratio",
size = "Count",
color = "p.adjusted"
) +
theme(
legend.position = "right",
axis.text.x = element_text(angle = 45, hjust = 1, size = 12),
axis.text.y = element_text(angle = 0,hjust = 1, size = 10),
axis.ticks.length.x = unit(2, "mm"),
axis.ticks = element_line(linewidth = 1),
axis.title.x = element_blank(),
# plot.title = element_text(size = 12),
plot.title = element_blank(),
axis.title.y = element_blank(),
legend.text = element_text(size = 10)
)
DM1_MF
ggsave("../out/15pc_sum_AUC_results/plots_to_show/pathway enrichment/DM1_GO_MF.png",
plot = DM1_MF,
width = width_in_inches ,
height = height_in_inches, units = "in",
dpi = 600)
####### CC ##########
gene_ratio <- as.numeric(sapply(strsplit(GO_term_dataframe_CC$GeneRatio, "/"), function(x) as.numeric(x[1]) / as.numeric(x[2])))
GO_term_dataframe_CC$GeneRatio <- gene_ratio
GO_term_dataframe_CC
GO_term_dataframe_CC <- as.data.frame(cluster_GO_CC)
####### CC ##########
gene_ratio <- as.numeric(sapply(strsplit(GO_term_dataframe_CC$GeneRatio, "/"), function(x) as.numeric(x[1]) / as.numeric(x[2])))
GO_term_dataframe_CC$GeneRatio <- gene_ratio
GO_term_dataframe_CC$Description <- str_wrap(GO_term_dataframe_CC$Description, width = 50)
DM1_CC <- ggplot(GO_term_dataframe_CC, aes(x = GeneRatio, y = reorder(Description, GeneRatio), size = Count, color = p.adjust)) +
geom_point() + # Create the dots
scale_color_gradient(low = "red", high = "blue") + # Color gradient from low (good) to high (bad) p-values
theme_bw() +
scale_size(range = c(3, 8)) +
labs(
title = "BOI_GO_CC",
x = "Gene Ratio",
size = "Count",
color = "p.adjusted"
) +
theme(
legend.position = "right",
axis.text.x = element_text(angle = 45, hjust = 1, size = 12),
axis.text.y = element_text(hjust = 1, size = 12, face = "plain", lineheight = 1),
axis.ticks.length.x = unit(2, "mm"),
axis.ticks = element_line(linewidth = 1),
axis.title.x = element_blank(),
# plot.title = element_text(size = 12),
plot.title = element_blank(),
axis.title.y = element_blank(),
legend.text = element_text(size = 10)
)
DM1_CC
ggsave("../out/15pc_sum_AUC_results/plots_to_show/pathway enrichment/DM1_GO_CC.png",
plot = DM1_CC,
width = width_in_inches ,
height = height_in_inches, units = "in",
dpi = 600)
